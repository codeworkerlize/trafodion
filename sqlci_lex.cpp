#line 2 "/home/esoye/trafodion/sqlci_lex.cpp"

#line 4 "/home/esoye/trafodion/sqlci_lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer sqlci_create_buffer
#define yy_delete_buffer sqlci_delete_buffer
#define yy_scan_buffer sqlci_scan_buffer
#define yy_scan_string sqlci_scan_string
#define yy_scan_bytes sqlci_scan_bytes
#define yy_init_buffer sqlci_init_buffer
#define yy_flush_buffer sqlci_flush_buffer
#define yy_load_buffer_state sqlci_load_buffer_state
#define yy_switch_to_buffer sqlci_switch_to_buffer
#define yypush_buffer_state sqlcipush_buffer_state
#define yypop_buffer_state sqlcipop_buffer_state
#define yyensure_buffer_stack sqlciensure_buffer_stack
#define yy_flex_debug sqlci_flex_debug
#define yyin sqlciin
#define yyleng sqlcileng
#define yylex sqlcilex
#define yylineno sqlcilineno
#define yyout sqlciout
#define yyrestart sqlcirestart
#define yytext sqlcitext
#define yywrap sqlciwrap
#define yyalloc sqlcialloc
#define yyrealloc sqlcirealloc
#define yyfree sqlcifree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sqlci_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sqlci_create_buffer
#endif

#ifdef yy_delete_buffer
#define sqlci_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sqlci_delete_buffer
#endif

#ifdef yy_scan_buffer
#define sqlci_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sqlci_scan_buffer
#endif

#ifdef yy_scan_string
#define sqlci_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sqlci_scan_string
#endif

#ifdef yy_scan_bytes
#define sqlci_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sqlci_scan_bytes
#endif

#ifdef yy_init_buffer
#define sqlci_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sqlci_init_buffer
#endif

#ifdef yy_flush_buffer
#define sqlci_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sqlci_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sqlci_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sqlci_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sqlci_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sqlci_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sqlcipush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sqlcipush_buffer_state
#endif

#ifdef yypop_buffer_state
#define sqlcipop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sqlcipop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sqlciensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sqlciensure_buffer_stack
#endif

#ifdef yylex
#define sqlcilex_ALREADY_DEFINED
#else
#define yylex sqlcilex
#endif

#ifdef yyrestart
#define sqlcirestart_ALREADY_DEFINED
#else
#define yyrestart sqlcirestart
#endif

#ifdef yylex_init
#define sqlcilex_init_ALREADY_DEFINED
#else
#define yylex_init sqlcilex_init
#endif

#ifdef yylex_init_extra
#define sqlcilex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sqlcilex_init_extra
#endif

#ifdef yylex_destroy
#define sqlcilex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sqlcilex_destroy
#endif

#ifdef yyget_debug
#define sqlciget_debug_ALREADY_DEFINED
#else
#define yyget_debug sqlciget_debug
#endif

#ifdef yyset_debug
#define sqlciset_debug_ALREADY_DEFINED
#else
#define yyset_debug sqlciset_debug
#endif

#ifdef yyget_extra
#define sqlciget_extra_ALREADY_DEFINED
#else
#define yyget_extra sqlciget_extra
#endif

#ifdef yyset_extra
#define sqlciset_extra_ALREADY_DEFINED
#else
#define yyset_extra sqlciset_extra
#endif

#ifdef yyget_in
#define sqlciget_in_ALREADY_DEFINED
#else
#define yyget_in sqlciget_in
#endif

#ifdef yyset_in
#define sqlciset_in_ALREADY_DEFINED
#else
#define yyset_in sqlciset_in
#endif

#ifdef yyget_out
#define sqlciget_out_ALREADY_DEFINED
#else
#define yyget_out sqlciget_out
#endif

#ifdef yyset_out
#define sqlciset_out_ALREADY_DEFINED
#else
#define yyset_out sqlciset_out
#endif

#ifdef yyget_leng
#define sqlciget_leng_ALREADY_DEFINED
#else
#define yyget_leng sqlciget_leng
#endif

#ifdef yyget_text
#define sqlciget_text_ALREADY_DEFINED
#else
#define yyget_text sqlciget_text
#endif

#ifdef yyget_lineno
#define sqlciget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sqlciget_lineno
#endif

#ifdef yyset_lineno
#define sqlciset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sqlciset_lineno
#endif

#ifdef yywrap
#define sqlciwrap_ALREADY_DEFINED
#else
#define yywrap sqlciwrap
#endif

#ifdef yyalloc
#define sqlcialloc_ALREADY_DEFINED
#else
#define yyalloc sqlcialloc
#endif

#ifdef yyrealloc
#define sqlcirealloc_ALREADY_DEFINED
#else
#define yyrealloc sqlcirealloc
#endif

#ifdef yyfree
#define sqlcifree_ALREADY_DEFINED
#else
#define yyfree sqlcifree
#endif

#ifdef yytext
#define sqlcitext_ALREADY_DEFINED
#else
#define yytext sqlcitext
#endif

#ifdef yyleng
#define sqlcileng_ALREADY_DEFINED
#else
#define yyleng sqlcileng
#endif

#ifdef yyin
#define sqlciin_ALREADY_DEFINED
#else
#define yyin sqlciin
#endif

#ifdef yyout
#define sqlciout_ALREADY_DEFINED
#else
#define yyout sqlciout
#endif

#ifdef yy_flex_debug
#define sqlci_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug sqlci_flex_debug
#endif

#ifdef yylineno
#define sqlcilineno_ALREADY_DEFINED
#else
#define yylineno sqlcilineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 235
#define YY_END_OF_BUFFER 236
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2062] =
    {   0,
      223,  223,    0,    0,  223,  223,  236,  234,    1,    1,
      233,  234,  234,  234,  218,  219,  217,  220,  221,  223,
      208,  234,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  234,  234,  229,    2,    2,  235,
      222,    1,    1,  222,  222,  222,  222,  217,  220,  221,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,    1,    0,  227,    0,
        0,  226,    0,  223,  224,  228,  228,  228,  228,  228,

      228,  228,   23,  228,  171,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,   57,
      228,   92,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  189,  228,   68,  228,  228,  228,  170,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,   80,
       79,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  132,  228,  228,
      228,  228,  228,  228,  228,  228,  228,   90,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,    0,
        0,  229,    2,    2,  222,    1,    1,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,   23,  222,  171,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,   57,
      222,   92,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  189,  222,   68,  222,  222,  222,  170,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,   80,
       79,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  132,  222,  222,
      222,  222,  222,  222,  222,  222,  222,   90,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,    0,    0,  232,  224,  228,  228,   17,   18,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,   96,   35,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,   55,  228,
      228,  228,  228,  228,  228,  228,  228,  228,   93,  228,
      228,   64,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  152,  228,  228,  228,  228,  228,  228,  104,   74,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,   81,  228,  228,  228,  228,  228,  228,  228,
       97,  228,  228,  228,  228,   98,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  148,
      228,  109,  228,  228,  228,  228,  115,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  190,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   96,  231,    0,  222,  222,  222,  222,  222,  222,
       17,   18,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,   96,   35,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,   55,  222,  222,  222,  222,  222,  222,  222,  222,
      222,   93,  222,  222,   64,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  152,  222,  222,  222,  222,  222,
      222,  104,   74,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,   81,  222,  222,  222,  222,
      222,  222,  222,   97,  222,  222,  222,  222,   98,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  148,  222,  109,  222,  222,  222,  222,  115,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  190,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,   96,  222,  222,    0,    0,  228,
      228,  228,  228,  228,  228,  228,   25,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,   44,  228,  228,  160,   53,  169,
      228,  228,  228,  165,   91,  228,  228,  228,  228,   62,
      228,  168,  228,    0,  180,  228,  228,  228,   66,  195,
      228,  228,  228,   69,  228,  228,  228,  228,  228,  228,
       71,  161,  228,  228,  117,  228,  228,   76,  228,  228,
      113,  228,  228,   77,  228,   83,  228,   36,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,    0,  228,  228,

      134,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  146,  228,  228,  194,  174,  230,  231,  222,
      222,  222,  222,  222,  222,  222,  222,  222,   25,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,   44,  222,  222,  160,
       53,  169,  222,  222,  222,  165,   91,  222,  222,  222,
      222,   62,  222,  168,  222,  222,  180,  222,  222,  222,
       66,  195,  222,  222,  222,   69,  222,  222,  222,  222,
      222,  222,   71,  161,  222,  222,  117,  222,  222,   76,

      222,  222,  113,  222,  222,   77,  222,   83,  222,   36,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  134,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  146,  222,  222,  194,  174,  222,
      222,  225,  228,  228,  159,  228,   21,   22,   37,  228,
      228,  228,  196,   27,  228,  131,   28,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,   87,  228,  228,  228,  228,  228,
       61,  112,  228,    0,  179,   89,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,   72,  228,  228,
      183,  210,  228,  228,    4,  228,  228,  228,  119,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  106,  228,  228,
      228,  228,  228,  228,  228,  228,  228,    0,  228,  133,
      228,  228,  228,  228,  228,  228,  228,  228,  142,  228,
      228,  143,  228,  228,  228,  228,  155,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  167,  228,  228,  228,

      228,  191,  228,  230,  222,  222,  222,  159,  222,   21,
       22,   37,  222,  222,  222,  196,   27,  222,  131,   28,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,   87,  222,  222,
      222,  222,  222,   61,  112,  222,  222,  179,   89,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
       72,  222,  222,  183,  210,  222,  222,    4,  222,  222,
      222,  119,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      106,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  133,  222,  222,  222,  222,  222,  222,  222,
      222,  142,  222,  222,  143,  222,  222,  222,  222,  155,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  167,
      222,  222,  222,  222,  191,  222,  222,  228,  204,   19,
      116,  228,  228,  228,  228,  228,  228,   31,  228,  228,
      158,  228,   38,  228,  228,  228,   43,  151,  228,   24,
      228,   56,  228,  228,  228,   59,  228,  228,    0,  228,
       67,  228,   70,  228,  153,  228,  103,  228,  228,  228,
      228,   75,  228,  228,   78,  228,  228,  120,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,   99,  228,  114,  228,  228,  228,  228,
      202,  181,  228,  129,  228,  187,  149,  228,    0,    0,
      110,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      192,  228,  228,  228,  228,  144,  145,  214,  228,  228,
      228,  211,  163,  228,  150,  154,  228,  156,  228,  228,
      228,  222,  204,   19,  116,  222,  222,  222,  222,  222,
      222,   31,  222,  222,  158,  222,   38,  222,  222,  222,
       43,  151,  222,   24,  222,   56,  222,  222,  222,   59,
      222,  222,  222,  222,   67,  222,   70,  222,  153,  222,
      103,  222,  222,  222,  222,   75,  222,  222,   78,  222,

      222,  120,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,   99,  222,  114,
      222,  222,  222,  222,  202,  181,  222,  129,  222,  187,
      149,  222,  222,  222,  110,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  192,  222,  222,  222,  222,  144,
      145,  214,  222,  222,  222,  211,  163,  222,  150,  154,
      222,  156,  222,  222,  222,  228,   20,  184,  228,  228,
       26,   29,   32,  228,   33,  228,  228,    0,   41,   42,
       40,  228,  228,   46,  147,  166,   58,   60,  228,    0,
      105,  228,  228,  228,  228,  228,  162,  228,  228,  228,

      228,   84,   82,  228,  121,  228,  228,  164,  228,   86,
      228,  228,  203,    6,  127,  228,  228,  216,  228,  228,
      228,    0,  228,   95,  228,  228,  141,    0,    0,  228,
      137,  100,  228,  228,  140,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,    0,  228,  157,  228,
      193,  222,   20,  184,  222,  222,   26,   29,   32,  222,
       33,  222,  222,   41,   42,   40,  222,  222,   46,  147,
      166,   58,   60,  222,  222,  105,  222,  222,  222,  222,
      222,  162,  222,  222,  222,  222,   84,   82,  222,  121,
      222,  222,  164,  222,   86,  222,  222,  203,    6,  127,

      222,  222,  216,  222,  222,  222,  222,  222,   95,  222,
      222,  141,  222,  222,  222,  137,  100,  222,  222,  140,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  157,  222,  193,  228,  228,  228,   30,
      228,   34,  228,  228,    0,  228,  228,   11,    0,  228,
       63,    0,  228,  228,  209,  228,  228,   73,  228,  182,
      228,  228,  228,  206,  125,   85,  228,  207,  228,  185,
      228,  228,  228,  228,    0,  228,  172,  228,    0,    0,
      228,  136,  138,  228,  228,  228,  228,  228,   88,  228,
      228,  228,  212,  228,    0,    0,  126,  118,  222,  222,

      222,   30,  222,   34,  222,  222,  222,  222,   11,  222,
      222,   63,  222,  222,  222,  209,  222,  222,   73,  222,
      182,  222,  222,  222,  206,  125,   85,  222,  207,  222,
      185,  222,  222,  222,  222,  222,  222,  172,  222,  222,
      222,  222,  136,  138,  222,  222,  222,  222,  222,   88,
      222,  222,  222,  212,  222,  222,  222,  126,  118,  228,
      228,  228,  228,  228,  228,    0,  228,  228,    0,    0,
        0,  228,  228,    0,  228,  228,  228,  228,    7,  228,
      228,  228,  123,  124,  228,   94,  228,  228,    0,  228,
      215,  107,    0,  228,  139,  101,  228,  188,  228,  228,

      228,  130,  228,    0,    0,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,    7,  222,  222,  222,  123,  124,  222,
       94,  222,  222,  222,  222,  215,  107,  222,  222,  139,
      101,  222,  188,  222,  222,  222,  130,  222,  222,  222,
      228,  213,  228,    5,  228,  228,    0,  228,  228,    0,
        0,    0,  228,   50,    0,  228,  177,  228,  111,   10,
      228,  228,  228,  128,  228,    0,  228,    0,  228,  228,
      173,  228,  228,  186,    0,    0,  222,  213,  222,    5,
      222,  222,  222,  222,  222,  222,  222,  222,   50,  222,

      222,  177,  222,  111,   10,  222,  222,  222,  128,  222,
      222,  222,  222,  222,  222,  173,  222,  222,  186,  222,
      222,  205,  228,  228,  228,   39,  228,  228,   48,    0,
        0,  228,  228,    0,  228,  199,  197,  228,  228,  228,
        0,  228,    0,  135,  228,  228,  228,    0,    0,  205,
      222,  222,  222,  222,  222,   48,  222,  222,  222,  222,
      222,  222,  199,  197,  222,  222,  222,  222,  222,  222,
      135,  222,  222,  222,  222,  222,  228,  228,  228,  228,
      228,    0,    0,  228,  228,    0,  228,  228,  178,   16,
       16,  228,    0,  228,  228,  228,    0,    0,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      178,   16,   16,  222,  222,  222,  222,  222,  222,  222,
      228,   12,  228,  228,   15,    0,    0,  228,  228,    0,
      201,  122,  228,    0,  228,   14,  228,    0,    0,  222,
       12,  222,  222,   15,  222,  222,  222,  222,  222,  201,
      122,  222,  222,  222,   14,  222,  222,  222,    9,   13,
      228,    0,   54,  228,  228,   65,    8,    0,  228,  228,
        0,    0,    9,   13,  222,  222,   54,  222,  222,   65,
        8,  222,  222,  222,  222,  222,  200,    0,   49,  228,
      108,  102,  228,    0,    0,  200,  222,   49,  222,  108,

      102,  222,  222,  222,    0,  228,  198,    0,    0,  222,
      222,  198,  222,  222,    0,  228,    0,  175,  222,  222,
      222,  175,   47,   51,    0,   47,   51,  222,  228,    0,
      222,  222,  228,    0,  222,  222,  228,    0,  222,  222,
      228,    0,  222,  222,  228,    0,  222,  222,  228,    0,
      222,  222,   52,    0,   52,  222,    0,  222,  176,  176,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    1,    9,   10,
       11,   12,    1,   13,   14,   15,    8,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    8,   17,    1,
        1,    1,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,    1,    8,   47,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[48] =
    {   0,
        1,    2,    1,    3,    1,    4,    5,    4,    6,    2,
        2,    4,    1,    4,    7,    8,    2,    1,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    1,    4,   10
    } ;

static const flex_int16_t yy_base[2085] =
    {   0,
        0,    0,   46,   49,   66,    0, 3339, 6781,  112,  115,
     6781, 3329, 3323, 3320, 6781, 6781, 6781, 6781, 3312, 3307,
     6781,    0,   99,  103,  123,  101,  112,  140,  100,  105,
      140,    0,   28,  146,  151,  158,  166,  104,   31,  187,
      184,  164,   39,  185, 3284,    0,    0,  229,  232, 6781,
        0,  235,  238,    0,  242, 3305,  287,    0,    0, 3295,
     3290,  332,  378,  424,  452,  230,  239,  274,  240,  298,
      473,  266,  330,  493,  275,  515,  337,  374,  336,  536,
      383,  424,  384,  557, 3266,  595,  270, 3293, 3290,    0,
     3279, 6781, 3284, 3266,    0,    0,  109, 3257,  122, 3255,

     3245, 3242,    0,  350,    0,  132,  231,  156, 3227, 3241,
     3234, 3217,  593, 3215, 3218, 3215, 3218, 3204, 3203,    0,
      430,    0, 3200,  145, 3200, 3200,  162, 3190, 3206, 3205,
      179, 3188,    0, 3178,  282, 3173, 3162,  202,    0, 3164,
       97, 3171, 3162, 3168, 3156, 3154, 3138,  233,  201, 3155,
        0,  242, 3147, 3135,  130, 3136, 3144, 3127,  291, 3124,
     3130, 3123,  624,  285, 3100, 3111,  324,  319, 3110, 3111,
     3102,  297, 3111, 3101,  247, 3102,  250,    0,  264, 3094,
      293,  306, 3087, 3083, 3074,  362, 3076, 3054, 3053, 3047,
     3070,    0,  413,  437,    0,  463,  477,  664,    0,  709,

      755,    0,  491, 3068,  800,  484,  522,  596,  597,  636,
      656,  657,  550,  666,  667,  707,  713,  734,  744,  712,
      752,  755,  828,  758,  766,  797,  798,  803,  804,  825,
      848,  834,  854,  855,  860,  876,  881,  882,  887,  888,
      908,  911,  914,  917,  937,  943,  946,  966,  967,  973,
      974,  994,  995, 1000, 1005, 1021, 1026, 1035, 1027, 1051,
     1057, 1058, 1063, 1069, 1079, 1085, 1090, 1091, 1097, 1113,
     1118, 1119, 1139, 1129, 1149, 1155, 1165, 1171, 1187, 1177,
     1197, 1198, 1209, 1203, 1219, 1229, 1239, 1240, 1245, 1250,
     1266, 1271, 1276, 1287, 1282, 1292, 1308, 1303, 1313, 3044,

     1351, 3073, 3076, 6781,    0, 3034, 3042,    0,    0, 3043,
     3035, 3032, 3031, 3027, 3022, 3024, 3022, 3008, 3011, 2994,
     3008, 2987, 2990, 2982,    0,    0, 2993,  358, 2981, 2970,
      399, 2976, 2973, 2974, 2956, 2953, 2952, 2943, 2940, 2941,
     2942, 2950, 2930,  422, 2931, 2945, 2938, 2923,    0, 2924,
     2929,  496, 2924, 2914, 2903, 2901, 2911, 2906, 2894,  450,
     2882, 2894, 2892, 2881, 2866, 2874, 2889, 2881,    0,    0,
     2882, 2887,  382, 2868, 2869, 2860, 2869, 2853, 2847, 2849,
     2837, 2856,    0, 2841, 2845, 2839, 2841,  409, 2826, 2825,
        0, 2820, 2824,  429, 2831,    0, 2829, 2829, 2809, 2817,

     2806, 2814,  491,  583, 2802, 2802, 2793, 2802, 2801, 2796,
     2777,  622, 2783, 2770, 2776, 2782,    0, 2764, 2764, 2775,
     2758, 2757, 2754, 2759, 2765, 2751, 2743, 2742,    0, 2739,
     2748, 2749, 2744, 2731,  217, 2725, 2717, 2722, 2719, 2721,
     2717, 6781,  502, 2727, 1398, 1368,    0, 1444, 1354, 1364,
     1390, 1395, 1396, 1401, 1402, 1441, 1442, 1462, 1448, 1468,
     1476, 1482, 1488, 1494, 1500, 1508, 1522, 1528, 1529, 1534,
     1540, 1550, 1560, 1566, 1572, 1578, 1584, 1590, 1596, 1602,
     1608, 1614, 1620, 1626, 1640, 1632, 1650, 1656, 1666, 1672,
     1677, 1680, 1686, 1700, 1723, 1709, 1712, 1718, 1730, 1739,

     1748, 1755, 1762, 1771, 1778, 1783, 1789, 1792, 1810, 1813,
     1818, 1819, 1839, 1840, 1845, 1861, 1867, 1866, 1873, 1889,
     1894, 1895, 1900, 1901, 1922, 1923, 1930, 1929, 1950, 1951,
     1957, 1960, 1978, 1981, 1984, 1990, 2006, 2011, 2014, 2020,
     2032, 2038, 2044, 2041, 2062, 2069, 2070, 2078, 2094, 2099,
     2102, 2108, 2120, 2126, 2148, 2136, 2142, 2156, 2162, 2168,
     2174, 2180, 2186, 2192, 2198, 2204, 2214, 2220, 2226, 2236,
     2244, 2247, 2254, 2265, 2270, 2275, 2286, 2293, 2298, 2304,
     2307, 2314, 2328, 2334,    0,  512, 2372, 2734, 2729, 2704,
     2688, 2691, 2683, 2687, 2691, 2691,    0, 2686, 2678, 2678,

     2671, 2658,  440, 2671,  513,  470, 2650, 2664, 2653, 2652,
     2662, 2637, 2643, 2630, 2631, 2635, 2631,    0,    0,    0,
     2636, 2618, 2615, 2609,    0, 2624, 2602, 2616, 2601,    0,
     2588,    0, 2587,  634,    0, 2584, 2596, 2583,    0,    0,
     2577, 2572, 2576,    0, 2578, 2564, 2563, 2563, 2560, 2539,
        0, 2554, 2555, 2551,    0, 2544, 2545,    0, 2540, 2526,
        0, 2522, 2529,    0, 2534,    0, 2521,    0, 2526, 2516,
     2523, 2521, 2522, 2508, 2515, 2510, 2493, 2505, 2486, 2485,
     2494, 2477, 2484, 2490, 2485, 2471,  398, 2459, 2458, 2460,
     2460, 2463, 2459, 2444, 2444, 2449, 2442,  704, 2427, 2426,

     1742, 2434, 2417,  490, 2427, 2410, 2415, 2410, 2400, 2398,
     2384, 2382, 2367, 2382,  523, 2376, 2359, 2360, 2358, 2360,
     2353, 2347,    0, 2344, 2342, 2329,    0, 2345,  548, 2353,
     2419, 2369, 2370, 2375, 2376, 2411, 2416, 2419, 2422, 2425,
     2443, 2449, 2448, 2457, 2469, 2477, 2483, 2480, 2489, 2501,
     2507, 2512, 2513, 2533, 2538, 2539, 2544, 2560, 2565, 2566,
     2571, 2574, 2592, 2595, 2598, 2601, 2606, 2622, 2627, 2628,
     2633, 2634, 2654, 2655, 2660,  852, 2661, 2666, 2682, 2688,
     2687, 2693, 2694, 2714, 2715, 2720, 2721, 2741, 2742, 2747,
     2750, 2768, 2771, 2774, 2780, 2798, 2803, 2804, 2810, 2824,

     2830, 2831, 2838, 2852, 2859, 2858, 2864, 2880, 2886, 2885,
     2906, 2907, 2912, 2913, 2918, 2934, 2939, 2940, 2946, 2960,
     2966, 2969, 2972, 2978, 2990, 2999, 3000, 3006, 3011, 3020,
     3027, 3032, 3038, 3052, 3058, 3059, 3068, 3079, 3082,  968,
     3089, 3100, 3120, 3088, 3110, 3126, 3132, 3140, 3146, 3152,
     3158, 3164, 3172, 3178, 3184, 3190, 3196, 3204, 3212, 3218,
     3224, 3236, 3242, 3248, 3245, 3266, 3254, 3272, 3275, 2343,
      552, 6781, 2319, 2333,    0, 2321,    0,    0,    0, 2319,
     2315, 2323, 2301,    0, 2299,    0,    0, 2296, 2293, 2281,
     2288, 2281, 2287, 2275, 2268, 2269, 2264, 2269, 2274, 2273,

     2268, 2261, 2267, 2245,    0, 2249, 2240, 2248, 2233, 2248,
        0,    0, 2246, 2223,    0,    0, 2224, 2216, 2206, 2228,
     2229, 2209, 2214, 2218, 2219, 2214, 2200,    0, 2212, 2186,
        0,    0, 2183, 2192,    0, 2182, 2187, 2184, 2176, 2172,
     2171, 2182, 2182, 2160,  545, 2172, 2168, 2168, 2147, 2140,
     2138, 2135, 2133, 2131, 2147, 2122, 2130,  516, 2118, 2115,
     2125, 2128, 2104, 2108, 2115, 2095, 2095,  551, 2086,    0,
     2090, 2098, 2087, 2083, 2082,  624, 2074, 2074,    0, 2072,
     2054,    0, 2054, 2061, 2044, 2053,    0, 2045, 2046, 2051,
     2053, 2047, 2037, 2038, 2039, 2021,    0, 2034, 2011, 2013,

     2009,    0, 2001, 2022,    0, 3278, 3284, 3296, 3302, 3305,
     3308, 3314, 3326, 3332, 3335, 3338, 3344, 3356, 3362, 3365,
     3370, 3386, 3391, 3392, 3398, 3397, 3418, 3419, 3425, 3424,
     3445, 3446, 3451, 3467, 3472, 3473, 3478, 3481, 3499, 3502,
     3505, 3508, 3526, 3529, 3532, 3535, 1997, 3538, 3556, 3559,
     3562, 3565, 3568, 3586, 3591, 3594, 3597, 3600, 3618, 3621,
     3624, 3627, 3632, 3648, 3653, 3654, 3660, 3676, 3681, 3684,
     3702, 3690, 3710, 3711, 3716, 3722, 3732, 3740, 3746, 3752,
     3760, 3766, 3772, 3780, 3788, 3794, 3800, 3806, 3814, 3820,
     3830, 3836, 3841, 3842, 3848, 3862, 3868, 3869, 3874, 3880,

      610, 3892, 3898, 3904, 3903, 3912, 3924, 3934, 3935, 3940,
     3956, 3946, 3962, 3968, 3976, 3984, 3990, 3996, 4004, 4010,
     4018, 4026, 4036, 4042, 4047, 4048, 4068, 4056, 4074, 4077,
     4080, 4086, 4098, 4106, 4107, 4114, 2016, 1991,    0, 1981,
        0, 1990, 1969, 1979, 1971, 1980, 1961,    0, 1960, 1961,
     1969, 1947, 1980, 1961, 1955, 1939,    0, 1951, 1951,    0,
     1921,    0, 1940, 1934, 1923,    0, 1916, 1913, 1931, 1904,
        0, 1922,    0, 1910,    0, 1910,    0, 1894, 1893, 1897,
     1883, 1879, 1881, 1868,    0, 1870, 1878,    0, 1874, 1862,
     1863, 1853, 1864, 1843, 1842, 1836, 1853, 1844, 1836, 1835,

     1837, 1826, 1829,    0, 1831,    0, 1802,  552, 1804, 1803,
        0,    0, 1803,    0, 1796,    0,    0, 1788, 1798, 1798,
        0, 1781, 1780, 1759, 1772, 1773, 1749, 1764, 1763, 1754,
        0, 1749, 1722, 1724, 1731,    0,    0,    0, 1732, 1710,
     1702,    0,    0, 1702,  697,    0, 1696,    0, 1701, 1705,
     1691, 4128, 4136, 4142, 4137, 4158, 4148, 4166, 4169, 4176,
     4187, 4190, 4197, 4208, 4196, 4217, 4218, 4224, 4229, 4238,
     4245, 4250, 4259, 4266, 4271, 4277, 4280, 4287, 4298, 4301,
     4308, 4309, 1702, 4319, 4329, 4330, 4335, 4340, 4341, 4361,
     4362, 4367, 4373, 4385, 4393, 4396, 4401, 4407, 4417, 4423,

     4428, 4429, 4439, 4449, 4450, 4455, 4460, 4471, 4476, 4481,
     4492, 4497, 4502, 4503, 4508, 4524, 4529, 4530, 4535, 4536,
     4556, 4557, 4562, 4563, 4568, 4584, 4589, 4590, 4596, 4595,
     4616, 4617, 1700, 1693, 4622, 4625, 4643, 4646, 4651, 4657,
     4669, 4675, 4678, 4681, 4687, 4699, 4705, 4711, 4710, 4717,
     4731, 4737, 4738, 4745, 4761, 4766, 4767, 4772, 4809, 4795,
     4798, 4801, 4806, 4827, 4830, 1692,    0,    0,  109,  176,
        0,  262,    0,  290,  314,  325,  344,  587,    0,    0,
      357,  378,  422,  737,    0,    0,    0,    0,  436,  446,
        0,  493,  496,  516,  514,  511,    0,  559,  546,  566,

      573,    0,    0,  564,  552,  582,  616,  622,  616,    0,
      616,  618,    0,    0,    0,  624,  644,    0,  628,  645,
      651,  656,  658,    0,  668,  679,    0,  683,  687,  682,
        0,    0,  695,  697,    0,  699,  699,  706,  712,  720,
      716,  728,  732,  733,  753,  741, 2365,  763,    0,  750,
        0, 4835, 4836, 4841, 4857, 4863, 4862, 4868, 4884, 4889,
     4892, 4898, 4914, 4919, 4920, 4925, 4926, 4946, 4983, 4952,
     4955, 4958, 4976, 4982,  754, 4988, 5006, 5012, 5015, 5018,
     5024, 5036, 5042, 5047, 5048, 5054, 5068, 5074, 5075, 5080,
     5096, 5101, 5106, 5107, 5112, 5117, 5128, 5133, 5138, 5139,

     5144, 5149, 5160, 5165, 5171, 5170,  765, 5191, 5192, 5197,
     5200, 5218,  768,  778, 5221, 5224, 5227, 5245, 5248, 5251,
     5254, 5272, 5275, 5280, 5296, 5286, 5302, 5307, 5308, 5328,
     5329, 3964, 5334, 5335, 5340, 5356,  773,  796,  794,    0,
      794,    0,  798,  798,  805,  816,  806,    0, 5358,  827,
        0,  832,  841,  824,    0,  842,  844,    0,  850,    0,
      860,  868,  869,    0,    0,    0,  871,    0,  878,    0,
      872,  880,  872,  877,  878,  891,    0,  890,  906,  895,
      899,    0,    0,  915,  902,  905,  905,  933,    0,  925,
      911,  928,    0,  940,  940,  930,    0,    0, 5362, 5363,

     5383, 5384, 5389, 5392, 5410, 5416, 5415, 5424, 5421, 5461,
     5447, 5448,  951, 5453, 5469, 5474, 5492, 5485, 5480, 5501,
     5506, 5513, 5522, 5527, 5533, 5534, 5543, 5554, 5555, 5561,
     5564, 5575, 5584, 5585, 5591,  942, 5596, 5605, 5612,  965,
      957, 5617, 5623, 5626, 5633, 5644, 5647, 5653, 5654, 5674,
     5675, 5680, 5683, 5686, 5706,  968,  960, 5707, 5712,  976,
      964,  982,  978,  977,  988,  984, 1000,  989, 1002,  996,
     1000,  997, 1021, 1010, 1012, 1028, 1021, 1018,    0, 1022,
     1036, 1029,    0,    0, 1040,    0, 1026, 1055, 1056, 1064,
        0, 6781, 1065, 1052,    0,    0, 1072,    0, 1060, 1062,

     1082,    0, 1070, 1074, 1099, 5713, 5718, 5734, 5739, 5740,
     5748, 5762, 5768, 1092, 1084, 1087, 5771, 5774, 1094, 5780,
     5792, 5800, 5801, 5806, 5812, 5822, 5830, 5833, 5836, 5854,
     5842, 5860, 5863, 1111, 5866, 5872,    0, 1120, 5886, 5892,
     5893, 5898, 5904, 5914, 5920, 5925, 5926, 5934, 1106, 1125,
     1123,    0, 1109,    0, 1127, 1115, 1134, 1142, 1148, 1158,
     1163, 1160, 1152, 1145, 1159, 1161,    0, 1174,    0,    0,
     1168, 1161, 1167,    0, 1172, 1176, 1181, 1203, 1207, 1219,
        0, 1220, 1218,    0, 1208, 1212, 5946, 5952, 5955, 5958,
     5964, 5976, 5982, 5985, 1231, 1235, 1237, 5988, 5994, 1223,

     6006, 6012, 6015, 6026, 6033, 6036, 6042, 6047, 6056, 6063,
     1224, 6074, 1249, 6077, 6083, 6095, 6101, 6104, 6109, 1236,
     1241,    0, 1253, 1240, 1264, 6781, 1255, 1250, 6781, 1259,
     1372, 1268, 1277, 1286, 1293,    0,    0, 1294, 1301, 1291,
     1295, 1307, 1299,    0, 1300, 1298, 1323, 1310, 1318, 6115,
     6125, 6131, 6136, 6139, 6145,    0, 1309, 1378, 6159, 6165,
     1321, 6171, 6177, 6183, 6189, 6195, 6201, 1312, 6207, 1315,
     6213, 6219, 6225, 6233, 1322, 1334, 1329, 1329, 1326, 1347,
     1348, 1361, 1801, 1370, 1362, 1374, 1370, 1380,    0,    0,
     6781, 1389, 1396, 1400, 1397, 1400, 1416, 1405, 6239, 6245,

     6251, 6259, 6265, 1419, 1841, 6271, 6279, 1427, 6285, 6291,
     6297, 6303,    0, 6311, 1427, 6319, 6329, 6335, 1430, 1426,
     1434,    0, 1432, 1449,    0, 1436, 1450, 1448, 1438, 1445,
        0,    0, 1451, 1455, 1460,    0, 1457, 1460, 1459, 6340,
     6341, 6347, 6361, 6367, 1465, 1485, 6368, 6373, 1473, 6379,
     6389, 6397, 1482, 6403, 6409, 6415, 1480, 1483,    0,    0,
     1484, 1490, 6781, 1497, 1497, 6781,    0, 1502, 1503, 1517,
     1523, 1516, 6421, 6427, 6435, 1511,    0, 6443, 6449,    0,
     6455, 1518, 6463, 6469, 1535, 1528,    0, 1529,    0, 1534,
     6781,    0, 1524, 1537, 1550, 6475, 1547, 6481, 6487,    0,

     6493, 6499, 1544, 1560, 1561, 1561,    0, 1663, 1550, 1571,
     6505, 6511, 1867, 1557, 1563, 1568, 2008, 6781, 1569, 6517,
     2092,    0, 6781, 1564, 1574,    0, 6523, 1579, 1586, 1604,
     6533, 1610, 1602, 1603, 6539, 1604, 1609, 1621, 6544, 1633,
     1644, 1635, 6560, 1637, 1646, 1643, 6555, 1644, 1661, 1663,
     6565, 1666,    0, 1676, 6566, 1677, 1664, 1669, 6781,    0,
     6781, 6604, 6612, 6620, 6622, 6626, 1698, 6636, 6646, 6656,
     6666, 6676, 6686, 6696, 6698, 6708, 6711, 6715, 6724, 6734,
     6744, 6754, 6760, 6770
    } ;

static const flex_int16_t yy_def[2085] =
    {   0,
     2061,    1, 2062, 2062, 2061,    5, 2061, 2061, 2061, 2061,
     2061, 2063, 2061, 2064, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2065, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2061, 2067, 2068, 2061, 2068, 2061,
     2069, 2061, 2069, 2069, 2070, 2069, 2071, 2069, 2069, 2069,
     2069, 2072, 2073, 2073,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   76,   64,   64, 2069, 2074, 2061, 2063, 2063, 2075,
     2064, 2061, 2076, 2061, 2077, 2066, 2066, 2066, 2066, 2066,

     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061,
     2078, 2068, 2061, 2068, 2069, 2061, 2069, 2070,  198, 2079,

     2071, 2069, 2080, 2069, 2081,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64, 2069,

     2082, 2083, 2076, 2061, 2077, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,

     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2061, 2061, 2078, 2084, 2080, 2069, 2081,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64, 2069, 2069, 2082, 2061, 2083, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,

     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2061, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061, 2066, 2066,

     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061, 2061, 2069,
     2084,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64, 2069,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64, 2069,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64, 2069,
     2069, 2061, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,

     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2061, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,

     2066, 2066, 2066, 2061, 2069,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64, 2069,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

     2069,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64, 2069, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,

     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061, 2061,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64, 2069,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64, 2069, 2069,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,

     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2061, 2066, 2066, 2066, 2066, 2066, 2061, 2061, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2061, 2066, 2066, 2066,
     2066,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64, 2069,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64, 2069,   64,   64,   64,
       64,   64, 2069, 2069,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, 2069,   64,   64,   64,   64, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2061, 2066, 2066, 2066, 2061, 2066,
     2066, 2061, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2061, 2066, 2066, 2066, 2061, 2061,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2061, 2061, 2066, 2066,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64, 2069,
       64,   64, 2069,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64, 2069,   64,   64,   64, 2069,
     2069,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64, 2069, 2069,   64,   64, 2066,
     2066, 2066, 2066, 2066, 2066, 2061, 2066, 2066, 2061, 2061,
     2061, 2066, 2066, 2061, 2066, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2066, 2061, 2066,
     2066, 2061, 2061, 2066, 2066, 2066, 2066, 2066, 2066, 2066,

     2066, 2066, 2066, 2061, 2061,   64,   64,   64,   64,   64,
       64,   64,   64, 2069, 2069, 2069,   64,   64, 2069,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64, 2069,   64,   64, 2069, 2069,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64, 2069, 2069,
     2066, 2066, 2066, 2066, 2066, 2066, 2061, 2066, 2066, 2061,
     2061, 2061, 2066, 2066, 2061, 2066, 2066, 2066, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2061, 2066, 2061, 2066, 2066,
     2066, 2066, 2066, 2066, 2061, 2061,   64,   64,   64,   64,
       64,   64,   64,   64, 2069, 2069, 2069,   64,   64, 2069,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
     2069,   64, 2069,   64,   64,   64,   64,   64,   64, 2069,
     2069, 2066, 2066, 2066, 2066, 2061, 2066, 2066, 2061, 2061,
     2061, 2066, 2066, 2061, 2066, 2066, 2066, 2066, 2066, 2066,
     2061, 2066, 2061, 2066, 2066, 2066, 2066, 2061, 2061,   64,
       64,   64,   64,   64,   64, 2069, 2069, 2069,   64,   64,
     2069,   64,   64,   64,   64,   64,   64, 2069,   64, 2069,
       64,   64,   64,   64, 2069, 2069, 2066, 2066, 2066, 2066,
     2066, 2061, 2061, 2066, 2066, 2061, 2066, 2066, 2066, 2066,
     2061, 2066, 2061, 2066, 2066, 2066, 2061, 2061,   64,   64,

       64,   64,   64, 2069, 2069,   64,   64, 2069,   64,   64,
       64,   64, 2069,   64, 2069,   64,   64,   64, 2069, 2069,
     2066, 2066, 2066, 2066, 2066, 2061, 2061, 2066, 2066, 2061,
     2066, 2066, 2066, 2061, 2066, 2066, 2066, 2061, 2061,   64,
       64,   64,   64,   64, 2069, 2069,   64,   64, 2069,   64,
       64,   64, 2069,   64,   64,   64, 2069, 2069, 2066, 2066,
     2066, 2061, 2061, 2066, 2066, 2061, 2066, 2061, 2066, 2066,
     2061, 2061,   64,   64,   64, 2069, 2069,   64,   64, 2069,
       64, 2069,   64,   64, 2069, 2069, 2066, 2061, 2066, 2066,
     2061, 2066, 2066, 2061, 2061,   64, 2069,   64,   64, 2069,

       64,   64, 2069, 2069, 2061, 2066, 2066, 2061, 2061, 2069,
       64,   64, 2069, 2069, 2061, 2066, 2061, 2061, 2069,   64,
     2069, 2069, 2061, 2066, 2061, 2069,   64, 2069, 2066, 2061,
       64, 2069, 2066, 2061,   64, 2069, 2066, 2061,   64, 2069,
     2066, 2061,   64, 2069, 2066, 2061,   64, 2069, 2066, 2061,
       64, 2069, 2066, 2061,   64, 2069, 2061, 2069, 2061, 2069,
        0, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061
    } ;

static const flex_int16_t yy_nxt[6829] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,    8,   14,   15,
       16,   17,   18,   19,    8,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   32,   32,   32,   45,   46,   32,   48,   49,   48,
       48,   49,   48,  163,  137,   50,   50,  184,   50,   50,
      138,  185,   50,  164,  139,   50,   51,   52,   53,   52,
       54,   55,   56,   51,   57,   15,   16,   58,   59,   60,
       51,   61,   21,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   72,   73,   74,   75,   76,   77,

       78,   79,   80,   81,   82,   83,   84,   72,   72,   72,
       85,   86,   72,   87,   87,   87,   87,   87,   87,   97,
       98,  100,  127,  113,  130,  101,  128,  114,   99,  306,
      161,  131,  371,  117,  372,  129,  115,  132,  102,  116,
      103,  104,  162,  118,  105, 1538,  307,  119,  106,  120,
      318,  309,  107,  121,  319,  108,  109,  110,  111,  310,
      122,  112,  123,  133,  140,  388,  124,  389,  141,  146,
      134,  135,  125,  147,  347,  126,  136,  149,  142,  143,
      348,  150,  144,  148,  155,  145,  323,  324,  156,  151,
      180,  152,  157,  351,  153,  181,  154,  182,  158,  352,

      183,  159,  176,  186,  160,  165,  177,  166, 1539,  167,
      187,  188,  168,  169,  178,  356,  170,  189,  357,  179,
      367,  171,  368,  381,  172,  173,  369,  174,  382,  175,
      193,  193,  193,  193,  194,  193,  196,  196,  196,  196,
      197,  196,  195,  720,  195,   88,  195,  198,  206,  320,
      195,  379,  223,  321,  195,  721,  224,  206,  206,  195,
      227,  206,  237,  322,  384,  225,  238,  206,  226,  380,
      228,   87,   87,   87,  229,  239,  230,  206,  422,  385,
      231,  425,  427,  423,  206,  426,  195,  195,  206,  195,
       91,  195,  206,  256,  232,  202,  233,  257, 1540,  195,

      234,  206,  428,  206,  195,  360,  235,  258,  361,  236,
      206,  206,  206,  393,  406,  418,  206,  240,  362,  363,
      206,  364,  430,  394,  241,  407, 1541,  432,  431,  419,
      242,  195,  195,  206,  195,  206,  195,  195,  195,  195,
      195,  413,  433,  195,  195,  195,  195,  195,  206,  195,
     1542,  414,  206,  410,  206,  265,  247, 1543,  273,  266,
      411,  412,  248,  267, 1544,  206,  249,  206,  274,  268,
      314,  206,  269,  206,  206,  270,  195,  195,  195,  315,
      195,  316,  195,  195,  195,  195,  195,  317,  437,  195,
      195,  195,  206,  608,  609,  195,  206,  438,  207,  208,

      271,  286,  294, 1546,  655,  287,  295,  209,  656,  206,
     1547,  206,  272,  288,  193,  193,  193,  612,  289,  206,
      206,  206,  195,  195,  195,  613,  195,  670,  195,  195,
      195,  195,  195,  956,  957,  195,  195,  195,  193,  194,
      193,  195,  210,  206, 1548,  671,  211,  206,  341,  676,
      290,  626,  342,  677,  627,  291,  343,  292, 1551,  212,
      293,  213,  206,  344,  196,  196,  196,  345,  195,  195,
      214,  885,  642,  215,  206,  886,  643,  216,  196,  197,
      196,  217,  644, 1552,  218,  219,  220,  221,  891,  206,
      222,  206,  303,  447,  303,  206,  243,  634,  634,  634,

      303,  303,  206,  244,  245,  892,  206,  303,  206,  246,
      206,  250,  980,  685,  728,  251,  981,  729, 1553,  206,
      686,  206, 1554,  687,  870,  252,  253,  871,  206,  254,
      206,  888,  255,  206,  259,  889, 1208,  206,  260,  890,
      206,  992,  449,  993,  206, 1555,  261, 1556,  262, 1557,
      206,  263,  206,  264,  275, 1209,  276,  206,  277,  450,
      728,  278,  279,  729,  870,  280, 1194,  871,  206, 1219,
      281,  206,  206,  282,  283,  296,  284, 1558,  285,  206,
     1559, 1195,  297,  298, 1421,  206, 1220,  206, 1560,  299,
     1378, 1561,  206, 1562,  206,  195, 1422,  195, 1563,  195,

      195,  195,  195,  195, 1564,  688,  195,  195,  195,  195,
      195,  329,  195,  330,  206,  206,  331,  451,  206,  206,
      689,  690,  332,  698,  698,  698,  452, 1545, 1333,  333,
      334,  206,  206,  206,  453,  634,  634,  634, 1565,  195,
      195,  195,  398, 1566,  699, 1334, 1227,  399,  400, 1228,
      401, 1567, 1568,  402,  206, 1569,  454,  403,  206, 1570,
      404, 1229, 1571,  405,  195, 1572,  195,   88,  195,  198,
      914,  206,  195,  206,  206,  206,  195, 1573,  206,  206,
      455,  195, 1574,  456,  206,  206,  457, 1575,  206,  206,
     1576,  206,  206,  206,  206,  458, 1577,  459, 1447, 1447,

     1447,  206,  206,  460,  206,  698,  698,  698,  195,  195,
     1578,  195, 1579,  195,  195,  195,  195,  195, 1580, 1581,
      195,  195,  195,  195,  195,  461,  195, 1582, 1583,  462,
      206,  463, 1584,  469,  206,  464, 1585, 1586, 1549, 1549,
     1549,  968,  206, 1587,  206,  465, 1588,  206,  206,  206,
      206, 1589,  206,  195,  195,  195,  206,  195,   91,  195,
     1590, 1591,  206,  202,  466,  467,  206,  195, 1592,  206,
      206,  206,  195,  206,  470, 1593,  206,  206, 1594,  206,
      206,  206,  468, 1550,  206, 1597, 1598,  206,  206,  206,
      471, 1613,  206,  206,  478,  206, 1636, 1640,  479,  195,

      195,  206,  195,  206,  195,  195,  195,  195,  195, 1641,
     1660,  195,  195,  195,  195,  206,  206,  195, 1661,  206,
      206,  206,  206, 1662,  481,  206,  206,  480, 1663, 1664,
     1665, 1666,  206,  206,  206,  206, 1667, 1668,  206,  483,
      206,  206,  482,  206,  195,  195,  472,  206,  473, 1672,
      206,  474,  206,  634,  776,  634,  206,  475, 1674, 1675,
      206, 1673,  206,  206,  476,  477,  484, 1676, 1677,  206,
      485,  206,  206,  206,  486, 1678,  206,  206,  206, 1679,
     1680,  487,  206,  206,  490,  488, 1681, 1682, 1047,  206,
      491,  489,  206, 1683,  206,  492, 1684,  206,  206,  206,

      206, 1685, 1686,  206,  206,  497,  498, 1687,  493,  206,
      206,  206,  494,  206, 1688, 1689,  206,  206,  495,  206,
     1690,  496,  206,  206,  206,  206,  206, 1691, 1692,  206,
      206, 1693,  206,  206, 1694,  206,  206, 1695, 1696,  206,
      501, 1697, 1698,  206,  499,  206,  206,  500,  206,  206,
      502,  206,  206, 1699,  206,  206, 1700, 1701, 1702,  206,
      503,  206, 1703,  504,  206,  206, 1704, 1705,  206,  698,
      840,  698,  206,  505,  506,  508,  507, 1719,  206, 1734,
      206,  206,  509,  206,  510,  206,  511, 1737,  206,  206,
      512,  206,  206, 1738, 1749,  206,  206, 1750, 1751, 1752,

     1753,  206,  206,  206,  206, 1101,  513, 1754,  206,  514,
      206,  515,  206,  206, 1755,  516,  206,  206,  206, 1756,
      518, 1757,  206,  206,  517, 1758, 1759,  206, 1760,  206,
      206,  206,  206, 1761,  519,  206, 1762,  206, 1763,  206,
      206, 1764,  206,  206,  206,  206, 1765, 1766,  206,  524,
     1767,  520, 1768,  522,  525, 1769,  206,  206,  206, 1770,
     1771,  206,  206,  206,  206, 1772, 1773,  521, 1774,  206,
      206,  523,  206,  206,  526,  206,  206, 1775, 1776,  206,
      527,  206, 1777, 1778, 1779,  206,  206,  206,  206,  529,
     1780,  206,  206,  206,  206,  528, 1781,  206,  206, 1782,

      206,  206, 1783,  206,  206, 1784,  530,  206,  206,  206,
     1785,  534,  206,  206,  531,  206,  532, 1786, 1795,  536,
      533, 1796,  206, 1797,  535,  206,  206,  206,  206,  537,
     1800,  206,  206, 1811,  206,  206,  206,  206, 1813,  539,
      206,  206, 1820, 1821, 1822,  540, 1823,  206,  538, 1824,
      206,  206, 1825,  206,  206,  206,  206,  541,  549, 1826,
     1827,  206,  542,  543,  206,  544,  206,  206,  545,  550,
     1828,  206,  546,  206,  206,  547,  206,  206,  548, 1829,
      552, 1830, 1831,  206,  206, 1832,  206,  206,  551,  206,
      206, 1833,  206,  556,  553,  206, 1834, 1835, 1836,  559,

      206,  554,  555,  557, 1837,  206,  206, 1838,  206,  206,
     1839,  558,  206, 1840,  206,  206,  561, 1841, 1842,  206,
      206,  206,  206, 1843,  206,  206,  560,  206,  563,  564,
      562,  206,  206,  206,  206,  206, 1844,  206,  206, 1845,
      206,  206, 1846, 1847,  206, 1848,  206,  206,  567, 1849,
      565,  206, 1856, 1857,  206,  566,  206,  206,  206, 1858,
     1861,  206,  206,  570,  206, 1868,  206,  206,  206, 1870,
      568,  572,  206, 1875,  569,  206,  206,  206, 1876, 1877,
      206, 1878,  206,  571,  206,  206, 1879,  206,  206,  206,
     1880, 1881,  575,  206,  206,  573, 1882, 1884,  206, 1885,

      206,  574,  577,  206,  206,  206,  206,  576,  206,  206,
      206,  206, 1886,  206,  206, 1887,  578,  579,  580,  206,
     1888,  206,  206, 1889,  206,  206,  206,  581, 1890,  206,
      206,  206, 1891, 1892,  582,  206, 1893, 1894,  206, 1895,
      583, 1896, 1897,  206, 1898,  206, 1904, 1908,  584, 1913,
      206,  195, 1915,  195, 1919,  195,  195,  195,  195,  195,
     1920, 1921,  195,  195,  195,  586, 1922, 1923,  195,  303,
      447,  303,  206, 1883, 1883, 1883,  206,  303,  303, 1883,
     1905, 1883,  206, 1924,  303, 1925,  206, 1926, 1928,  206,
      733,  206,  732, 1929, 1930,  195,  195,  195,  195,  206,

      195,  206,  195,  195,  730,  195,  195, 1931,  206,  195,
      195,  195,  206,  206,  206,  195, 1932,  206,  734,  206,
      206, 1933, 1934,  206,  206,  206, 1935,  206,  736,  735,
      206,  206,  206,  206, 1936, 1937,  206,  206,  206,  206,
     1938, 1939,  195,  195,  195, 1945,  195, 1949,  195,  195,
      195,  195,  195, 1953, 1957,  195,  195,  195,  195,  206,
      206,  195, 1958,  737,  206, 1959,  206,  738,  740, 1960,
      206, 1961, 1962, 1963, 1964, 1965,  206,  206,  206,  206,
      206, 1966, 1967,  206,  206,  206,  741, 1968,  195,  195,
      206,  739, 1969, 1970,  206, 1971, 1972,  206,  206,  206,

      206, 1976,  743,  206,  206,  206,  206,  742, 1977, 1980,
      206,  206,  745,  206, 1982, 1985,  206,  206,  206,  206,
     1986, 1987,  206,  206,  744,  206,  206, 1988, 1989,  206,
      206,  206, 1990, 1991, 1992,  206,  746,  206,  747, 1993,
      206, 1994, 1995,  206,  206,  206,  206,  206, 1997, 2000,
      206,  206,  749, 2003, 2004, 2005,  206,  206,  206,  748,
     2006, 2007,  206,  206,  206,  206,  206, 2008,  206,  206,
     2009,  206,  206, 2010, 2013,  750,  751,  206,  206,  752,
     2014, 2015,  206, 2016,  754,  206, 2018,  206,  206,  753,
      206, 2019,  755, 2022,  756,  206,  206,  206,  757, 2023,

      206,  206,  758,  206, 2024, 2026,  206,  206,  206,  206,
     2029, 2030,  206,  206,  206,  206, 2032, 2033,  206,  206,
      206,  206, 2034,  759,  206,  206,  206,  206, 2036,  760,
      206,  206,  206,  206, 2037,  761,  206,  206,  206,  206,
     2038, 2040,  206,  206,  206,  762, 2041, 2042,  206,  206,
      206,  206,  764,  763,  206,  206,  765,  206,  206, 2044,
      766,  206,  206,  206, 2017, 2017, 2017,  206,  206,  767,
     2045, 2046,  206, 2048,  206,  206, 2049,  206,  206,  768,
     2050, 2052,  769, 2053,  206,  206,  771,  206,  206, 2054,
      206,  770, 2056,  206,  772,  206, 2057, 2058,  206,  206,

     2059,  206,  206,  206,  206, 2060,  191,  206,  206,  206,
     1537, 1514,  206,  773,  206,  206,  774,  206,  206, 1513,
     1475,  206,  775,  206,  634,  776,  634,  206, 1451, 1450,
      206,  777, 1449, 1448,  206,  206,  206,  206, 1446, 1445,
      206,  206, 1444,  778,  206,  206,  206,  206,  206,  206,
     1443, 1442,  206,  206,  779,  206, 1441,  206,  206, 1440,
      206,  781,  971,  972,  973,  206,  206,  780,  974,  782,
      206, 1439, 1438,  206,  206,  975,  206,  206,  976,  977,
      206, 1437, 1436,  206,  784,  206, 1435,  783,  785,  206,
      206, 1434,  206,  206,  786, 1433,  206,  206, 1432,  206,

      788,  206, 1883, 1883, 1883,  789,  206,  206,  787, 1431,
      206,  206, 1430,  206,  206,  206, 1429, 1428,  206, 1427,
      206,  790, 1426, 1425,  206, 1424,  206,  206,  206,  206,
     1423,  206,  206, 1927,  793,  206,  206,  206,  791, 1420,
      206,  206, 1883, 1905, 1883,  206,  794,  792,  206, 1419,
      206, 1418, 1417,  206,  206,  206,  206,  206,  206, 1416,
     1415,  206,  206,  796,  795, 1414, 1413,  206, 2017, 2021,
     2017, 1412, 1411, 1946,  206,  206,  206,  206, 1410,  206,
      206, 1409,  206,  797,  206,  206, 1408,  798,  206,  206,
     1407,  206, 1406, 1405,  800,  206,  206, 1404,  206,  799,

     1403,  206,  206,  206,  206,  801, 1402,  206,  206, 1401,
      206,  802,  206,  206, 1400, 1399,  206,  206,  206,  206,
     1398, 1397,  206,  206,  206, 1396,  206, 1395, 1394,  206,
      206,  803,  206,  804,  805,  206,  206,  206,  206, 1393,
      206,  206, 1392,  806,  807,  206, 1391,  206,  206, 1390,
     1389,  206,  206, 1388, 1387,  809, 1386,  206,  206,  206,
      206,  808, 1385, 1384,  206,  206,  206,  206,  206,  206,
     1383, 1382,  206,  206,  811,  812, 1381, 1380,  206,  206,
      810, 1379,  206, 1378, 1377,  206,  206,  206,  206, 1376,
     1375, 1374,  206,  813,  206,  206,  206,  814, 1373,  206,

      206, 1372,  206,  206, 1371, 1370,  206, 1369,  206, 2017,
     2017, 2017,  206,  206, 1368,  815,  206, 1367,  206,  206,
     1366,  206,  816,  817,  206,  206,  818,  206,  206,  206,
      819, 1137,  206,  206, 1283,  820,  206, 1004,  206, 1251,
     1250,  206,  821,  206, 2025, 1249,  206, 1248,  206,  206,
      206,  206, 1247,  822,  206,  206,  206,  206, 1246,  206,
      206, 1245,  206,  206, 1244, 1243,  206,  206, 1242,  206,
      824, 1241,  825,  823, 1240,  206,  206, 1239,  206,  206,
      206,  206, 1238, 1237,  826, 1236, 1235,  206,  206, 1234,
     1233,  827,  830, 2017, 2021, 2017,  206,  206,  828,  206,

      206,  829, 1232, 1231,  206,  206,  206,  831,  832, 1230,
      833, 1226,  206,  206, 1225,  206,  206,  206, 1224, 1223,
      206,  206, 1222,  834,  836, 1221,  206, 1218, 2028,  206,
      837,  206, 1217, 1216,  206,  835,  206,  206,  206,  206,
     1215, 1214,  838,  206,  206,  206, 1213, 1212,  206,  698,
      840,  698, 1211, 1210,  206,  206, 1207,  206,  206, 1206,
      206,  206,  839,  206,  206,  842,  206, 1205, 1204, 1203,
      841,  206, 1202,  206,  206, 1201, 1200,  206,  206,  206,
      206, 1199,  843,  206,  845,  206,  206,  844, 1198, 1197,
      206,  206,  206,  206, 1196, 1193,  206,  206,  206,  206,

     1192, 1191,  206,  206,  206,  206, 1190, 1189,  848,  206,
      206,  846, 1188, 1187,  206,  847,  206,  206, 1186, 1185,
      206,  206,  206,  206, 1184, 1183,  206,  206, 1182,  849,
     1181, 1180,  206,  206, 1179,  850,  206, 1178,  853,  206,
     1177,  851,  206,  852,  206, 1176, 1175, 1174,  206,  206,
     1173,  206, 1172, 1171,  206,  206,  854,  206,  206, 1170,
     1169,  206,  206,  206, 1168,  206,  206,  855, 1167,  206,
     1166,  206,  206,  206, 1165,  856,  206, 1164, 1163,  206,
     1162,  206,  206,  206,  206, 1161,  857,  858,  859,  206,
     1160,  206,  206,  206, 1159, 1158, 1157,  860, 1156, 1155,

      206, 1154,  206, 1153,  206,  206, 1152,  206,  206, 1151,
      206,  206,  206, 1150, 1149,  206,  206,  861, 1148,  862,
      206,  206,  206,  206, 1147,  206,  206, 1146,  206,  206,
      206,  863,  206,  206,  864,  206,  206, 1145,  866,  206,
     1144,  865,  206,  867,  206, 1143,  206, 1142, 1141,  206,
      206,  206,  206,  868, 1140, 1139,  206, 1138, 1137, 1005,
     1004, 1003,  869,  206, 1002,  206, 1447, 1447, 1447,  206,
     1001,  206,  195, 1000,  195,  999,  195,  195,  195,  195,
      195,  998,  997,  195,  195,  195,  586,  206,  206,  195,
     1595,  206,  206,  206,  206,  996,  995,  206,  206, 1006,

      994, 1596,  991,  990,  206,  206,  206,  206,  989, 1007,
     1008,  206,  206,  206, 1009,  988,  195,  195,  195,  195,
      987,  195,  986,  195,  195,  730,  195,  195,  985,  206,
      195,  195,  195,  206,  206,  984,  195,  206,  206, 1011,
      206, 1012, 1010,  206,  206,  983,  206, 1013,  206,  982,
      979,  206,  978,  206,  206,  970,  206,  206,  969,  206,
      206,  206,  206,  195,  195,  206,  206,  206,  967,  966,
      206,  206, 1014, 1015,  965,  206, 1016,  964,  206,  206,
      206,  963,  962,  206,  206,  206,  206,  206,  961,  960,
      959,  206,  206, 1017,  206,  206,  958,  955, 1024, 1020,

     1018, 1021,  206,  954, 1019, 1022,  206,  206,  953, 1023,
      952,  206,  206,  951,  206, 1025,  950,  206,  206,  206,
      206,  949,  948, 1027,  206,  206, 1026,  947,  946,  206,
      206, 1030,  945,  944,  206,  206,  206,  943,  206, 1028,
      942, 1029,  206,  941,  206,  940,  939,  206,  206,  206,
      206,  206,  938,  937,  936,  206,  206,  206,  935,  934,
      206,  206,  206,  933,  932,  931,  206,  930,  206, 1032,
      206, 1031,  929,  206,  206,  206, 1033,  928,  206, 1034,
      927,  206,  206,  206,  206,  926, 1035,  206,  206,  206,
      925,  924,  206,  206, 1036,  206,  206,  206,  923,  922,

      206,  206,  206,  206,  921,  920,  206,  919,  206,  206,
     1037,  206,  918,  206,  206,  917,  206,  206,  916,  206,
      206,  915,  913,  206,  206,  912,  911,  206,  206,  206,
     1038, 1039,  206,  206,  910,  206,  206,  909,  206, 1040,
     1041,  206,  908,  206,  206,  206, 1043,  907,  906,  206,
      206,  206,  206,  905,  904,  206,  206,  206, 1044,  206,
      903,  902, 1042,  206,  206,  206,  901,  900,  206,  206,
      206,  206,  206,  206,  899,  898,  206,  206,  206,  206,
      897,  896,  206,  206,  206,  895,  894,  893,  206,  206,
      206, 1045,  206,  887,  884, 1046,  206,  206,  206,  883,

      206,  206,  882, 1048, 1049,  206,  206,  881,  880,  206,
      206,  206,  206,  879,  878,  206,  206,  206,  877,  206,
     1050,  876,  206,  206,  206,  206,  875,  874,  206, 1051,
      206,  206,  206,  206,  873,  588,  206,  206,  206,  206,
      872,  443,  206,  206, 1053,  727,  726, 1054,  725, 1052,
      206,  206,  206,  724,  723,  206,  206,  206,  206,  206,
      206,  722,  719,  206,  206,  206,  718,  717,  206,  206,
      716,  715,  206,  714,  713, 1057, 1055, 1056,  206,  206,
     1058,  712,  206,  711,  206,  206,  206,  206,  710,  206,
      206,  709,  206,  206,  708,  707,  206,  706,  206,  705,

     1060,  704, 1061,  206,  703,  206,  206,  702,  206,  206,
      701,  206,  700,  697, 1059,  206,  206,  206,  696, 1062,
      206,  206,  206,  695,  694,  206,  206, 1063,  206,  693,
     1064,  692,  206,  206,  691,  206,  684,  683,  206,  206,
      206,  206,  206,  682,  681,  206,  206,  206,  206,  206,
      680,  679,  206,  206, 1065,  678,  206,  675,  674,  206,
      206,  206,  673,  672,  669,  206,  206,  206, 1066,  668,
      206,  667,  666,  206,  206,  206,  206,  206,  665,  664,
      206,  206,  206,  663, 1069,  662,  206,  206, 1068, 1067,
      661,  660,  659,  206,  206,  206,  206,  658,  206,  206,

      657,  206,  206,  206,  206,  654,  653,  206,  206,  652,
      651,  650,  649,  648,  647,  206,  646,  206, 1070,  645,
      206,  206,  206,  206,  206,  206,  641,  640,  206,  206,
      206,  206, 1071,  639, 1073, 1074, 1075, 1072,  638,  637,
      206,  206,  206,  206,  206,  636,  635,  206,  206,  206,
      206,  633,  206,  206,  632,  206,  206, 1077,  206,  631,
      630,  206, 1078, 1076,  206,  629,  628,  625,  206,  206,
      624,  206,  623,  622,  206,  206,  206,  206,  206,  621,
      620, 1079, 1080,  206,  206,  619,  618,  206,  206,  617,
      206,  206,  616,  615, 1083,  206,  206,  206,  614,  611,

      206,  206, 1081,  206,  206, 1082,  206,  206,  206,  206,
      610,  607,  206,  206, 1084,  206, 1085, 1086, 1087,  606,
      605,  206,  206,  604,  206,  206,  603,  206,  206,  206,
      602,  601, 1088,  206,  206,  206,  206,  206,  206,  600,
      599,  206,  206,  206,  598,  206, 1089, 1090,  206,  206,
      206,  597,  596,  595,  206,  206,  206, 1091,  594, 1092,
      206, 1093,  206,  593,  206,  592, 1094,  206,  591,  206,
      206, 1095,  590,  206,  206,  206,  206,  206,  304,  588,
     1096,  206,  585,  204,  443,  442,  206,  206,  441,  206,
      206,  440, 1097,  206,  206,  206,  206,  206, 1098, 1099,

      206,  206,  439,  206,  206,  206, 1111,  206, 1100,  436,
      206,  206,  435,  434,  206,  429,  206,  206,  206,  206,
     1102,  424,  206,  206,  206,  206,  206,  421,  206, 1103,
      420,  417,  206,  416,  415,  206,  409,  206,  206,  408,
     1104, 1105, 1106, 1112,  206,  206, 1107,  206, 1113,  397,
      206,  396, 1114, 1108, 1115,  206, 1109, 1110,  206,  395,
      392,  206,  206,  206,  206,  391, 1117,  206,  206,  206,
     1118,  390,  387,  386,  206, 1116,  206,  206,  383,  378,
     1119,  206,  206,  206,  377,  376, 1120,  206,  375,  206,
      206,  374,  373,  206,  206,  206,  206,  370,  366,  206,

      206,  206,  206, 1121, 1122,  365,  206,  206,  206,  206,
     1124,  359,  206,  206, 1125,  206, 1126,  358,  206,  206,
     1123,  206,  206,  355,  354,  206,  206,  206, 1127,  353,
      206,  206,  350,  206,  206,  349,  206,  346,  340,  206,
      206,  206,  206,  339,  338,  337,  206,  206, 1130, 1128,
      336,  335,  328, 1129,  206,  206,  327, 1131,  206,  206,
      206,  206,  326,  206, 1132,  325,  206,  206,  313,  312,
      206,  206,  206,  206, 1133,  311, 1135,  206,  308,  206,
      206,   94,  206,  206,  206,  206,  304,   92,  206,  206,
      206,  206, 1134,  206,  206,   89,  206,  206,   89,  300,

      206,  206,  206,  206, 1136,  204, 1253,  206,  203,  206,
      206,  200,  206,  206,  206,  206, 1252,  190,  206,  206,
      206,  206,   94,  206,  206,   93,  206,  206,   92,   90,
      206,  206,  206,  206,   89, 1254,  206,  206, 2061,  206,
      206, 2061,  206,  206,  206,  206, 2061, 2061,  206,  206,
      206,  206, 2061,  206,  206, 1255,  206, 1257, 2061, 2061,
      206,  206,  206,  206, 1256, 2061,  206,  206, 2061,  206,
      206, 2061,  206,  206,  206,  206, 2061, 1258,  206,  206,
      206,  206, 2061,  206,  206, 2061, 2061,  206,  206, 2061,
     2061,  206,  206,  206, 1259, 2061, 2061,  206, 2061,  206,

      206, 1260,  206, 2061,  206,  206, 2061,  206,  206,  206,
      206, 2061, 2061,  206,  206,  206,  206, 1261, 1263, 1265,
      206,  206, 2061,  206, 2061, 2061,  206,  206, 1262,  206,
     1264, 2061,  206,  206,  206,  206,  206,  206, 2061, 2061,
      206,  206,  206,  206, 2061, 2061,  206,  206, 2061, 1266,
     2061, 2061, 2061,  206, 1267,  206,  206, 1268, 2061, 1269,
      206,  206,  206,  206,  206, 2061, 2061,  206, 1271,  206,
     2061, 2061, 2061, 1272, 1270, 2061, 2061, 2061, 2061, 2061,
      206,  206,  206,  206, 2061,  206,  206, 2061,  206,  206,
      206, 1275, 2061, 1273,  206,  206,  206, 2061, 2061,  206,

      206, 1274,  206,  206,  206, 2061, 2061,  206,  206,  206,
      206, 2061, 2061, 1276, 2061,  206,  206,  206,  206, 2061,
      206,  206, 2061,  206,  206, 2061,  206,  206, 1277, 2061,
      206, 1279, 2061, 2061,  206, 2061,  206,  206, 2061, 1278,
      206, 2061,  206,  206,  206, 1280, 1281,  206,  206, 2061,
      206,  206, 2061, 1282,  206, 2061,  206,  206, 2061, 2061,
      206,  206, 2061,  206,  206, 2061,  206,  206, 2061,  206,
      206, 2061,  206,  206,  206,  206, 2061,  206,  206, 2061,
      206,  206, 2061,  206,  206, 2061,  206,  206, 2061, 2061,
     1287,  206, 2061,  206, 1284, 2061,  206,  206, 2061, 1285,

      206, 2061,  206,  206, 1288,  206, 2061, 2061,  206,  206,
     2061, 1286,  206,  206, 2061,  206,  206, 2061, 1292, 1291,
     2061,  206,  206,  206, 2061, 1290,  206, 2061, 1289,  206,
     2061,  206,  206, 2061,  206,  206,  206,  206, 1293,  206,
      206, 2061,  206,  206, 2061, 1295,  206, 2061, 2061,  206,
      206, 2061, 1294,  206,  206,  206,  206, 2061,  206,  206,
     2061,  206,  206, 2061,  206, 2061,  206,  206, 2061,  206,
      206,  206,  206, 2061, 1296,  206,  206, 2061,  206, 2061,
     2061, 2061,  206,  206, 2061,  206, 2061, 2061,  206,  206,
      206,  206, 1298, 2061,  206,  206, 1297,  206,  206,  206,

     2061, 2061,  206,  206, 2061, 2061,  206, 2061,  206, 2061,
     2061,  206,  206,  206, 2061, 1300,  206, 2061, 1299,  206,
      206,  206, 2061, 2061,  206,  206, 1302,  206,  206,  206,
     2061, 1301,  206,  206,  206, 1305, 2061,  206,  206,  206,
     1306, 2061, 2061, 2061,  206, 1303, 1304,  206,  206, 2061,
      206,  206, 2061,  206,  206, 2061, 2061,  206,  206,  206,
     2061, 1308,  206, 2061,  206, 2061, 2061, 1307, 1310,  206,
      206, 2061, 2061, 1311,  206,  206, 1309,  206,  206, 2061,
     1312,  206,  206,  206,  206, 2061, 2061,  206,  206,  206,
      206, 2061, 2061, 2061,  206,  206, 2061,  206,  206, 2061,

     1313,  206,  206,  206, 2061, 2061,  206,  206, 1314,  206,
      206, 2061,  206, 2061, 2061,  206,  206, 1315,  206, 2061,
     2061, 2061,  206,  206,  206, 1316, 1319, 2061,  206,  206,
     1317,  206,  206, 2061, 2061,  206,  206, 1318,  206, 2061,
     2061,  206,  206,  206, 2061, 2061, 1321, 2061,  206,  206,
     1322, 1320,  206, 2061,  206,  206, 2061,  206,  206,  206,
      206, 2061, 2061,  206, 1326,  206, 1327,  206, 2061, 1323,
      206, 1324, 2061,  206, 2061, 2061,  206,  206, 1325,  206,
      206, 2061, 2061,  206,  206,  206,  206, 1330, 2061, 2061,
      206,  206,  206, 2061, 2061, 2061,  206,  206,  206, 1328,

     1329, 2061,  206,  206,  206,  206,  206, 2061, 2061,  206,
      206, 1331, 1332, 2061,  206,  206,  206,  206, 2061, 2061,
      206,  206,  206, 2061, 1337,  206,  206,  206, 2061,  206,
      206, 1335, 2061,  206,  206,  206, 1336, 2061,  206,  206,
      206,  206,  206, 1338, 2061, 2061,  206,  206, 2061,  206,
     2061, 2061,  206,  206, 2061, 1339,  206, 1341,  206,  206,
     1342,  206,  206, 1340,  206, 1447, 1532, 1447,  206,  206,
      206,  206, 1343, 2061,  206, 1344, 2061,  206,  206, 2061,
      206,  206, 2061,  206,  206, 1345,  206, 2061, 2061, 1656,
      206,  206, 1346,  206,  206, 2061, 2061,  206,  206,  206,

     1657, 2061,  206,  206, 1347,  206,  206, 2061,  206, 2061,
     2061,  206,  206,  206,  206, 1349, 2061, 2061,  206, 1348,
     2061,  206,  206, 2061, 2061,  206,  206,  206,  206, 2061,
     2061,  206,  206,  206, 1351, 2061,  206, 1350, 2061,  206,
      206,  206, 2061, 2061,  206,  206, 2061,  206,  206, 2061,
     2061, 2061, 2061,  206,  206, 1352, 2061, 1353,  206, 1354,
     1355,  206, 2061,  206,  206,  206,  206, 2061, 1356,  206,
      206,  206, 2061,  206,  206, 2061, 1357,  206, 1359,  206,
     2061, 2061,  206,  206,  206,  206,  206, 2061, 2061, 2061,
      206,  206,  206,  206, 1358,  206,  206, 2061, 1361,  206,

     2061, 2061,  206,  206,  206,  206, 2061, 2061,  206,  206,
     2061, 1360,  206, 2061,  206,  206,  206,  206, 2061, 2061,
      206,  206, 1362,  206,  206,  206, 2061, 2061,  206,  206,
     1363, 2061,  206,  206, 2061,  206,  206, 1364, 2061, 2061,
     2061,  206,  206,  206,  206, 2061,  206, 2061, 2061,  206,
      206,  206, 1365, 2061,  206,  206, 2061, 1452,  206,  206,
      206, 2061, 2061,  206,  206,  206,  206, 2061, 2061, 2061,
      206,  206,  206,  206,  206, 2061,  206,  206, 1453,  206,
      206, 2061, 1454,  206,  206,  206, 1455,  206,  206, 2061,
     2061,  206, 1456,  206,  206,  206, 2061, 1458,  206, 2061,

     2061,  206, 1457,  206,  206,  206,  206, 2061,  206,  206,
     2061,  206,  206,  206,  206,  206, 1462, 2061,  206,  206,
     2061, 1378,  206, 2061, 1459,  206,  206,  206, 1460, 2061,
      206,  206,  206,  206,  206,  206,  206, 1461, 2061,  206,
      206, 2061,  206,  206, 1464,  206,  206,  206, 2061, 2061,
     2061, 1465,  206,  206, 1463,  206,  206, 2061, 2061,  206,
      206,  206, 2061,  206,  206, 2061,  206,  206,  206, 2061,
     1467, 2061,  206,  206, 2061, 1466, 2061,  206, 1468, 2061,
      206,  206,  206, 2061,  206,  206, 2061,  206,  206,  206,
     2061, 2061, 2061,  206,  206,  206,  206, 2061,  206,  206,

     2061,  206, 1470,  206, 2061,  206,  206, 2061,  206, 1471,
     2061, 2061,  206, 1469,  206,  206,  206,  206, 2061,  206,
      206, 2061,  206,  206,  206, 2061,  206,  206, 2061, 1472,
      206,  206, 2061,  206, 2061,  206,  206,  206,  206, 2061,
     2061,  206, 2061,  206,  206, 1473, 1474,  206,  206, 2061,
     1477,  206,  206,  206,  206, 2061,  206,  206,  206,  206,
     2061, 1476,  206,  206,  206,  206,  206,  206, 2061, 1478,
      206, 2061,  206, 2061, 2061,  206,  206,  206,  206, 1479,
      206, 2061, 2061,  206,  206,  206, 2061, 2061, 2061,  206,
     2061,  206, 2061, 2061, 2061,  206,  206,  206,  206,  206,

     1480, 2061,  206,  206,  206, 1481, 2061,  206,  206, 1482,
      206,  206, 2061, 2061,  206,  206, 2061, 2061,  206,  206,
      206, 2061,  206,  206, 2061,  206, 2061, 2061,  206,  206,
     1483,  206, 1484,  206, 1485,  206,  206, 2061,  206,  206,
     2061,  206,  206, 2061,  206,  206,  206,  206, 1486, 2061,
     1488,  206,  206, 2061,  206, 2061, 2061,  206,  206, 1487,
      206,  206, 1489,  206,  206,  206,  206,  206,  206, 2061,
     2061,  206,  206,  206,  206, 2061,  206,  206,  206, 1491,
     1490, 2061, 1493, 2061,  206,  206,  206,  206, 2061,  206,
      206, 2061, 1492,  206,  206,  206, 2061,  206,  206,  206,

     2061, 2061, 2061,  206, 2061, 2061,  206, 2061,  206, 1494,
     1497,  206, 1495,  206,  206,  206,  206, 1496,  206, 1498,
      206,  206, 2061, 2061,  206,  206,  206,  206, 1500,  206,
     1501, 1499,  206, 2061,  206, 2061, 2061,  206,  206,  206,
      206, 2061,  206,  206, 2061,  206,  206,  206,  206, 2061,
     1502, 1503,  206, 1504,  206, 2061, 2061,  206,  206,  206,
     2061,  206, 2061, 2061,  206,  206,  206,  206, 2061, 2061,
      206,  206,  206,  206,  206,  206, 2061, 2061,  206,  206,
      206,  206, 2061, 2061,  206, 1509,  206, 2061, 1508, 1506,
      206,  206,  206, 1505,  206, 2061, 2061,  206,  206,  206,

      206, 1507,  206,  206, 2061,  206,  206,  206,  206, 1510,
     2061,  206,  206,  206,  206, 2061, 2061,  206,  206,  206,
     2061,  206, 1511, 2061,  206,  206,  206,  206, 2061, 2061,
      206,  206,  206,  206,  206,  206, 2061, 2061,  206,  206,
      206, 2061, 2061,  206,  206, 2061, 2061,  206, 1512, 2061,
     2061,  206,  206,  206,  206, 2061, 1515,  206, 2061,  206,
      206,  206,  206, 2061,  206,  206, 2061, 2061,  206,  206,
     2061, 2061, 1516,  206, 1518, 1519, 2061, 2061,  206,  206,
      206,  206, 2061,  206, 2061, 1517,  206,  206,  206, 2061,
     2061,  206,  206, 1521,  206, 2061, 1522,  206, 2061, 1523,

      206, 2061, 2061,  206,  206,  206, 1520, 2061, 2061,  206,
      206, 2061,  206,  206, 2061,  206,  206,  206,  206, 2061,
     2061, 1524,  206,  206,  206, 2061, 2061,  206,  206,  206,
     1527, 2061,  206,  206,  206,  206,  206, 2061, 2061,  206,
      206, 2061, 1525, 1526, 2061,  206,  206,  206,  206,  206,
     2061, 2061,  206,  206,  206,  206, 1528, 2061, 2061,  206,
      206, 2061, 2061,  206, 2061, 2061,  206,  206,  206, 2061,
     2061, 2061,  206,  206,  206,  206, 2061, 1529, 2061,  206,
      206, 2061,  206,  206,  206,  206, 2061, 2061,  206,  206,
      206, 2061, 2061, 2061,  206, 2061,  206, 2061, 1530, 2061,

     2061,  206,  206,  206,  206, 2061, 2061,  206, 1531,  206,
     1447, 1532, 1447,  206, 2061, 2061,  206,  206, 2061,  206,
      206, 2061, 2061,  206,  206, 2061, 2061,  206,  206, 2061,
      206,  206,  206,  206, 2061, 1533,  206, 1534,  206, 2061,
     2061,  206, 2061,  206,  206,  206,  206, 2061,  206,  206,
     2061, 1535,  206, 1599,  206, 2061, 2061,  206,  206,  206,
     2061, 2061,  206,  206,  206,  206, 2061, 1536, 2061, 2061,
      206,  206,  206,  206, 2061,  206,  206, 2061,  206,  206,
      206,  206, 2061, 2061,  206,  206,  206, 2061, 2061, 2061,
      206, 2061,  206, 1600,  206, 1601, 2061,  206,  206,  206,

      206, 2061,  206,  206, 1602,  206,  206,  206, 2061, 2061,
      206,  206, 2061, 2061,  206, 2061,  206, 2061, 2061,  206,
      206,  206, 2061, 2061,  206, 1603,  206,  206, 1604,  206,
     1605, 2061,  206,  206, 1606,  206,  206,  206,  206, 2061,
     2061,  206,  206,  206,  206, 2061, 2061,  206,  206,  206,
     2061,  206, 2061, 2061,  206,  206,  206,  206, 1608, 2061,
      206,  206,  206,  206,  206, 2061, 2061, 2061, 1609, 2061,
      206, 1607, 2061,  206,  206, 2061,  206,  206, 2061, 2061,
      206,  206, 2061,  206, 1549, 1610, 1549,  206, 2061,  206,
      206, 2061,  206,  206,  206,  206, 2061, 2061,  206, 2061,

      206,  206, 2061, 2061, 1612,  206,  206, 2061, 2061, 2061,
      206,  206, 2061,  206, 2061, 2061, 2061,  206,  206,  206,
      206, 2061, 2061,  206,  206,  206, 2061, 2061,  206, 1611,
      206, 1614, 2061,  206,  206, 2061,  206,  206, 1615, 2061,
      206,  206,  206,  206, 1616, 2061,  206,  206, 2061,  206,
      206, 1617,  206,  206,  206,  206, 2061, 2061,  206,  206,
     1619,  206, 1618, 2061,  206,  206,  206, 2061, 2061,  206,
     1621,  206, 1622,  206, 2061, 2061,  206,  206, 2061,  206,
     2061, 1620,  206,  206,  206,  206,  206, 2061, 2061,  206,
      206,  206,  206,  206, 2061, 2061,  206,  206,  206, 2061,

     2061, 2061,  206,  206, 1623,  206, 2061, 2061, 2061,  206,
      206,  206,  206, 2061,  206,  206, 2061,  206, 1625,  206,
     2061, 2061, 2061, 1626,  206,  206, 1624, 1627,  206,  206,
      206,  206, 2061,  206,  206,  206,  206, 2061,  206,  206,
     2061,  206, 1628,  206,  206, 2061,  206,  206, 2061,  206,
      206,  206,  206, 1629,  206,  206,  206,  206, 2061, 2061,
      206,  206,  206,  206, 2061, 1630,  206, 1632,  206, 2061,
      206,  206, 2061,  206,  206,  206,  206, 2061,  206, 1631,
     2061,  206,  206,  206,  206, 2061,  206,  206,  206,  206,
     2061, 2061,  206,  206, 2061,  206, 2061,  206, 2061, 2061,

      206, 1635, 1633, 1634, 2061,  206,  206,  206,  206,  206,
      206, 2061, 2061,  206,  206,  206, 2061, 2061,  206,  206,
     2061, 2061,  206, 1637, 2061, 1638,  206,  206,  206,  206,
     2061, 1639,  206, 2061,  206,  206,  206,  206, 2061,  206,
      206, 2061,  206,  206, 2061,  206,  206, 2061, 2061,  206,
     2061, 2061, 2061,  206, 2061,  206,  206, 2061, 1642,  206,
     2061,  206,  206,  206,  206, 2061,  206,  206, 2061,  206,
      206, 2061,  206,  206, 2061, 2061,  206, 1643, 2061, 1644,
      206, 2061,  206,  206, 2061,  206,  206, 1645,  206,  206,
      206,  206, 2061,  206,  206, 2061, 2061,  206,  206, 2061,

     2061, 2061,  206, 2061,  206, 2061, 1647,  206,  206, 1646,
      206, 1648,  206, 2061,  206,  206, 2061,  206,  206, 2061,
      206, 1650, 1649,  206,  206,  206,  206, 2061, 2061,  206,
      206,  206, 2061,  206, 1651, 2061, 1652,  206, 2061,  206,
     2061, 2061,  206, 1653,  206,  206,  206,  206, 2061, 2061,
     1654,  206,  206,  206, 2061, 2061, 1658,  206,  206, 1549,
     1549, 1549,  206,  206,  206,  206, 1655, 2061, 2061,  206,
      206,  206,  206, 2061,  206,  206, 1659,  206,  206, 2061,
      206,  206, 2061, 2061,  206, 1707, 2061, 2061, 2061, 2061,
     2061,  206, 1669,  206, 1670, 2061, 1671,  206,  206, 1706,

      206,  206,  206, 2061, 2061,  206,  206,  206, 2061, 2061,
      206,  206, 1708, 2061,  206, 2061, 2061, 2061,  206,  206,
      206,  206, 2061, 1709,  206, 2061,  206,  206,  206,  206,
     2061, 2061,  206,  206,  206, 1712, 2061,  206,  206,  206,
     2061, 1710,  206,  206, 2061,  206,  206,  206, 1711, 2061,
      206,  206,  206,  206, 2061, 1713,  206, 2061,  206,  206,
     2061,  206, 1549, 1610, 1549,  206,  206, 2061, 2061, 1717,
      206, 1720, 2061, 2061, 2061,  206, 2061, 2061, 2061, 2061,
     2061, 1718,  206,  206,  206,  206, 2061,  206,  206, 2061,
      206,  206,  206, 2061, 2061, 1714,  206, 1715,  206, 1716,

     2061, 2061,  206,  206,  206, 2061,  206,  206, 2061,  206,
      206,  206, 1721, 2061,  206,  206, 1723,  206, 1722,  206,
      206, 2061,  206,  206,  206, 2061, 2061,  206,  206,  206,
     1724,  206, 2061, 1725, 2061,  206,  206, 2061,  206, 2061,
     1726,  206, 2061,  206,  206, 1727, 2061, 2061,  206,  206,
      206,  206,  206, 2061, 2061,  206,  206,  206, 2061,  206,
     2061,  206,  206, 2061,  206,  206, 2061, 2061,  206,  206,
      206,  206,  206,  206, 2061, 2061, 1728,  206,  206, 1729,
      206, 2061,  206,  206, 2061, 2061,  206, 2061, 2061,  206,
      206,  206,  206,  206, 2061, 2061,  206,  206,  206,  206,

     2061,  206,  206,  206, 1730, 2061, 1731,  206, 2061,  206,
      206, 2061,  206,  206,  206, 2061, 2061, 2061,  206,  206,
     1732,  206,  206,  206, 2061, 1735,  206,  206, 1733, 2061,
      206,  206, 2061,  206,  206,  206, 2061, 2061, 2061,  206,
      206,  206,  206, 2061,  206,  206, 2061,  206,  206, 1736,
     2061,  206, 1739, 2061,  206, 1740, 2061, 2061,  206, 2061,
      206,  206,  206,  206, 2061,  206,  206, 2061,  206,  206,
      206,  206,  206, 2061, 1744,  206,  206, 2061, 2061,  206,
     1741,  206,  206, 1742,  206, 2061, 2061, 2061,  206,  206,
     1743,  206,  206,  206, 2061, 2061,  206,  206,  206, 2061,

     2061,  206,  206, 2061,  206,  206, 1745, 2061,  206,  206,
      206,  206,  206, 1747, 2061,  206, 2061,  206,  206, 2061,
      206,  206, 2061,  206,  206,  206, 1746, 2061, 1748,  206,
      206,  206, 2061, 2061,  206, 1787,  206, 2061, 2061, 2061,
      206,  206,  206,  206,  206, 2061, 2061,  206,  206,  206,
      206, 2061, 1789, 1788, 2061,  206,  206,  206,  206, 2061,
     2061,  206,  206, 2061, 2061, 2061,  206, 2061, 1790,  206,
      206,  206, 2061, 2061,  206,  206,  206, 1791, 2061, 1792,
      206, 2061, 2061,  206,  206,  206,  206, 1793, 2061,  206,
      206, 2061,  206,  206, 1799, 2061,  206,  206,  206,  206,

     2061, 2061,  206,  206, 2061, 1794,  206, 2061,  206,  206,
      206,  206, 1798, 2061, 1802, 1801, 2061,  206,  206,  206,
     2061, 2061,  206,  206,  206, 2061, 2061,  206,  206,  206,
      206, 1803, 2061, 2061,  206,  206,  206,  206, 1804, 2061,
      206,  206, 2061,  206,  206, 2061, 1806,  206,  206, 1805,
     2061,  206,  206, 2061,  206,  206, 2061,  206,  206,  206,
      206, 2061, 2061, 2061,  206,  206, 1807,  206,  206, 2061,
      206,  206,  206,  206, 2061, 2061,  206,  206,  206,  206,
     1808,  206,  206, 2061, 1812, 1810, 2061, 2061,  206,  206,
      206,  206, 2061, 2061,  206,  206, 2061,  206,  206, 2061,

      206,  206, 1809,  206,  206, 2061, 2061,  206,  206,  206,
      206,  206, 2061, 2061,  206,  206, 1815, 2061, 1814, 2061,
      206,  206,  206,  206, 2061, 2061,  206,  206,  206,  206,
      206, 2061,  206,  206, 2061,  206,  206, 2061,  206,  206,
     2061,  206,  206,  206,  206, 1818, 2061,  206,  206,  206,
     1816,  206,  206, 2061, 2061,  206,  206, 1817, 2061, 2061,
      206,  206,  206,  206,  206, 2061, 2061, 1850,  206, 1819,
      206,  206, 2061,  206,  206, 2061,  206,  206, 2061, 2061,
      206,  206,  206,  206, 2061, 2061, 1852,  206, 2061,  206,
      206, 2061, 1851,  206,  206,  206, 2061, 2061,  206,  206,

     1854,  206, 2061,  206,  206, 2061,  206, 1855, 2061, 2061,
      206,  206,  206, 1853, 2061, 2061,  206,  206, 2061,  206,
      206, 1859,  206,  206,  206,  206, 2061, 2061,  206,  206,
      206,  206, 2061,  206,  206, 2061, 2061,  206, 2061, 1863,
     1860,  206, 1862,  206,  206, 2061, 2061,  206,  206,  206,
      206,  206,  206, 2061,  206,  206, 2061, 2061,  206, 2061,
      206,  206, 2061,  206,  206,  206, 2061, 2061,  206,  206,
      206,  206, 1864,  206,  206, 2061, 2061,  206,  206,  206,
     2061,  206,  206, 2061,  206,  206, 2061, 2061, 1865, 2061,
     1866,  206,  206,  206, 2061,  206,  206, 2061,  206,  206,

      206,  206, 2061, 1872, 1867,  206, 1871, 2061, 2061,  206,
     2061, 1869,  206,  206,  206, 2061, 2061,  206,  206,  206,
      206, 2061,  206, 1873, 2061, 2061,  206,  206, 2061, 1874,
      206,  206,  206,  206, 2061, 2061,  206,  206,  206,  206,
     2061,  206, 2061,  206,  206, 2061,  206,  206, 2061,  206,
      206, 1899,  206,  206,  206, 2061, 2061,  206, 1901, 2061,
      206,  206,  206,  206, 2061, 2061,  206,  206,  206, 2061,
     2061,  206, 1900,  206, 1902, 2061,  206,  206, 2061, 2061,
      206,  206,  206,  206, 2061, 2061, 1903, 1907, 1906,  206,
     2061, 2061, 2061, 1909,  206,  206,  206, 2061, 2061,  206,

      206,  206,  206, 2061, 2061,  206,  206,  206,  206, 2061,
     2061,  206,  206,  206,  206, 1910, 2061, 1911,  206,  206,
      206, 2061, 2061,  206,  206,  206,  206, 2061, 2061,  206,
      206,  206,  206, 1914, 2061,  206,  206,  206, 1912, 2061,
     2061,  206,  206,  206,  206, 2061, 2061,  206,  206, 2061,
      206, 1918, 2061, 2061,  206,  206, 1916,  206, 2061, 2061,
      206,  206,  206,  206, 2061, 2061, 1917,  206,  206,  206,
      206, 1940, 2061,  206,  206, 2061,  206,  206, 2061, 2061,
      206,  206, 1941,  206, 2061, 2061,  206,  206,  206, 1947,
     2061, 2061, 1942,  206,  206, 1943,  206,  206, 2061, 2061,

      206,  206, 1944,  206, 2061, 2061,  206,  206,  206,  206,
     1948, 2061, 2061,  206,  206,  206,  206, 2061, 2061,  206,
      206,  206, 1950, 2061, 2061,  206,  206, 1951,  206,  206,
     2061, 2061,  206,  206,  206, 2061, 2061,  206,  206, 2061,
      206,  206, 2061, 1952, 2061, 1954,  206,  206,  206, 2061,
     2061,  206, 2061,  206,  206, 2061,  206,  206,  206,  206,
     2061, 2061,  206,  206,  206,  206, 1955, 2061, 2061,  206,
     1956, 1973,  206, 2061, 2061,  206,  206,  206,  206,  206,
     2061, 2061,  206, 1975, 1974,  206,  206, 2061, 2061,  206,
      206,  206, 2061, 2061, 1978,  206,  206,  206,  206, 2061,

     2061,  206,  206,  206,  206,  206, 2061,  206,  206, 2061,
     1979,  206, 2061, 2061,  206,  206,  206, 2061, 2061,  206,
     2061,  206, 2061, 2061,  206,  206,  206,  206, 1981, 2061,
     2061,  206,  206,  206,  206, 1983, 2061,  206,  206,  206,
      206, 2061, 2061,  206,  206,  206,  206, 2061, 2061,  206,
      206, 1984,  206,  206, 2061, 2061,  206,  206,  206, 2061,
     2061,  206,  206, 2061,  206,  206, 2061,  206, 2061, 2061,
      206,  206, 1996,  206, 1998, 2061, 2061,  206,  206, 2061,
      206,  206, 2061, 2061, 1999,  206,  206,  206, 2061, 2061,
      206, 2002,  206,  206, 2001, 2061, 2061,  206,  206,  206,

      206, 2061, 2061,  206,  206,  206,  206, 2061, 2061,  206,
      206,  206,  206, 2011, 2061,  206,  206,  206,  206, 2061,
     2061,  206,  206,  206,  206, 2061, 2061, 2020,  206,  206,
      206, 2061, 2061,  206,  206,  206, 2012, 2061, 2061,  206,
      206,  206,  206, 2061, 2061,  206,  206, 2061,  206, 2061,
     2061,  206,  206, 2027,  206,  206, 2061,  206,  206, 2061,
      206,  206,  206, 2061, 2035, 2061,  206, 2061,  206, 2031,
      206, 2039, 2061,  206,  206, 2061,  206,  206,  206,  206,
     2061, 2043,  206,  206,  206, 2051, 2047, 2055,  206, 2061,
      206, 2061,  206, 2061, 2061,  206, 2061,  206, 2061, 2061,

      206,  206,  206,  206,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   88,   88,   88, 2061,   88,   88,
       88,   88,   91,   91,   91,   91,   91,   91,   91,   91,
       95,   95,   96,   96,   96,   96,  192, 2061, 2061,  192,
      192,  192,  192,  192,  192,  192,  195, 2061, 2061,  195,
      195,  195,  195,  195,  195,  195,  199, 2061,  199,  199,
      199,  199,  199,  199,  199,  199,  201, 2061,  201,  201,
      201,  201,  201,  201,  201,  201,  205, 2061, 2061,  205,
      205,  205,  205,  205,  205,  205,  206, 2061, 2061,  206,
      206,  206,  206,  206,  206,  206,  301, 2061, 2061,  301,

      301,  301,  301,  301,  301,  301,  302,  302,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  305,  305,
      305,  444,  444,  444,  445, 2061, 2061,  445,  445,  445,
      445,  445,  445,  445,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  448, 2061, 2061,  448,  448,  448,
      448,  448,  448,  448,  587, 2061, 2061,  587,  587,  587,
      587,  587,  587,  587,  589, 2061,  589,  589,  589,  589,
      731, 2061, 2061,  731,  731,  731,  731,  731,  731,  731,
        7, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061
    } ;

static const flex_int16_t yy_chk[6829] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        4,    4,    4,   39,   33,    3,    3,   43,    4,    4,
       33,   43,    3,   39,   33,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    9,    9,    9,   10,   10,   10,   23,
       23,   24,   29,   26,   30,   24,   29,   26,   23,   97,
       38,   30,  141,   27,  141,   29,   26,   30,   24,   26,
       24,   25,   38,   27,   25, 1369,   97,   27,   25,   27,
      106,   99,   25,   27,  106,   25,   25,   25,   25,   99,
       28,   25,   28,   31,   34,  155,   28,  155,   34,   35,
       31,   31,   28,   35,  124,   28,   31,   36,   34,   34,
      124,   36,   34,   35,   37,   34,  108,  108,   37,   36,
       42,   36,   37,  127,   36,   42,   36,   42,   37,  127,

       42,   37,   41,   44,   37,   40,   41,   40, 1370,   40,
       44,   44,   40,   40,   41,  131,   40,   44,  131,   41,
      138,   40,  138,  149,   40,   40,  138,   40,  149,   40,
       48,   48,   48,   49,   49,   49,   52,   52,   52,   53,
       53,   53,   55,  435,   55,   55,   55,   55,   66,  107,
       55,  148,   66,  107,   55,  435,   66,   67,   69,   55,
       67,   67,   69,  107,  152,   66,   69,   66,   66,  148,
       67,   87,   87,   87,   67,   69,   67,   69,  175,  152,
       67,  177,  179,  175,   72,  177,   55,   57,   72,   57,
       57,   57,   68,   75,   68,   57,   68,   75, 1372,   57,

       68,   72,  179,   72,   57,  135,   68,   75,  135,   68,
       75,   68,   75,  159,  164,  172,   70,   70,  135,  135,
       70,  135,  181,  159,   70,  164, 1374,  182,  181,  172,
       70,   57,   62,   70,   62,   70,   62,   62,   62,   62,
       62,  168,  182,   62,   62,   62,   62,   62,   73,   62,
     1375,  168,   73,  167,   79,   77,   73, 1376,   79,   77,
      167,  167,   73,   77, 1377,   73,   73,   73,   79,   77,
      104,   79,   77,   79,   77,   77,   62,   62,   63,  104,
       63,  104,   63,   63,   63,   63,   63,  104,  186,   63,
       63,   63,   78,  328,  328,   63,   78,  186,   63,   63,

       78,   81,   83, 1381,  373,   81,   83,   63,  373,   78,
     1382,   78,   78,   81,  193,  193,  193,  331,   81,   83,
       81,   83,   63,   63,   64,  331,   64,  388,   64,   64,
       64,   64,   64,  687,  687,   64,   64,   64,  194,  194,
      194,   64,   64,   82, 1383,  388,   64,   82,  121,  394,
       82,  344,  121,  394,  344,   82,  121,   82, 1389,   64,
       82,   64,   82,  121,  196,  196,  196,  121,   64,   64,
       65,  603,  360,   65,   65,  603,  360,   65,  197,  197,
      197,   65,  360, 1390,   65,   65,   65,   65,  606,   65,
       65,   71,  203,  203,  203,   71,   71,  352,  352,  352,

      203,  203,  206,   71,   71,  606,  206,  203,   71,   71,
       71,   74,  704,  403,  443,   74,  704,  443, 1392,  206,
      403,  206, 1393,  403,  586,   74,   74,  586,   74,   74,
       74,  605,   74,   76,   76,  605,  958,   76,   76,  605,
      207,  715,  207,  715,  207, 1394,   76, 1395,   76, 1396,
       76,   76,   76,   76,   80,  958,   80,  207,   80,  207,
      729,   80,   80,  729,  871,   80,  945,  871,  213,  968,
       80,   80,  213,   80,   80,   84,   80, 1398,   80,   84,
     1399,  945,   84,   84, 1208,  213,  968,  213, 1400,   84,
     1378, 1401,   84, 1404,   84,   86, 1208,   86, 1405,   86,

       86,   86,   86,   86, 1406,  404,   86,   86,   86,   86,
       86,  113,   86,  113,  208,  209,  113,  208,  208,  209,
      404,  404,  113,  412,  412,  412,  209, 1378, 1101,  113,
      113,  208,  209,  208,  209,  634,  634,  634, 1407,   86,
       86,   86,  163, 1408,  412, 1101,  976,  163,  163,  976,
      163, 1409, 1411,  163,  210, 1412,  210,  163,  210, 1416,
      163,  976, 1417,  163,  198, 1419,  198,  198,  198,  198,
      634,  210,  198,  210,  211,  212,  198, 1420,  211,  212,
      211,  198, 1421,  212,  214,  215,  214, 1422,  214,  215,
     1423,  211,  212,  211,  212,  214, 1425,  214, 1245, 1245,

     1245,  214,  215,  214,  215,  698,  698,  698,  198,  200,
     1426,  200, 1428,  200,  200,  200,  200,  200, 1429, 1430,
      200,  200,  200,  200,  200,  216,  200, 1433, 1434,  216,
      220,  217, 1436,  220,  220,  217, 1437, 1438, 1384, 1384,
     1384,  698,  216, 1439,  216,  217, 1440,  220,  217,  220,
      217, 1441,  218,  200,  200,  201,  218,  201,  201,  201,
     1442, 1443,  219,  201,  218,  218,  219,  201, 1444,  218,
      221,  218,  201,  222,  221, 1445,  224,  222, 1446,  219,
      224,  219,  219, 1384,  225, 1448, 1450,  221,  225,  221,
      222, 1475,  222,  224,  224,  224, 1507, 1513,  225,  201,

      205,  225,  205,  225,  205,  205,  205,  205,  205, 1514,
     1537,  205,  205,  205,  205,  226,  227,  205, 1538,  226,
      227,  228,  229, 1539,  227,  228,  229,  226, 1541, 1543,
     1544, 1545,  226,  227,  226,  227, 1546, 1547,  228,  229,
      228,  229,  228,  230,  205,  205,  223,  230,  223, 1550,
      223,  223,  232,  776,  776,  776,  232,  223, 1552, 1553,
      230, 1550,  230,  223,  223,  223,  231, 1554, 1556,  232,
      231,  232,  233,  234,  231, 1557,  233,  234,  235, 1559,
     1561,  231,  235,  231,  234,  231, 1562, 1563,  776,  233,
      234,  233,  234, 1567,  236,  235, 1569,  235,  236,  237,

      238, 1571, 1572,  237,  238,  239,  240, 1573,  236,  239,
      240,  236,  237,  236, 1574, 1575,  237,  238,  237,  238,
     1576,  238,  239,  240,  239,  240,  241, 1578, 1579,  242,
      241, 1580,  243,  242, 1581,  244,  243, 1584, 1585,  244,
      242, 1586, 1587,  241,  241,  241,  242,  241,  242,  243,
      244,  243,  244, 1588,  244,  245, 1590, 1591, 1592,  245,
      245,  246, 1594,  245,  247,  246, 1595, 1596,  247,  840,
      840,  840,  245,  245,  245,  246,  245, 1613,  246, 1636,
      246,  247,  247,  247,  248,  249,  248, 1640,  248,  249,
      248,  250,  251, 1641, 1656,  250,  251, 1657, 1660, 1661,

     1662,  248,  249,  248,  249,  840,  250, 1663,  250,  251,
      250,  251,  252,  253, 1664,  252,  252,  253,  254, 1665,
      254, 1666,  254,  255,  253, 1667, 1668,  255, 1669,  252,
      253,  252,  253, 1670,  255,  254, 1671,  254, 1672,  256,
      255, 1673,  255,  256,  257,  259, 1674, 1675,  257,  259,
     1676,  256, 1677,  258,  259, 1678,  256,  258,  256, 1680,
     1681,  257,  259,  257,  259, 1682, 1685,  257, 1687,  260,
      258,  258,  258,  260,  260,  261,  262, 1688, 1689,  261,
      262,  263, 1690, 1693, 1694,  263,  260,  264,  260,  263,
     1697,  264,  261,  262,  261,  262, 1699,  265,  263, 1700,

      263,  265, 1701,  266,  264, 1703,  264,  266,  267,  268,
     1704,  267,  267,  268,  265,  269,  265, 1705, 1714,  269,
      266, 1715,  266, 1716,  268,  267,  268,  267,  268,  269,
     1719,  270,  269, 1734,  269,  270,  271,  272, 1738,  271,
      271,  272, 1749, 1750, 1751,  272, 1753,  274,  270, 1755,
      270,  274, 1756,  271,  272,  271,  272,  273,  274, 1757,
     1758,  273,  273,  273,  274,  273,  274,  275,  273,  274,
     1759,  275,  273,  276,  273,  273,  273,  276,  273, 1760,
      276, 1761, 1762,  277,  275, 1763,  275,  277,  275,  278,
      276, 1764,  276,  278,  277,  280, 1765, 1766, 1768,  280,

      277,  277,  277,  278, 1771,  279,  278, 1772,  278,  279,
     1773,  279,  280, 1775,  280,  281,  282, 1776, 1777,  281,
      282,  284,  279, 1778,  279,  284,  281,  283,  283,  284,
      282,  283,  281,  282,  281,  282, 1779,  285,  284, 1780,
      284,  285, 1782, 1783,  283, 1785,  283,  286,  286, 1786,
      285,  286, 1795, 1796,  285,  285,  285,  287,  288, 1797,
     1800,  287,  288,  289,  286, 1811,  286,  289,  290, 1813,
      287,  290,  290, 1820,  287,  288,  287,  288, 1821, 1823,
      289, 1824,  289,  289,  291,  290, 1825,  290,  291,  292,
     1827, 1828,  292,  292,  293,  291, 1830, 1832,  293, 1833,

      295,  291,  293,  291,  295,  294,  292,  292,  292,  294,
      296,  293, 1834,  293,  296, 1835,  294,  295,  296,  295,
     1838,  298,  294, 1839,  294,  298,  297,  296, 1840,  296,
      297,  299, 1841, 1842,  297,  299, 1843, 1845,  298, 1846,
      298, 1847, 1848,  297, 1849,  297, 1857, 1861,  299, 1868,
      299,  301, 1870,  301, 1875,  301,  301,  301,  301,  301,
     1876, 1877,  301,  301,  301,  301, 1878, 1879,  301,  446,
      446,  446,  449, 1831, 1831, 1831,  449,  446,  446, 1858,
     1858, 1858,  450, 1880,  446, 1881,  450, 1882, 1884,  449,
      450,  449,  449, 1885, 1886,  301,  301,  301,  445,  450,

      445,  450,  445,  445,  445,  445,  445, 1887,  451,  445,
      445,  445,  451,  452,  453,  445, 1888,  452,  453,  454,
      455, 1892, 1893,  454,  455,  451, 1894,  451,  455,  454,
      452,  453,  452,  453, 1895, 1896,  454,  455,  454,  455,
     1897, 1898,  445,  445,  448, 1904,  448, 1908,  448,  448,
      448,  448,  448, 1915, 1919,  448,  448,  448,  448,  456,
      457,  448, 1920,  456,  457, 1921,  459,  457,  459, 1923,
      459, 1924, 1926, 1927, 1928, 1929,  456,  457,  456,  457,
      458, 1930, 1933,  459,  458,  459,  460, 1934,  448,  448,
      460,  458, 1935, 1937,  461, 1938, 1939,  458,  461,  458,

      462, 1945,  462,  460,  462,  460,  463,  461, 1946, 1949,
      463,  461,  464,  461, 1953, 1957,  464,  462,  465,  462,
     1958, 1961,  465,  463,  463,  463,  466, 1962, 1964,  464,
      466,  464, 1965, 1968, 1969,  465,  465,  465,  466, 1970,
      467, 1971, 1972,  466,  467,  466,  468,  469, 1976, 1982,
      468,  469,  470, 1985, 1986, 1988,  470,  467,  471,  467,
     1990, 1993,  471,  468,  469,  468,  469, 1994,  472,  470,
     1995,  470,  472, 1997, 2003,  471,  471,  471,  473,  472,
     2004, 2005,  473, 2006,  474,  472, 2009,  472,  474,  473,
      475, 2010,  474, 2014,  475,  473,  476,  473,  476, 2015,

      476,  474,  477,  474, 2016, 2019,  477,  475,  478,  475,
     2024, 2025,  478,  476,  479,  476, 2028, 2029,  479,  477,
      480,  477, 2030,  478,  480,  478,  481,  478, 2032,  479,
      481,  479,  482,  479, 2033,  480,  482,  480,  483,  480,
     2034, 2036,  483,  481,  484,  481, 2037, 2038,  484,  482,
      486,  482,  483,  482,  486,  483,  484,  483,  485, 2040,
      485,  484,  485,  484, 2008, 2008, 2008,  486,  487,  486,
     2041, 2042,  487, 2044,  488,  485, 2045,  485,  488,  487,
     2046, 2048,  487, 2049,  489,  487,  489,  487,  489, 2050,
      490,  488, 2052,  488,  490,  491, 2054, 2056,  492,  491,

     2057,  489,  492,  489,  493, 2058, 2067,  490,  493,  490,
     1366, 1334,  491,  491,  491,  492,  493,  492,  494, 1333,
     1283,  493,  494,  493,  495,  495,  495,  496, 1251, 1250,
      497,  496, 1249, 1247,  497,  494,  498,  494, 1244, 1241,
      498,  495, 1240,  497,  496,  495,  496,  497,  499,  497,
     1239, 1235,  499,  498,  498,  498, 1234,  500,  495, 1233,
      495,  500,  701,  701,  701,  499,  501,  499,  701,  501,
      501, 1232, 1230,  502,  500,  701,  500,  502,  701,  701,
      503, 1229, 1228,  501,  503,  501, 1227,  502,  503,  504,
      502, 1226,  502,  504,  503, 1225,  505,  503, 1224,  503,

      505,  506, 1883, 1883, 1883,  506,  504,  507,  504, 1223,
      508,  507, 1222,  505,  508,  505, 1220, 1219,  506, 1218,
      506,  507, 1215, 1213,  507, 1210,  507,  508,  509,  508,
     1209,  510,  509, 1883,  510,  510,  511,  512,  508, 1207,
      511,  512, 1905, 1905, 1905,  509,  511,  509,  510, 1205,
      510, 1203, 1202,  511,  512,  511,  512,  513,  514, 1201,
     1200,  513,  514,  515,  514, 1199, 1198,  515, 2013, 2013,
     2013, 1197, 1196, 1905,  513,  514,  513,  514, 1195,  516,
      515, 1194,  515,  516,  518,  517, 1193,  516,  518,  517,
     1192,  519, 1191, 1190,  518,  519,  516, 1189,  516,  517,

     1187,  518,  517,  518,  517,  519, 1186,  520,  519, 1184,
      519,  520,  521,  522, 1183, 1182,  521,  522,  523,  524,
     1181, 1180,  523,  524,  520, 1179,  520, 1178, 1176,  521,
      522,  521,  522,  522,  523,  523,  524,  523,  524, 1174,
      525,  526, 1172,  524,  525,  526, 1170,  528,  527, 1169,
     1168,  528,  527, 1167, 1165,  528, 1164,  525,  526,  525,
      526,  527, 1163, 1161,  528,  527,  528,  527,  529,  530,
     1159, 1158,  529,  530,  530,  531, 1156, 1155,  532,  531,
      529, 1154,  532, 1153, 1152,  529,  530,  529,  530, 1151,
     1150, 1149,  531,  531,  531,  532,  533,  532, 1147,  534,

      533, 1146,  535,  534, 1145, 1144,  535, 1143,  536, 2017,
     2017, 2017,  536,  533, 1142,  533,  534, 1140,  534,  535,
     1138,  535,  535,  536,  537,  536,  537,  536,  537,  538,
      537, 1137,  539,  538, 1047,  538,  539, 1004,  540, 1003,
     1001,  537,  540,  537, 2017, 1000,  538,  999,  538,  539,
      541,  539,  998,  541,  541,  540,  542,  540,  996,  544,
      542,  995,  543,  544,  994,  993,  543,  541,  992,  541,
      543,  991,  544,  542,  990,  542,  544,  989,  544,  543,
      545,  543,  988,  986,  545,  985,  984,  546,  547,  983,
      981,  546,  547, 2021, 2021, 2021,  548,  545,  546,  545,

      548,  546,  980,  978,  546,  547,  546,  547,  547,  977,
      548,  975,  549,  548,  974,  548,  549,  550,  973,  972,
      551,  550,  971,  549,  551,  969,  552,  967, 2021,  549,
      552,  549,  966,  965,  550,  550,  550,  551,  553,  551,
      964,  963,  553,  552,  554,  552,  962,  961,  554,  555,
      555,  555,  960,  959,  556,  553,  957,  553,  556,  956,
      557,  554,  554,  554,  557,  556,  555,  955,  954,  953,
      555,  556,  952,  556,  558,  951,  950,  557,  558,  557,
      559,  949,  557,  555,  559,  555,  560,  558,  948,  947,
      560,  558,  561,  558,  946,  944,  561,  559,  562,  559,

      943,  942,  562,  560,  563,  560,  941,  940,  563,  561,
      564,  561,  939,  938,  564,  562,  565,  562,  937,  936,
      565,  563,  566,  563,  934,  933,  566,  564,  930,  564,
      929,  927,  567,  565,  926,  565,  567,  925,  568,  566,
      924,  566,  568,  567,  569,  923,  922,  921,  569,  567,
      920,  567,  919,  918,  570,  568,  569,  568,  570,  917,
      914,  569,  571,  569,  913,  572,  571,  570,  910,  572,
      909,  570,  573,  570,  908,  571,  573,  907,  906,  571,
      904,  571,  572,  574,  572,  903,  573,  574,  575,  573,
      902,  573,  575,  576,  901,  900,  899,  576,  898,  897,

      574,  896,  574,  895,  577,  575,  894,  575,  577,  893,
      576,  578,  576,  892,  891,  578,  579,  577,  890,  578,
      579,  577,  580,  577,  889,  581,  580,  888,  578,  581,
      578,  578,  582,  579,  579,  579,  582,  885,  581,  580,
      883,  580,  581,  582,  581,  882,  583,  881,  880,  582,
      583,  582,  584,  583,  876,  874,  584,  873,  870,  730,
      728,  726,  584,  583,  725,  583, 1447, 1447, 1447,  584,
      724,  584,  587,  722,  587,  721,  587,  587,  587,  587,
      587,  720,  719,  587,  587,  587,  587,  732,  733,  587,
     1447,  732,  733,  734,  735,  718,  717,  734,  735,  732,

      716, 1447,  714,  713,  732,  733,  732,  733,  712,  733,
      734,  735,  734,  735,  735,  711,  587,  587,  587,  731,
      710,  731,  709,  731,  731,  731,  731,  731,  708,  736,
      731,  731,  731,  736,  737,  707,  731,  738,  737,  737,
      739,  738,  736,  740,  739,  706,  736,  740,  736,  705,
      703,  737,  702,  737,  738,  700,  738,  739,  699,  739,
      740,  741,  740,  731,  731,  741,  743,  742,  697,  696,
      743,  742,  741,  742,  695,  744,  743,  694,  741,  744,
      741,  693,  692,  743,  742,  743,  742,  745,  691,  690,
      689,  745,  744,  744,  744,  746,  688,  686,  748,  746,

      745,  747,  748,  685,  745,  747,  745,  749,  684,  747,
      683,  749,  746,  682,  746,  748,  681,  748,  747,  750,
      747,  680,  679,  750,  749,  751,  749,  678,  677,  751,
      752,  753,  676,  675,  752,  753,  750,  674,  750,  751,
      673,  752,  751,  672,  751,  671,  670,  752,  753,  752,
      753,  754,  669,  667,  665,  754,  755,  756,  663,  662,
      755,  756,  757,  660,  659,  657,  757,  656,  754,  755,
      754,  754,  654,  755,  756,  755,  756,  653,  758,  757,
      652,  757,  758,  759,  760,  650,  758,  759,  760,  761,
      649,  648,  762,  761,  759,  758,  762,  758,  647,  646,

      759,  760,  759,  760,  645,  643,  761,  642,  761,  762,
      763,  762,  641,  764,  763,  638,  765,  764,  637,  766,
      765,  636,  633,  766,  767,  631,  629,  763,  767,  763,
      764,  765,  764,  765,  628,  765,  766,  627,  766,  766,
      768,  767,  626,  767,  768,  769,  770,  624,  623,  769,
      770,  771,  772,  622,  621,  771,  772,  768,  771,  768,
      617,  616,  769,  770,  769,  770,  615,  614,  771,  772,
      771,  772,  773,  774,  613,  612,  773,  774,  775,  777,
      611,  610,  775,  777,  778,  609,  608,  607,  778,  773,
      774,  773,  774,  604,  602,  775,  777,  775,  777,  601,

      779,  778,  600,  778,  779,  781,  780,  599,  598,  781,
      780,  782,  783,  596,  595,  782,  783,  779,  594,  779,
      780,  593,  781,  780,  781,  780,  592,  591,  782,  783,
      782,  783,  784,  785,  590,  589,  784,  785,  786,  787,
      588,  444,  786,  787,  785,  441,  440,  787,  439,  784,
      785,  784,  785,  438,  437,  786,  787,  786,  787,  788,
      789,  436,  434,  788,  789,  790,  433,  432,  791,  790,
      431,  430,  791,  428,  427,  790,  788,  789,  788,  789,
      791,  426,  790,  425,  790,  791,  792,  791,  424,  793,
      792,  423,  794,  793,  422,  421,  794,  420,  795,  419,

      794,  418,  795,  792,  416,  792,  793,  415,  793,  794,
      414,  794,  413,  411,  792,  795,  796,  795,  410,  796,
      796,  797,  798,  409,  408,  797,  798,  798,  799,  407,
      799,  406,  799,  796,  405,  796,  402,  401,  797,  798,
      797,  798,  800,  400,  399,  799,  800,  799,  801,  802,
      398,  397,  801,  802,  801,  395,  803,  393,  392,  800,
      803,  800,  390,  389,  387,  801,  802,  801,  802,  386,
      804,  385,  384,  803,  804,  803,  806,  805,  382,  381,
      806,  805,  807,  380,  807,  379,  807,  804,  805,  804,
      378,  377,  376,  806,  805,  806,  805,  375,  808,  807,

      374,  807,  808,  810,  809,  372,  371,  810,  809,  368,
      367,  366,  365,  364,  363,  808,  362,  808,  809,  361,
      810,  809,  810,  809,  811,  812,  359,  358,  811,  812,
      813,  814,  811,  357,  813,  814,  815,  812,  356,  355,
      815,  811,  812,  811,  812,  354,  353,  813,  814,  813,
      814,  351,  816,  815,  350,  815,  816,  817,  818,  348,
      347,  817,  818,  816,  819,  346,  345,  343,  819,  816,
      342,  816,  341,  340,  817,  818,  817,  818,  820,  339,
      338,  819,  820,  819,  821,  337,  336,  822,  821,  335,
      823,  822,  334,  333,  823,  820,  824,  820,  332,  330,

      824,  821,  821,  821,  822,  822,  822,  823,  825,  823,
      329,  327,  825,  824,  824,  824,  825,  826,  827,  324,
      323,  826,  827,  322,  828,  825,  321,  825,  828,  829,
      320,  319,  828,  829,  826,  827,  826,  827,  830,  318,
      317,  828,  830,  828,  316,  831,  829,  829,  829,  831,
      832,  315,  314,  313,  832,  830,  833,  830,  312,  831,
      833,  832,  831,  311,  831,  310,  833,  832,  307,  832,
      834,  834,  306,  833,  834,  833,  835,  836,  303,  302,
      835,  836,  300,  204,  191,  190,  837,  834,  189,  834,
      837,  188,  836,  835,  836,  835,  836,  838,  837,  838,

      839,  838,  187,  837,  839,  837,  844,  841,  839,  185,
      844,  841,  184,  183,  838,  180,  838,  839,  842,  839,
      841,  176,  842,  844,  841,  844,  841,  174,  845,  842,
      173,  171,  845,  170,  169,  842,  166,  842,  843,  165,
      843,  843,  843,  845,  846,  845,  843,  845,  846,  162,
      847,  161,  846,  843,  847,  843,  843,  843,  848,  160,
      158,  846,  848,  846,  849,  157,  849,  847,  849,  847,
      850,  156,  154,  153,  850,  848,  851,  848,  150,  147,
      851,  849,  852,  849,  146,  145,  852,  850,  144,  850,
      853,  143,  142,  851,  853,  851,  854,  140,  137,  852,

      854,  852,  855,  853,  854,  136,  855,  853,  856,  853,
      856,  134,  856,  854,  857,  854,  857,  132,  857,  855,
      855,  855,  858,  130,  129,  856,  858,  856,  858,  128,
      859,  857,  126,  857,  859,  125,  860,  123,  119,  858,
      860,  858,  861,  118,  117,  116,  861,  859,  861,  859,
      115,  114,  112,  860,  862,  860,  111,  862,  862,  861,
      863,  861,  110,  865,  863,  109,  864,  865,  102,  101,
      864,  862,  867,  862,  864,  100,  867,  863,   98,  863,
      865,   94,  865,  864,  866,  864,   93,   91,  866,  867,
      868,  867,  866,  869,  868,   89, 1006,  869,   88,   85,

     1006,  866, 1007,  866,  868,   61, 1007,  868,   60,  868,
      869,   56,  869, 1006, 1008, 1006, 1006,   45, 1008, 1007,
     1009, 1007,   20, 1010, 1009,   19, 1011, 1010,   14,   13,
     1011, 1008, 1012, 1008,   12, 1009, 1012, 1009,    7, 1009,
     1010,    0, 1010, 1011, 1013, 1011,    0,    0, 1013, 1012,
     1014, 1012,    0, 1015, 1014, 1013, 1016, 1015,    0,    0,
     1016, 1013, 1017, 1013, 1014,    0, 1017, 1014,    0, 1014,
     1015,    0, 1015, 1016, 1018, 1016,    0, 1016, 1018, 1017,
     1019, 1017,    0, 1020, 1019,    0,    0, 1020, 1021,    0,
        0, 1018, 1021, 1018, 1018,    0,    0, 1019,    0, 1019,

     1020, 1021, 1020,    0, 1022, 1021,    0, 1021, 1022, 1023,
     1024,    0,    0, 1023, 1024, 1026, 1025, 1022, 1024, 1026,
     1025, 1022,    0, 1022,    0,    0, 1023, 1024, 1023, 1024,
     1025,    0, 1026, 1025, 1026, 1025, 1027, 1028,    0,    0,
     1027, 1028, 1030, 1029,    0,    0, 1030, 1029,    0, 1027,
        0,    0,    0, 1027, 1028, 1027, 1028, 1029,    0, 1030,
     1029, 1030, 1029, 1031, 1032,    0,    0, 1031, 1032, 1033,
        0,    0,    0, 1033, 1031,    0,    0,    0,    0,    0,
     1031, 1032, 1031, 1032,    0, 1034, 1033,    0, 1033, 1034,
     1035, 1036,    0, 1034, 1035, 1036, 1037,    0,    0, 1038,

     1037, 1035, 1034, 1038, 1034,    0,    0, 1035, 1036, 1035,
     1036,    0,    0, 1037,    0, 1037, 1038, 1039, 1038,    0,
     1040, 1039,    0, 1041, 1040,    0, 1042, 1041, 1039,    0,
     1042, 1041,    0,    0, 1039,    0, 1039, 1040,    0, 1040,
     1041,    0, 1041, 1042, 1043, 1042, 1043, 1044, 1043,    0,
     1045, 1044,    0, 1046, 1045,    0, 1048, 1046,    0,    0,
     1048, 1043,    0, 1043, 1044,    0, 1044, 1045,    0, 1045,
     1046,    0, 1046, 1048, 1049, 1048,    0, 1050, 1049,    0,
     1051, 1050,    0, 1052, 1051,    0, 1053, 1052,    0,    0,
     1053, 1049,    0, 1049, 1050,    0, 1050, 1051,    0, 1051,

     1052,    0, 1052, 1053, 1054, 1053,    0,    0, 1054, 1055,
        0, 1052, 1056, 1055,    0, 1057, 1056,    0, 1058, 1057,
        0, 1054, 1058, 1054,    0, 1056, 1055,    0, 1055, 1056,
        0, 1056, 1057,    0, 1057, 1058, 1059, 1058, 1059, 1060,
     1059,    0, 1061, 1060,    0, 1062, 1061,    0,    0, 1062,
     1063,    0, 1060, 1059, 1063, 1059, 1060,    0, 1060, 1061,
        0, 1061, 1062,    0, 1062,    0, 1064, 1063,    0, 1063,
     1064, 1065, 1066,    0, 1063, 1065, 1066,    0, 1067,    0,
        0,    0, 1067, 1064,    0, 1064,    0,    0, 1065, 1066,
     1065, 1066, 1067,    0, 1068, 1067, 1066, 1067, 1068, 1069,

        0,    0, 1070, 1069,    0,    0, 1070,    0, 1072,    0,
        0, 1068, 1072, 1068,    0, 1070, 1069,    0, 1069, 1070,
     1071, 1070,    0,    0, 1071, 1072, 1072, 1072, 1073, 1074,
        0, 1071, 1073, 1074, 1075, 1075,    0, 1071, 1075, 1071,
     1076,    0,    0,    0, 1076, 1073, 1074, 1073, 1074,    0,
     1077, 1075,    0, 1075, 1077,    0,    0, 1076, 1078, 1076,
        0, 1078, 1078,    0, 1079,    0,    0, 1077, 1079, 1077,
     1080,    0,    0, 1080, 1080, 1078, 1078, 1078, 1081,    0,
     1081, 1079, 1081, 1079, 1082,    0,    0, 1080, 1082, 1080,
     1083,    0,    0,    0, 1083, 1081,    0, 1081, 1084,    0,

     1082, 1082, 1084, 1082,    0,    0, 1085, 1083, 1083, 1083,
     1085,    0, 1086,    0,    0, 1084, 1086, 1084, 1087,    0,
        0,    0, 1087, 1085, 1088, 1085, 1088,    0, 1088, 1086,
     1086, 1086, 1089,    0,    0, 1087, 1089, 1087, 1090,    0,
        0, 1088, 1090, 1088,    0,    0, 1090,    0, 1091, 1089,
     1091, 1089, 1091,    0, 1092, 1090,    0, 1090, 1092, 1093,
     1094,    0,    0, 1093, 1094, 1091, 1095, 1091,    0, 1091,
     1095, 1092,    0, 1092,    0,    0, 1093, 1094, 1093, 1094,
     1096,    0,    0, 1095, 1096, 1095, 1097, 1098,    0,    0,
     1097, 1098, 1099,    0,    0,    0, 1099, 1096, 1100, 1096,

     1097,    0, 1100, 1097, 1098, 1097, 1098,    0,    0, 1099,
     1102, 1099, 1100,    0, 1102, 1100, 1103, 1100,    0,    0,
     1103, 1105, 1104,    0, 1105, 1105, 1104, 1102,    0, 1102,
     1106, 1102,    0, 1103, 1106, 1103, 1104,    0, 1105, 1104,
     1105, 1104, 1107, 1106,    0,    0, 1107, 1106,    0, 1106,
        0,    0, 1108, 1109,    0, 1107, 1108, 1109, 1110, 1107,
     1109, 1107, 1110, 1108, 1112, 1532, 1532, 1532, 1112, 1108,
     1109, 1108, 1109,    0, 1111, 1110,    0, 1110, 1111,    0,
     1113, 1112,    0, 1112, 1113, 1111, 1114,    0,    0, 1532,
     1114, 1111, 1113, 1111, 1115,    0,    0, 1113, 1115, 1113,

     1532,    0, 1116, 1114, 1114, 1114, 1116,    0, 1117,    0,
        0, 1115, 1117, 1115, 1118, 1117,    0,    0, 1118, 1116,
        0, 1116, 1119,    0,    0, 1117, 1119, 1117, 1120,    0,
        0, 1118, 1120, 1118, 1119,    0, 1121, 1118,    0, 1119,
     1121, 1119,    0,    0, 1122, 1120,    0, 1120, 1122,    0,
        0,    0,    0, 1121, 1123, 1121,    0, 1122, 1123, 1123,
     1124, 1122,    0, 1122, 1124, 1125, 1126,    0, 1125, 1125,
     1126, 1123,    0, 1123, 1128,    0, 1126, 1124, 1128, 1124,
        0,    0, 1125, 1126, 1125, 1126, 1127,    0,    0,    0,
     1127, 1128, 1129, 1128, 1127, 1130, 1129,    0, 1131, 1130,

        0,    0, 1131, 1127, 1132, 1127,    0,    0, 1132, 1129,
        0, 1129, 1130,    0, 1130, 1131, 1133, 1131,    0,    0,
     1133, 1132, 1132, 1132, 1134, 1135,    0,    0, 1134, 1135,
     1133,    0, 1136, 1133,    0, 1133, 1136, 1134,    0,    0,
        0, 1134, 1135, 1134, 1135,    0, 1252,    0,    0, 1136,
     1252, 1136, 1136,    0, 1253, 1255,    0, 1252, 1253, 1255,
     1254,    0,    0, 1252, 1254, 1252, 1257,    0,    0,    0,
     1257, 1253, 1255, 1253, 1255,    0, 1256, 1254, 1254, 1254,
     1256,    0, 1256, 1257, 1258, 1257, 1257, 1259, 1258,    0,
        0, 1259, 1258, 1256, 1260, 1256,    0, 1260, 1260,    0,

        0, 1258, 1259, 1258, 1259, 1261, 1259,    0, 1262, 1261,
        0, 1260, 1262, 1260, 1265, 1263, 1265,    0, 1265, 1263,
        0, 1267, 1261,    0, 1261, 1262, 1264, 1262, 1263,    0,
     1264, 1265, 1263, 1265, 1263, 1266, 1267, 1264,    0, 1266,
     1267,    0, 1268, 1264, 1268, 1264, 1268, 1269,    0,    0,
        0, 1269, 1266, 1267, 1266, 1267, 1270,    0,    0, 1268,
     1270, 1268,    0, 1271, 1269,    0, 1269, 1271, 1272,    0,
     1272,    0, 1272, 1270,    0, 1270,    0, 1273, 1273,    0,
     1271, 1273, 1271,    0, 1274, 1272,    0, 1272, 1274, 1275,
        0,    0,    0, 1275, 1273, 1276, 1273,    0, 1277, 1276,

        0, 1274, 1277, 1274,    0, 1278, 1275,    0, 1275, 1278,
        0,    0, 1276, 1275, 1276, 1277, 1279, 1277,    0, 1280,
     1279,    0, 1278, 1280, 1278,    0, 1281, 1282,    0, 1279,
     1281, 1282,    0, 1279,    0, 1279, 1280, 1284, 1280,    0,
        0, 1284,    0, 1281, 1282, 1281, 1282, 1285, 1286,    0,
     1286, 1285, 1286, 1287, 1284,    0, 1284, 1287, 1288, 1289,
        0, 1284, 1288, 1289, 1285, 1286, 1285, 1286,    0, 1288,
     1287,    0, 1287,    0,    0, 1288, 1289, 1288, 1289, 1290,
     1291,    0,    0, 1290, 1291, 1292,    0,    0,    0, 1292,
        0, 1293,    0,    0,    0, 1293, 1290, 1291, 1290, 1291,

     1292,    0, 1292, 1294, 1292, 1293,    0, 1294, 1293, 1294,
     1293, 1295,    0,    0, 1296, 1295,    0,    0, 1296, 1297,
     1294,    0, 1294, 1297,    0, 1298,    0,    0, 1295, 1298,
     1295, 1296, 1296, 1296, 1297, 1299, 1297,    0, 1297, 1299,
        0, 1300, 1298,    0, 1298, 1300, 1301, 1302, 1298,    0,
     1301, 1302, 1299,    0, 1299,    0,    0, 1303, 1300, 1300,
     1300, 1303, 1303, 1301, 1302, 1301, 1302, 1304, 1305,    0,
        0, 1304, 1305, 1306, 1303,    0, 1303, 1306, 1307, 1305,
     1304,    0, 1307,    0, 1304, 1305, 1304, 1305,    0, 1308,
     1306,    0, 1306, 1308, 1309, 1307,    0, 1307, 1309, 1310,

        0,    0,    0, 1310,    0,    0, 1308,    0, 1308, 1308,
     1311, 1309, 1309, 1309, 1311, 1312, 1310, 1310, 1310, 1312,
     1313, 1314,    0,    0, 1313, 1314, 1315, 1311, 1314, 1311,
     1315, 1313, 1312,    0, 1312,    0,    0, 1313, 1314, 1313,
     1314,    0, 1316, 1315,    0, 1315, 1316, 1317, 1318,    0,
     1316, 1317, 1318, 1319, 1320,    0,    0, 1319, 1320, 1316,
        0, 1316,    0,    0, 1317, 1318, 1317, 1318,    0,    0,
     1319, 1320, 1319, 1320, 1321, 1322,    0,    0, 1321, 1322,
     1323, 1324,    0,    0, 1323, 1324, 1325,    0, 1323, 1322,
     1325, 1321, 1322, 1321, 1322,    0,    0, 1323, 1324, 1323,

     1324, 1322, 1326, 1325,    0, 1325, 1326, 1327, 1328, 1327,
        0, 1327, 1328, 1330, 1329,    0,    0, 1330, 1329, 1326,
        0, 1326, 1329,    0, 1327, 1328, 1327, 1328,    0,    0,
     1330, 1329, 1330, 1329, 1331, 1332,    0,    0, 1331, 1332,
     1335,    0,    0, 1336, 1335,    0,    0, 1336, 1332,    0,
        0, 1331, 1332, 1331, 1332,    0, 1336, 1335,    0, 1335,
     1336, 1337, 1336,    0, 1338, 1337,    0,    0, 1338, 1339,
        0,    0, 1337, 1339, 1339, 1340,    0,    0, 1337, 1340,
     1337, 1338,    0, 1338,    0, 1338, 1339, 1341, 1339,    0,
        0, 1341, 1340, 1342, 1340,    0, 1343, 1342,    0, 1344,

     1343,    0,    0, 1344, 1341, 1345, 1341,    0,    0, 1345,
     1342,    0, 1342, 1343,    0, 1343, 1344, 1346, 1344,    0,
        0, 1346, 1345, 1347, 1345,    0,    0, 1347, 1349, 1348,
     1349,    0, 1349, 1348, 1346, 1350, 1346,    0,    0, 1350,
     1347,    0, 1347, 1348,    0, 1349, 1348, 1349, 1348, 1351,
        0,    0, 1350, 1351, 1350, 1352, 1353,    0,    0, 1352,
     1353,    0,    0, 1354,    0,    0, 1351, 1354, 1351,    0,
        0,    0, 1352, 1353, 1352, 1353,    0, 1354,    0, 1355,
     1354,    0, 1354, 1355, 1356, 1357,    0,    0, 1356, 1357,
     1358,    0,    0,    0, 1358,    0, 1355,    0, 1355,    0,

        0, 1356, 1357, 1356, 1357,    0,    0, 1358, 1358, 1358,
     1359, 1359, 1359, 1360,    0,    0, 1361, 1360,    0, 1362,
     1361,    0,    0, 1362, 1363,    0,    0, 1359, 1363,    0,
     1360, 1359, 1360, 1361,    0, 1361, 1362, 1363, 1362,    0,
        0, 1363,    0, 1363, 1359, 1364, 1359,    0, 1365, 1364,
        0, 1364, 1365, 1452, 1453,    0,    0, 1452, 1453, 1454,
        0,    0, 1364, 1454, 1364, 1365,    0, 1365,    0,    0,
     1452, 1453, 1452, 1453,    0, 1455, 1454,    0, 1454, 1455,
     1457, 1456,    0,    0, 1457, 1456, 1458,    0,    0,    0,
     1458,    0, 1455, 1455, 1455, 1456,    0, 1457, 1456, 1457,

     1456,    0, 1459, 1458, 1458, 1458, 1459, 1460,    0,    0,
     1461, 1460,    0,    0, 1461,    0, 1462,    0,    0, 1459,
     1462, 1459,    0,    0, 1460, 1460, 1460, 1461, 1461, 1461,
     1462,    0, 1463, 1462, 1463, 1462, 1463, 1464, 1465,    0,
        0, 1464, 1465, 1466, 1467,    0,    0, 1466, 1467, 1463,
        0, 1463,    0,    0, 1464, 1465, 1464, 1465, 1467,    0,
     1466, 1467, 1466, 1467, 1468,    0,    0,    0, 1468,    0,
     1470, 1466,    0, 1471, 1470,    0, 1472, 1471,    0,    0,
     1472, 1468,    0, 1468, 1469, 1469, 1469, 1470,    0, 1470,
     1471,    0, 1471, 1472, 1473, 1472,    0,    0, 1473,    0,

     1474, 1469,    0,    0, 1474, 1469, 1476,    0,    0,    0,
     1476, 1473,    0, 1473,    0,    0,    0, 1474, 1469, 1474,
     1469,    0,    0, 1476, 1477, 1476,    0,    0, 1477, 1469,
     1478, 1477,    0, 1479, 1478,    0, 1480, 1479, 1478,    0,
     1480, 1477, 1481, 1477, 1479,    0, 1481, 1478,    0, 1478,
     1479, 1480, 1479, 1480, 1482, 1480,    0,    0, 1482, 1481,
     1483, 1481, 1481,    0, 1483, 1484, 1485,    0,    0, 1484,
     1485, 1482, 1486, 1482,    0,    0, 1486, 1483,    0, 1483,
        0, 1484, 1484, 1485, 1484, 1485, 1487,    0,    0, 1486,
     1487, 1486, 1488, 1489,    0,    0, 1488, 1489, 1490,    0,

        0,    0, 1490, 1487, 1489, 1487,    0,    0,    0, 1488,
     1489, 1488, 1489,    0, 1491, 1490,    0, 1490, 1491, 1492,
        0,    0,    0, 1492, 1493, 1494, 1490, 1493, 1493, 1494,
     1495, 1491,    0, 1491, 1495, 1496, 1492,    0, 1492, 1496,
        0, 1493, 1494, 1493, 1494,    0, 1497, 1495,    0, 1495,
     1497, 1498, 1496, 1496, 1496, 1498, 1499, 1500,    0,    0,
     1499, 1500, 1501, 1497,    0, 1497, 1501, 1502, 1498,    0,
     1498, 1502,    0, 1499, 1500, 1499, 1500,    0, 1503, 1501,
        0, 1501, 1503, 1504, 1502,    0, 1502, 1504, 1506, 1505,
        0,    0, 1506, 1505,    0, 1503,    0, 1503,    0,    0,

     1504, 1506, 1504, 1505,    0, 1506, 1505, 1506, 1505, 1508,
     1509,    0,    0, 1508, 1509, 1510,    0,    0, 1511, 1510,
        0,    0, 1511, 1508,    0, 1510, 1508, 1509, 1508, 1509,
        0, 1511, 1510,    0, 1510, 1511, 1512, 1511,    0, 1515,
     1512,    0, 1516, 1515,    0, 1517, 1516,    0,    0, 1517,
        0,    0,    0, 1512,    0, 1512, 1515,    0, 1515, 1516,
        0, 1516, 1517, 1518, 1517,    0, 1519, 1518,    0, 1520,
     1519,    0, 1521, 1520,    0,    0, 1521, 1518,    0, 1519,
     1518,    0, 1518, 1519,    0, 1519, 1520, 1521, 1520, 1521,
     1522, 1521,    0, 1523, 1522,    0,    0, 1523, 1524,    0,

        0,    0, 1524,    0, 1526,    0, 1523, 1522, 1526, 1522,
     1523, 1524, 1523,    0, 1525, 1524,    0, 1524, 1525,    0,
     1527, 1526, 1525, 1526, 1527, 1528, 1529,    0,    0, 1528,
     1529, 1525,    0, 1525, 1527,    0, 1528, 1527,    0, 1527,
        0,    0, 1528, 1529, 1528, 1529, 1530, 1531,    0,    0,
     1530, 1531, 1533, 1534,    0,    0, 1533, 1534, 1535, 1549,
     1549, 1549, 1535, 1530, 1531, 1530, 1531,    0,    0, 1533,
     1534, 1533, 1534,    0, 1536, 1535, 1535, 1535, 1536,    0,
     1599, 1600,    0,    0, 1599, 1600,    0,    0,    0,    0,
        0, 1536, 1549, 1536, 1549,    0, 1549, 1599, 1600, 1599,

     1600, 1601, 1602,    0,    0, 1601, 1602, 1603,    0,    0,
     1604, 1603, 1601,    0, 1604,    0,    0,    0, 1601, 1602,
     1601, 1602,    0, 1603, 1603,    0, 1603, 1604, 1605, 1604,
        0,    0, 1605, 1607, 1606, 1607,    0, 1607, 1606, 1609,
        0, 1605, 1608, 1609,    0, 1605, 1608, 1605, 1606,    0,
     1607, 1606, 1607, 1606,    0, 1608, 1609,    0, 1609, 1608,
        0, 1608, 1610, 1610, 1610, 1611, 1612,    0,    0, 1611,
     1612, 1614,    0,    0,    0, 1614,    0,    0,    0,    0,
        0, 1611, 1611, 1612, 1611, 1612,    0, 1615, 1614,    0,
     1614, 1615, 1616,    0,    0, 1610, 1616, 1610, 1619, 1610,

        0,    0, 1619, 1618, 1615,    0, 1615, 1618,    0, 1616,
     1617, 1616, 1615,    0, 1617, 1619, 1618, 1619, 1617, 1620,
     1618,    0, 1618, 1620, 1621,    0,    0, 1617, 1621, 1617,
     1620, 1622,    0, 1622,    0, 1622, 1620,    0, 1620,    0,
     1623, 1621,    0, 1621, 1623, 1624,    0,    0, 1622, 1624,
     1622, 1625, 1626,    0,    0, 1625, 1626, 1623,    0, 1623,
        0, 1627, 1624,    0, 1624, 1627,    0,    0, 1625, 1626,
     1625, 1626, 1628, 1629,    0,    0, 1628, 1629, 1627, 1630,
     1627,    0, 1631, 1630,    0,    0, 1631,    0,    0, 1628,
     1629, 1628, 1629, 1632,    0,    0, 1630, 1632, 1630, 1631,

        0, 1631, 1633, 1634, 1632,    0, 1633, 1634,    0, 1635,
     1632,    0, 1632, 1635, 1637,    0,    0,    0, 1637, 1633,
     1634, 1633, 1634, 1638,    0, 1637, 1635, 1638, 1635,    0,
     1639, 1637,    0, 1637, 1639, 1642,    0,    0,    0, 1642,
     1638, 1643, 1638,    0, 1644, 1643,    0, 1639, 1644, 1639,
        0, 1645, 1642,    0, 1642, 1645,    0,    0, 1643,    0,
     1643, 1644, 1646, 1644,    0, 1647, 1646,    0, 1645, 1647,
     1645, 1648, 1649,    0, 1649, 1648, 1649,    0,    0, 1646,
     1646, 1646, 1647, 1647, 1647,    0,    0,    0, 1648, 1649,
     1648, 1649, 1650, 1651,    0,    0, 1650, 1651, 1652,    0,

        0, 1653, 1652,    0, 1654, 1653, 1651,    0, 1654, 1650,
     1651, 1650, 1651, 1653,    0, 1652,    0, 1652, 1653,    0,
     1653, 1654,    0, 1654, 1655, 1658, 1652,    0, 1655, 1658,
     1659, 1706,    0,    0, 1659, 1706, 1707,    0,    0,    0,
     1707, 1655, 1658, 1655, 1658,    0,    0, 1659, 1706, 1659,
     1706,    0, 1708, 1707,    0, 1707, 1708, 1709, 1710,    0,
        0, 1709, 1710,    0,    0,    0, 1711,    0, 1709, 1708,
     1711, 1708,    0,    0, 1709, 1710, 1709, 1710,    0, 1711,
     1712,    0,    0, 1711, 1712, 1711, 1713, 1712,    0, 1717,
     1713,    0, 1718, 1717, 1718,    0, 1718, 1712, 1720, 1712,

        0,    0, 1720, 1713,    0, 1713, 1717,    0, 1717, 1718,
     1721, 1718, 1717,    0, 1721, 1720,    0, 1720, 1722, 1723,
        0,    0, 1722, 1723, 1724,    0,    0, 1721, 1724, 1721,
     1725, 1722,    0,    0, 1725, 1722, 1723, 1722, 1723,    0,
     1726, 1724,    0, 1724, 1726,    0, 1726, 1725, 1727, 1725,
        0, 1728, 1727,    0, 1729, 1728,    0, 1726, 1729, 1726,
     1731,    0,    0,    0, 1731, 1727, 1727, 1727, 1728,    0,
     1728, 1729, 1730, 1729,    0,    0, 1730, 1731, 1732, 1731,
     1730, 1733, 1732,    0, 1735, 1733,    0,    0, 1735, 1730,
     1736, 1730,    0,    0, 1736, 1732,    0, 1732, 1733,    0,

     1733, 1735, 1732, 1735, 1739,    0,    0, 1736, 1739, 1736,
     1740, 1741,    0,    0, 1740, 1741, 1742,    0, 1739,    0,
     1742, 1739, 1743, 1739,    0,    0, 1743, 1740, 1741, 1740,
     1741,    0, 1744, 1742,    0, 1742, 1744,    0, 1745, 1743,
        0, 1743, 1745, 1746, 1747, 1746,    0, 1746, 1747, 1744,
     1744, 1744, 1748,    0,    0, 1745, 1748, 1745,    0,    0,
     1746, 1747, 1746, 1747, 1787,    0,    0, 1787, 1787, 1748,
     1788, 1748,    0, 1789, 1788,    0, 1790, 1789,    0,    0,
     1790, 1787, 1791, 1787,    0,    0, 1791, 1788,    0, 1788,
     1789,    0, 1789, 1790, 1792, 1790,    0,    0, 1792, 1791,

     1793, 1791,    0, 1794, 1793,    0, 1798, 1794,    0,    0,
     1798, 1792, 1799, 1792,    0,    0, 1799, 1793,    0, 1793,
     1794, 1798, 1794, 1798, 1801, 1798,    0,    0, 1801, 1799,
     1802, 1799,    0, 1803, 1802,    0,    0, 1803,    0, 1803,
     1799, 1801, 1801, 1801, 1804,    0,    0, 1802, 1804, 1802,
     1803, 1805, 1803,    0, 1806, 1805,    0,    0, 1806,    0,
     1807, 1804,    0, 1804, 1807, 1808,    0,    0, 1805, 1808,
     1805, 1806, 1806, 1806, 1809,    0,    0, 1807, 1809, 1807,
        0, 1810, 1808,    0, 1808, 1810,    0,    0, 1807,    0,
     1808, 1809, 1812, 1809,    0, 1814, 1812,    0, 1810, 1814,

     1810, 1815,    0, 1815, 1810, 1815, 1814,    0,    0, 1812,
        0, 1812, 1814, 1816, 1814,    0,    0, 1816, 1815, 1817,
     1815,    0, 1818, 1817,    0,    0, 1818, 1819,    0, 1818,
     1816, 1819, 1816, 1850,    0,    0, 1817, 1850, 1817, 1818,
        0, 1818,    0, 1851, 1819,    0, 1819, 1851,    0, 1852,
     1850, 1851, 1850, 1852, 1853,    0,    0, 1854, 1853,    0,
     1851, 1854, 1851, 1855,    0,    0, 1852, 1855, 1852,    0,
        0, 1853, 1852, 1853, 1854,    0, 1854, 1859,    0,    0,
     1855, 1859, 1855, 1860,    0,    0, 1855, 1860, 1859, 1862,
        0,    0,    0, 1862, 1859, 1863, 1859,    0,    0, 1863,

     1860, 1864, 1860,    0,    0, 1864, 1862, 1865, 1862,    0,
        0, 1865, 1863, 1866, 1863, 1865,    0, 1866, 1864, 1867,
     1864,    0,    0, 1867, 1865, 1869, 1865,    0,    0, 1869,
     1866, 1871, 1866, 1869,    0, 1871, 1867, 1872, 1867,    0,
        0, 1872, 1869, 1873, 1869,    0,    0, 1873, 1871,    0,
     1871, 1874,    0,    0, 1872, 1874, 1872, 1899,    0,    0,
     1873, 1899, 1873, 1900,    0,    0, 1873, 1900, 1874, 1901,
     1874, 1899,    0, 1901, 1899,    0, 1899, 1902,    0,    0,
     1900, 1902, 1900, 1903,    0,    0, 1901, 1903, 1901, 1906,
        0,    0, 1901, 1906, 1902, 1902, 1902, 1907,    0,    0,

     1903, 1907, 1903, 1909,    0,    0, 1906, 1909, 1906, 1910,
     1907,    0,    0, 1910, 1907, 1911, 1907,    0,    0, 1911,
     1909, 1912, 1909,    0,    0, 1912, 1910, 1910, 1910, 1914,
        0,    0, 1911, 1914, 1911,    0,    0, 1916, 1912,    0,
     1912, 1916,    0, 1914,    0, 1916, 1914, 1917, 1914,    0,
        0, 1917,    0, 1918, 1916,    0, 1916, 1918, 1940, 1941,
        0,    0, 1940, 1941, 1917, 1942, 1917,    0,    0, 1942,
     1918, 1940, 1918,    0,    0, 1940, 1941, 1940, 1941, 1943,
        0,    0, 1942, 1943, 1942, 1944, 1947,    0,    0, 1944,
     1947, 1948,    0,    0, 1947, 1948, 1943, 1950, 1943,    0,

        0, 1950, 1944, 1947, 1944, 1947,    0, 1951, 1948,    0,
     1948, 1951,    0,    0, 1950, 1952, 1950,    0,    0, 1952,
        0, 1954,    0,    0, 1951, 1954, 1951, 1955, 1952,    0,
        0, 1955, 1952, 1956, 1952, 1954,    0, 1956, 1954, 1973,
     1954,    0,    0, 1973, 1955, 1974, 1955,    0,    0, 1974,
     1956, 1956, 1956, 1975,    0,    0, 1973, 1975, 1973,    0,
        0, 1978, 1974,    0, 1974, 1978,    0, 1979,    0,    0,
     1975, 1979, 1975, 1981, 1978,    0,    0, 1981, 1978,    0,
     1978, 1983,    0,    0, 1979, 1983, 1979, 1984,    0,    0,
     1981, 1984, 1981, 1996, 1983,    0,    0, 1996, 1983, 1998,

     1983,    0,    0, 1998, 1984, 1999, 1984,    0,    0, 1999,
     1996, 2001, 1996, 1999,    0, 2001, 1998, 2002, 1998,    0,
        0, 2002, 1999, 2011, 1999,    0,    0, 2011, 2001, 2012,
     2001,    0,    0, 2012, 2002, 2020, 2002,    0,    0, 2020,
     2011, 2027, 2011,    0,    0, 2027, 2012,    0, 2012,    0,
        0, 2031, 2020, 2020, 2020, 2031,    0, 2035, 2027,    0,
     2027, 2035, 2039,    0, 2031,    0, 2039,    0, 2031, 2027,
     2031, 2035,    0, 2047, 2035,    0, 2035, 2047, 2043, 2039,
        0, 2039, 2043, 2051, 2055, 2047, 2043, 2051, 2055,    0,
     2047,    0, 2047,    0,    0, 2043,    0, 2043,    0,    0,

     2051, 2055, 2051, 2055, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2063, 2063, 2063,    0, 2063, 2063,
     2063, 2063, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
     2065, 2065, 2066, 2066, 2066, 2066, 2068,    0,    0, 2068,
     2068, 2068, 2068, 2068, 2068, 2068, 2069,    0,    0, 2069,
     2069, 2069, 2069, 2069, 2069, 2069, 2070,    0, 2070, 2070,
     2070, 2070, 2070, 2070, 2070, 2070, 2071,    0, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2072,    0,    0, 2072,
     2072, 2072, 2072, 2072, 2072, 2072, 2073,    0,    0, 2073,
     2073, 2073, 2073, 2073, 2073, 2073, 2074,    0,    0, 2074,

     2074, 2074, 2074, 2074, 2074, 2074, 2075, 2075, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2077, 2077,
     2077, 2078, 2078, 2078, 2079,    0,    0, 2079, 2079, 2079,
     2079, 2079, 2079, 2079, 2080, 2080, 2080, 2080, 2080, 2080,
     2080, 2080, 2080, 2080, 2081,    0,    0, 2081, 2081, 2081,
     2081, 2081, 2081, 2081, 2082,    0,    0, 2082, 2082, 2082,
     2082, 2082, 2082, 2082, 2083,    0, 2083, 2083, 2083, 2083,
     2084,    0,    0, 2084, 2084, 2084, 2084, 2084, 2084, 2084,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
#line 9 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"


#include "common/ComGuardianFileNameParts.h"
#include "common/Platform.h"
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include "sqlci/SqlciCmd.h"
#include "common/str.h"
#include "sqlci/Sqlci.h"
#define yylval sqlcilval
#define yyerror sqlcierror
#include "sqlci/sqlci_yacc.h"
#include "sqlci/SqlciParseGlobals.h"

static int token_to_return;

#define return_IDENT_or_TOKEN(token_id, set_ident)  \
{\
 if (SqlciParse_IdentifierExpected)\
   {\
     if (yylval.stringval_type)\
       delete [] yylval.stringval_type;\
     yylval.stringval_type = new char[strlen(yytext)+1];\
     strcpy(yylval.stringval_type, yytext);\
     token_to_return = IDENTIFIER; \
   }\
 else token_to_return = token_id; \
 if (SqlciParse_SyntaxErrorCleanup) \
   SqlciParse_IdentifierExpected = -1; \
 else \
   SqlciParse_IdentifierExpected = set_ident;\
/*  cout << "token = " << token_id << endl;*/  \
 return (token_to_return);\
}
#ifndef NA_LINUX
#ifdef	NA_WINNT
extern "C" int isatty(int);
#else
extern "C" { int yylex(void); }
#endif
#else
extern "C" { int yylex(void); }
#endif

# undef YY_INPUT
#define YY_INPUT(buffer,result,maxsize)\
{\
    buffer[0] = SqlciParse_InputStr[SqlciParse_InputPos++];\
    if ( !buffer[0] )\
        result = YY_NULL;\
    else\
        result=1;\
}

#undef unput
#define unput(c) SqlciUnput(c)

#define yylval sqlcilval
#define yyerror sqlcierror

// put back a previously read input character that wasn't needed
void SqlciUnput(char c)
{
 SqlciParse_InputPos--;
}

// handle EOF in the input stream and let lex continue
// with the next input file
extern "C"   
  int yywrap(void)
    {
      return 0;
    }

#line 2963 "/home/esoye/trafodion/sqlci_lex.cpp"

#line 2965 "/home/esoye/trafodion/sqlci_lex.cpp"

#define INITIAL 0
#define FNAME 1
#define LOGFNAME 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 93 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"


#line 3187 "/home/esoye/trafodion/sqlci_lex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2062 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 2061 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 95 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 96 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 97 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(NOSQL, 0);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 99 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CONTAINSQL, 0);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 100 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(READSQL, 0);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 101 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MODIFYSQL, 0);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(RESETVIOLATION, 0);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 103 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CHECKVIOLATION, 0);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 104 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(NoAutoXact, 0);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 105 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DESCRIBEToken, 0);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 106 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CREATECONTEXT, 0);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 107 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CURRENTCONTEXT, 0);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 108 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SWITCHCONTEXT, 0);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 109 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DELETECONTEXT, 0);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 110 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(RESETCONTEXT, 0);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 111 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN( ADDtoken, 0);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 112 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ALLtoken, 0);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 113 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(BACKUP, 0);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 114 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(BACKUPS, 0);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 115 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TOK_BEGIN, 0);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 116 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(BRIEF, 0);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 117 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TOK_BEGIN, 0);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 118 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DETAIL, 0);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 119 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN (CALLToken, 0);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 120 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CLEANUP, 0);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 121 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CLASStoken, 0);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 122 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CLOSEtoken, 0);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 123 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(COMMANDStoken,0);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 124 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(COMMANDStoken,0);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 125 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(COMMIT, 0);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 126 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(COMMENTtoken, 0);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 127 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CONTROL, 0);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 128 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CONTROL, 0);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 129 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CONTROL, 0);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 130 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(OSIM, 0);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 131 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CACHE, 0);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 132 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CURSORtoken, 0);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 133 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CURSORWITH, 0);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 134 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DEFAULTtoken, 0);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 135 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DEALLOCtoken, 0);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 136 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DECLAREtoken, 0);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 137 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DEFINEtoken, 0);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 138 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DESC, 0);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 139 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DESCRIBE, 0);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 140 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DISPLAY, 0);
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 141 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DISPLAY_STATISTICS, 0);
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 142 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DISPLAY_QUERYID,0);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 143 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DISPLAY_EXPLAIN, 0);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 144 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DISPLAY_QC,0);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 145 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DISPLAY_QC_ENTRIES,0);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 146 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DISPLAY_QC_ENTRIES_NOTIME,0);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 147 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DUMP, 0);
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 148 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DISPLAY_USE_OF, 0);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 149 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MXCI_TOK_ENV, 0);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 150 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ENVVARtoken, 0);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 151 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(COMMIT, 0);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 152 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(EXPLAIN, 0);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 153 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(EXPORTtoken, 0);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 154 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(EXTRACTtoken, 0);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 155 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(FETCHtoken, 0);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 156 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{ 
                                         BEGIN(FNAME);
                     //SqlciParse_IdentifierExpected = 0;
                                         return_IDENT_or_TOKEN(FILEtoken, 0);
                                       }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 161 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(GENERATEtoken, 0);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 162 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(GETtoken, 0);
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 163 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(GETSTATISTICStoken, 0);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 164 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN (HIVEtoken, 0); 
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(IMPORTtoken, 0);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 166 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN (INtoken, 0); 
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 167 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN (INFOtoken, 0); 
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 168 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                     BEGIN FNAME; 
                     return_IDENT_or_TOKEN (INFILE, 0); 
                       }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 172 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(LOADtoken, 0);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 173 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MERGEtoken, 0);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 174 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(METADATAtoken, 0);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 175 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MAPtoken, 0);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 176 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MODIFY, 0);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 177 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MSCKtoken, 0);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 178 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{ 
                     BEGIN FNAME; 
                                         return_IDENT_or_TOKEN (OBEY, 0); 
                                       }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 182 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(OBJECTtoken, 0);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 183 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ON, 0);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 184 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(OFtoken, 0);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 185 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(OFF, 0);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 186 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                     BEGIN FNAME; 
                     return_IDENT_or_TOKEN (OUTFILE, 0); 
                       }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(OPENtoken, 0);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(OPTIONStoken, 0);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 192 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PREPARED, 0);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 193 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PROCESStoken, 0);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 194 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ERRORtoken, 0);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 195 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SUBERRORtoken, 0);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 196 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(HBASEtoken, 0);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 197 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TMtoken, 0);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 198 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(EXIT, 0);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 199 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(FC, -1);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 200 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(FORtoken, 0);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 201 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(REPLICATEtoken, 0);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 202 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(RESTORE, 0);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 203 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CPU, 0);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 204 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PID, 0);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 205 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(QID, 0);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 206 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(REPEAT, -1);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 207 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWENV, 0);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 208 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWSTATS, 0);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 209 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWSTATS, 0);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 210 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(INVOKE, 0);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 211 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                                         BEGIN LOGFNAME;
                                         return_IDENT_or_TOKEN(LOG, 0);
                                       }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 216 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(HISTORY, 0);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 217 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(RESET, 0);
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 218 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SET_TABLEtoken, 0);
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 219 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SET_TRANSACTIONtoken, 0);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 220 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SETtoken, 0);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 221 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SETENV, 0);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 222 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(LISTCOUNT, 0);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 223 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(FIRST, 0);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 224 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(NEXT, 0);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 225 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(REPORT, 0);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 226 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SQL, 0);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 227 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CANCEL, 0);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 228 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MODE,0);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 229 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(VERBOSE, 0);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 230 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PARAM, 0);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 231 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PARAM, 0);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 232 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SQ_LINUX_PATTERN, 0);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 233 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PATTERN_AS_IS, 0);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 234 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PROCEDUREtoken, 0);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 235 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PURGEDATA, 0);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 236 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(POPULATE, 0);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 237 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(VALIDATEtoken, 0);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 238 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(REFRESH, 0);	/* MV - REFRESH utility */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 239 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(REPOSITORYtoken, 0);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 240 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ROWSETtoken, 0);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 241 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TRANSFORM, 0);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 242 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CLEAR, 0);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 243 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHELL, 0);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 244 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHELL, 0);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 245 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOW, 0);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 246 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWCONTROL, 0);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 247 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWINFO, 0);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 248 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWDDL, 0);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 249 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWPLAN, 0);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 250 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWSHAPE, 0);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 251 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SHOWSET, 0);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 252 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SESSIONtoken, 0);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 253 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SLEEPtoken, 0);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 254 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(STOREtoken, 0);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 255 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SYNTAX, 0);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 256 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SYSTEMtoken, 0);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 257 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(WAITtoken, 0);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 258 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(EXAMPLE, 0);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 259 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SELECTtoken, 0);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 260 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SELECTtoken, 0);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 261 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(UPDATEtoken, 0);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 262 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DELETEtoken, 0);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 263 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(INSERTtoken, 0);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 264 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(INSERTtoken, 0);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 265 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(UPSERTtoken, 0);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 266 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TABLE, 0);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 267 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(VALUES, 0);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 268 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(VERSIONtoken, 0);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 269 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CREATE, 0);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 270 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ALTER, 0);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 271 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DROP, 0);
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 272 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(LOCK, 0);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 273 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(LOCKINGtoken, 0);
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 274 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(UNLOCK, 0);
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 275 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PREPAREtoken, 0);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 276 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(EXECUTEtoken, 0);
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 277 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(EXECUTEtoken, 0);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 278 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(USING, 0);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 279 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(FROM, 0);
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 280 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(EDIT, 0);
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 281 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(LS, 0);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 282 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CD, 0);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 283 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ROLLBACK, 0);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 284 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(STATISTICS, 0);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 285 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(WORK, 0);
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 286 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(UPD_STATS, 0);
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 287 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(UPD_HIST_STATS, 0);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 288 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(INITIALIZE, 0);
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 289 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(REINITIALIZE, 0);
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 290 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(GIVE, 0);
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 291 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(GRANTtoken, 0);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 292 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(REVOKEtoken, 0);
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 293 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(NAMETYPE, 0);
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 294 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MPLOC, 0);
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 295 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CATALOG, 0);
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 296 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(REGISTER, 0);
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 297 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(UNREGISTER, 0);
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 298 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SCHEMA, 0);
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 299 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(STATEMENTtoken, 0);
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 300 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(IF, 0);
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 301 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(UIDtoken, 0);
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 302 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(WHILE, 0);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 303 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(SIGNAL, 0);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 304 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(WITHOUT, 0);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 305 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(WITH, 0);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 306 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(HOLD, 0);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 307 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(CHECK, 0);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 308 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PARSERFLAGS, 0);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 309 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TERMINAL_CHARSET, 0);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 310 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ISO_MAPPING, 0);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 311 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(DEFAULT_CHARSETtoken, 0);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 312 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(INFER_CHARSET, 0);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 313 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(RESULT, 0);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 314 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(QUIESCE, 0);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 315 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ACTIVEtoken, 0);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 316 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(ACCUMULATEDtoken, 0);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 317 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PERTABLEtoken, 0);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 318 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(PROGRESStoken, 0);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 319 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                  SqlciParse_IdentifierExpected = 0; 
          return_IDENT_or_TOKEN(0, 0);
                };
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 323 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(INTERNAL, 0);  /* MV OZ_REFRESH */
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 324 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(MVLOG, 0);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 325 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(UNLOAD, 0); 
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 326 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TRUNCATE, 0);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 327 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(USERtoken, 0);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 328 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TENANTtoken, 0);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 329 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TOK_SAVEPOINT, 0);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 330 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
return_IDENT_or_TOKEN(TOK_RELEASE, 0);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 332 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{SqlciParse_IdentifierExpected = 0; return(ALLtoken);};
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 333 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{SqlciParse_IdentifierExpected = 0; return(LPAREN);};
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 334 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{SqlciParse_IdentifierExpected = 0; return(RPAREN);};
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 335 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                 SqlciParse_IdentifierExpected = 0; 
                 return_IDENT_or_TOKEN(COMMA, 0);
                };
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 339 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{SqlciParse_IdentifierExpected = 0; return(HYPHEN);};
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 341 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                                if (yylval.stringval_type)
				  delete [] yylval.stringval_type;
                                yylval.stringval_type = new char[strlen(yytext)+1];
				strcpy(yylval.stringval_type, yytext);
                                BEGIN 0;
                                SqlciParse_IdentifierExpected = 0;
                                return_IDENT_or_TOKEN(FILENAME, 0);
			   }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 351 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{  
                                if (yylval.stringval_type)
                  delete [] yylval.stringval_type; 
                yylval.stringval_type = new char[strlen(yytext)+1];
                strcpy(yylval.stringval_type, yytext);
                SqlciParse_IdentifierExpected = 0;
                //		       return(NUMBER);
                return_IDENT_or_TOKEN(NUMBER, 0);
                           }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 361 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                                if (yylval.stringval_type)
                  delete [] yylval.stringval_type;
                yylval.stringval_type = new char[strlen(yytext)];
                strcpy(yylval.stringval_type, &yytext[1]);
                                SqlciParse_IdentifierExpected = 0;
                return(PARAM_NAME);
               }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 370 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                                if (yylval.stringval_type)
                  delete [] yylval.stringval_type;
                yylval.stringval_type = new char[strlen(yytext)];
                strncpy(yylval.stringval_type, &yytext[2], strlen(&yytext[2])-2);
                yylval.stringval_type[strlen(&yytext[2])-2]  = '\0';
                                SqlciParse_IdentifierExpected = 0;
                return(PATTERN_NAME);
                 }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 380 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                                if (yylval.stringval_type)
                  delete [] yylval.stringval_type;
                yylval.stringval_type = new char[strlen(yytext)];
                strncpy(yylval.stringval_type, &yytext[1], strlen(yytext)-2);
                yylval.stringval_type[strlen(yytext)-2]  = '\0';
                
                                SqlciParse_IdentifierExpected = 0;
                return_IDENT_or_TOKEN(QUOTED_STRING, 0);
                 }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 391 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                if (yylval.stringval_type)
                   delete [] yylval.stringval_type;
                yylval.stringval_type = new char[strlen(yytext+1)];
                strcpy(yylval.stringval_type, yytext);
                yylval.stringval_type[strlen(yytext)]  = '\0';
                
                SqlciParse_IdentifierExpected = 0;
                return_IDENT_or_TOKEN(DQUOTED_STRING, 0);
                 }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 402 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                yylval.stringval_type = new char[strlen(yytext)+1];
                strcpy(yylval.stringval_type, yytext);
                if (SqlciParse_SyntaxErrorCleanup) 
                  { 
                    SqlciParse_IdentifierExpected = -1;
                    SqlciParse_SyntaxErrorCleanup=0; 
                  }
                else          
                  SqlciParse_IdentifierExpected = 0;
                //cout << "token = " << IDENTIFIER << endl;
                return(IDENTIFIER);
               }
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 417 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                                if (yylval.stringval_type)
                  delete [] yylval.stringval_type;
                                yylval.stringval_type = new char[strlen(yytext)+1];
                strcpy(yylval.stringval_type, yytext);
                                BEGIN 0;
                                SqlciParse_IdentifierExpected = 0;
                return_IDENT_or_TOKEN(FILENAME, 0);
                        }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 426 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                                if (yylval.stringval_type)
	                              delete [] yylval.stringval_type;
                                yylval.stringval_type = new char[strlen(yytext)+1];
				strcpy(yylval.stringval_type, yytext);
                                return(PID_VALUE);
                           }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 434 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                                if (yylval.stringval_type)
	                              delete [] yylval.stringval_type;
                                yylval.stringval_type = new char[strlen(yytext)+1];
				strcpy(yylval.stringval_type, yytext);
                                return(CPU_VALUE);
                           }
	YY_BREAK
case 232:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 442 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{
                /* no action (comment) */
                           }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 446 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{SqlciParse_IdentifierExpected = -1; return(REPEAT);};
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 448 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
{SqlciParse_IdentifierExpected = 0; return(ERROR_STMT);};
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 450 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"
ECHO;
	YY_BREAK
#line 4536 "/home/esoye/trafodion/sqlci_lex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FNAME):
case YY_STATE_EOF(LOGFNAME):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2062 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2062 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2061);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 450 "/home/esoye/trafodion/core/sqlci/sqlci_lex.ll"


void SqlciLexReinit()
{
    sqlcirestart(0);
}

