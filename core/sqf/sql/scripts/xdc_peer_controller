#!/bin/bash
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@

function SetEnv {
TRAF_XDC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TRAF_XDC_LOG=${TRAF_XDC}/log
mkdir -p ${TRAF_XDC_LOG}
if [ ! -d "/var/log/trafodion" ]; then
mkdir -p /var/log/trafodion
fi
}

function Usage {

    echo
    echo "Usage: `basename $0` [ -m <>| -n <> |-s <>| -t <>| -p <>| -c <>| -r <>] "
    echo
    echo "-n   check the net between this host to the other host"
    echo "-m   <user_monitor,user_node1_active,user_node2_active,ip_monitor,ip_node1_active ip_node2_active,passwd_monitor,passwd_node1_active,passwd_node2_active>     This script runs on the monitor"
    echo "-s   The sleep time after each network check"
    echo "-t   When it is detected that the network is unreachable, how many times the check will be excute before called the monitor "   
    echo "-p   The number of ping tags will be send when check network"
    echo "-c   Time between two pingchecks"
    echo "-r   Ping success rate"
    echo

}

function CutParameter {
OLD_IFS="$IFS"
IFS=","
arr=($parameter)
IFS="$OLD_IFS"
user_monitor=${arr[0]}
user_d1a=${arr[1]}
user_d1s=${arr[2]}
user_d2a=${arr[3]}
user_d2s=${arr[4]}
ip_monitor=${arr[5]}
ip_d1a=${arr[6]}
ip_d1s=${arr[7]}
ip_d2a=${arr[8]}
ip_d2s=${arr[9]}
passwd_monitor=${arr[10]}
passwd_d1a=${arr[11]}
passwd_d1s=${arr[12]} 
passwd_d2a=${arr[13]}
passwd_d2s=${arr[14]}
}

function MonitorToD1 {
  CheckNet $ip_d1a
 if [ $? -eq 0 ]; then
 	echo -n 0000 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
        echo -n "0 0" >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
 else
 	echo -n 1 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
 	timeout 20 /bin/bash ${TRAF_XDC}/xdc_peer_controller.sh -o $user_d1a $ip_d1a $passwd_d1a $ip_d2a $ip_d2s ${TRAF_XDC_LOG}
        if [ $? -ne 0 ];then
          echo >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
          MonitorToD1
        else
        echo -n "`tail -n 2 ${TRAF_XDC_LOG}/xdc_peer_controller_pr.log | head -1` " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
        echo -n "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller_pr.log` " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
	          if [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_checknode.log | head -1`" = "0" ]; then
    	         echo -n 1 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
    	      else
    	         echo -n 0 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
            fi
	      echo -n `tail -n 1 ${TRAF_XDC_LOG}/xdc_checknode.log` >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
        fi
 fi

 CheckNet $ip_d1s
 if [ $? -eq 0 ]; then
 	echo  0000 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
    echo -n " 0 0 " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
 else
 	echo -n 1 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
 	timeout 20 /bin/bash ${TRAF_XDC}/xdc_peer_controller.sh -o $user_d1s $ip_d1s $passwd_d1s $ip_d2a $ip_d2s ${TRAF_XDC_LOG}
 	      if [ $? -ne 0 ];then
        echo >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
          MonitorToD1
        else
        echo -n "`tail -n 2 ${TRAF_XDC_LOG}/xdc_peer_controller_pr.log | head -1` " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
        echo -n "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller_pr.log` " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
	         if [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_checknode.log | head -1`" = "0" ]; then
    	       echo -n 1 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
    	     else
    	       echo -n 0 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
           fi
 	      echo  `tail -n 1 ${TRAF_XDC_LOG}/xdc_checknode.log` >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status
        fi
 fi 
  
 
}

function MonitorToD2 {
  CheckNet $ip_d2a
 if [ $? -eq 0 ]; then
 	echo -n 0000 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
 	echo -n " 0 0 " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
 else
 	echo -n 1 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
 	timeout 20 /bin/bash ${TRAF_XDC}/xdc_peer_controller.sh -d $user_d2a $ip_d2a $passwd_d2a $ip_d1a $ip_d1s ${TRAF_XDC_LOG}
        if [ $? -ne 0 ];then
        echo >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
          MonitorToD2
        else
         echo -n "`tail -n 2 ${TRAF_XDC_LOG}/xdc_peer_controller_pr2.log | head -1` " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
         echo -n "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller_pr2.log` " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
          if [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_checknode2.log | head -1`" = "0" ]; then
    	     echo -n 1 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
    	    else
    	     echo -n 0 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
          fi
 	       echo -n `tail -n 1 ${TRAF_XDC_LOG}/xdc_checknode2.log` >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
        fi
 fi 
 CheckNet $ip_d2s
  if [ $? -eq 0 ]; then
 	echo  0000 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
 	echo -n " 0 0 " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
 else
 	echo -n 1 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
 	timeout 20 /bin/bash ${TRAF_XDC}/xdc_peer_controller.sh -d $user_d2s $ip_d2s $passwd_d2s $ip_d1a $ip_d1s ${TRAF_XDC_LOG}
        if [ $? -ne 0 ];then
          echo >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
          MonitorToD2
        else
          echo -n "`tail -n 2 ${TRAF_XDC_LOG}/xdc_peer_controller_pr2.log | head -1` " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
          echo -n "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller_pr2.log` " >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
          if [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_checknode2.log | head -1`" = "0" ]; then
    	      echo -n 1 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
    	    else
    	      echo -n 0 >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
          fi
 	        echo `tail -n 1 ${TRAF_XDC_LOG}/xdc_checknode2.log` >> ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status
        fi
 fi 
 
}

function AfterSwitch() {
user=$2
ip=$1
passwd=$3
TRAF_XDC_LOG=$4
/usr/bin/expect << EOF
set timeout 5000
spawn ssh $user@$ip
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect "$user@*"  {send "cds\r"}
expect "$user@*"  {send "xdc -list >> /var/log/trafodion/xdc_peer_list.log\r"}
expect "$user@*"  {send "exit\r"}
expect eof
EOF
/usr/bin/expect << EOF
spawn scp $user@$ip:/var/log/trafodion/xdc_peer_list.log ${TRAF_XDC_LOG}
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect eof
EOF
if [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_peer_list.log |awk  '{print substr($0,length($0)-2)}' `" = "sdn
up*" ] || [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_peer_list.log |awk  '{print substr($0,length($0)-2)}' `" = "up*
sdn" ] ; then
 echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
 echo "  xdc status is down,xdc_peer_controller will start monitoring again after the xdc state is up " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
 echo "afterswitch sleep 60s"
 sleep 60s
 AfterSwitch $ip $user $passwd ${TRAF_XDC_LOG}
elif [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_peer_list.log |awk  '{print substr($0,length($0)-2)}' `" = "up*
sup" ] || [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_peer_list.log |awk  '{print substr($0,length($0)-2)}' `" = "sup
up*" ] ; then
 echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
 echo "  xdc status is up,xdc_peer_controller will start monitoring now " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
fi
}

function CheckNode_2() {
user=$2
ip=$3
passwd=$4
TRAF_XDC_LOG=$7
/usr/bin/expect << EOF
set timeout 300
spawn ssh $user@$ip
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect "$user@*"  {send "cds\r"}
expect "$user@*"  {send "date\r"}
expect "$user@*"  {send "sqcheck\r"}
expect "$user@*"  {send "echo \$\? >> /var/log/trafodion/xdc_checknode2.log\r"}
expect "$user@*"  {send "date\r"}
expect "$user@*"  {send "./xdc_peer_controller -c 0 -t 0 -p 3 -n $5\r"}
expect "$user@*"  {send "echo -n \$\? >> /var/log/trafodion/xdc_checknode2.log\r"}
expect "$user@*"  {send "date\r"}
expect "$user@*"  {send "./xdc_peer_controller -c 0 -t 0 -p 3 -n $6\r"}
expect "$user@*"  {send "echo  \$\? >> /var/log/trafodion/xdc_checknode2.log\r"}
expect "$user@*"  {send "exit\r"}
expect eof
EOF
/usr/bin/expect << EOF
set timeout 300
spawn scp $user@$ip:/var/log/trafodion/xdc_checknode2.log ${TRAF_XDC_LOG}
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect eof
spawn scp $user@$ip:/var/log/trafodion/xdc_peer_controller_pr.log ${TRAF_XDC_LOG}/xdc_peer_controller_pr2.log
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect eof
EOF

}

function CheckNode() {
user=$2
ip=$3
passwd=$4
TRAF_XDC_LOG=$7
/usr/bin/expect << EOF
set timeout 300
spawn ssh $user@$ip
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect "$user@*"  {send "cds\r"}
expect "$user@*"  {send "date\r"}
expect "$user@*"  {send "sqcheck\r"}
expect "$user@*"  {send "echo \$\? >> /var/log/trafodion/xdc_checknode.log\r"}
expect "$user@*"  {send "date\r"}
expect "$user@*"  {send "./xdc_peer_controller -c 0 -t 0 -p 3 -n $5\r"}
expect "$user@*"  {send "echo -n \$\? >> /var/log/trafodion/xdc_checknode.log\r"}
expect "$user@*"  {send "date\r"}
expect "$user@*"  {send "./xdc_peer_controller -c 0 -t 0 -p 3 -n $6\r"}
expect "$user@*"  {send "echo  \$\? >> /var/log/trafodion/xdc_checknode.log\r"}
expect "$user@*"  {send "exit\r"}
expect eof
EOF
/usr/bin/expect << EOF
set timeout 300
spawn scp $user@$ip:/var/log/trafodion/xdc_checknode.log /var/log/trafodion/xdc_peer_controller_pr.log ${TRAF_XDC_LOG}
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect eof
EOF
}

function CheckByNode() {
user=$1
ip=$2
passwd=$3
user1=$4
ip1=$5
passwd1=$6
user2=$7
ip2=$8
passwd2=$9
TRAF_XDC_LOG=${10}
/usr/bin/expect << EOF
set timeout 300
spawn ssh $user@$ip
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect "$user@*"  {send "cds\r"}
expect "$user@*"  {send "ssh $4@$5\r"}
expect "password"  {send "$6\r"}
expect "$user1@*" {send "sqcheck\r"}
expect "$user1@*"  {send "exit \$\? \r"}
expect "$user@*"  {send "echo \$\? >> /var/log/trafodion/xdc_checkbynode.log\r"}
expect "$user@*"  {send "ssh $7@$8\r"}
expect "password"  {send "$9\r"}
expect "$user2@*" {send "sqcheck\r"}
expect "$user2@*"  {send "exit \$\? \r"}
expect "$user@*"  {send "echo \$\? >> /var/log/trafodion/xdc_checkbynode.log\r"}
expect "$user@*"  {send "exit\r"}
expect eof
EOF
/usr/bin/expect << EOF
set timeout 300
spawn scp $user@$ip:/var/log/trafodion/xdc_checkbynode.log ${TRAF_XDC_LOG}
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect eof
EOF

}

function CheckNet() {
tag_num_plus=$[$tag_num+4]
ping=`ping -c $tag_num $1 -W 1 | awk 'NR=='$tag_num_plus' {print $4}'`
if [ ! $ping ];then
ping_rate=0
else
ping_rate=$[$ping*100/$tag_num]
fi
if [ $check_rate -eq 0 ]; then
	check_rate_int=0
	else
		check_rate_int=$check_rate
fi
if [ $ping_rate -gt $check_rate_int ]; then
echo $ping_rate >> /var/log/trafodion/xdc_peer_controller_pr.log
	return 1
elif [ $ping_rate -lt $check_rate_int ]; then
     while [ ${check_time} '>' 0  ]; do
      ping=`ping -c $tag_num $1 -W 1 | awk 'NR=='$tag_num_plus' {print $4}'`
      if [ ! $ping ];then
      ping_rate=0
      else
      ping_rate=$[$ping*100/$tag_num]
      fi
      if [ $ping_rate -lt $check_rate_int ]; then
        let --check_time
        echo "sleep ${circle_time}s"
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo " The network between monitor to $1 is not smooth, check again after ${circle_time}s" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        sleep ${circle_time}s
        continue
	  else
echo $ping_rate >> /var/log/trafodion/xdc_peer_controller_pr.log
        return 1
      fi
     done
echo $ping_rate >> /var/log/trafodion/xdc_peer_controller_pr.log
      return 0
else 
echo $ping_rate >> /var/log/trafodion/xdc_peer_controller_pr.log
    return 1
fi
}

function ConnectNode {
user=$2
ip=$1
passwd=$3
 
/usr/bin/expect << EOF
set timeout 5000
spawn ssh $user@$ip
expect {
"yes/no" {send "yes\r"; exp_continue}
"password:" {send "$passwd\r"}
}
expect "$user@*"  {send "cds\r"}
expect "$user@*"  {send "date\r"}
expect "$user@*"  {send "xdc_peer_down_2 -p \`xdc_peer_list\`\r"}
expect "$user@*"  {send "date '+%Y.%m.%d %X' >> /var/log/trafodion/xdc_peer_controller.log\r"}
expect "$user@*"  {send "echo \"do xdc_peer_down\" >> /var/log/trafodion/xdc_peer_controller.log\r"}
expect "$user@*"  {send "exit\r"}
expect eof
EOF

}


declare -i sleep_time=0 
declare -i check_rate=0
declare -i circle_time=0
declare -i tag_num=0
declare -i check_time=0

let sleep_time=10
let check_rate=1
let check_time=0
let circle_time=5
let tag_num=3
 
while getopts "m:n:hs:t:c:r:p:od" arg
do
    case $arg in
        m)
            parameter=$OPTARG
            ;;
        n) 
            check_net_ip=$OPTARG
            CheckNet $check_net_ip
            exit $?;
            ;;
        s)
            sleep_time=$OPTARG
            ;;    
        t)
            check_time=$OPTARG
            ;;     
        p)
            tag_num=$OPTARG
            ;;     
        c)
            circle_time=$OPTARG
            ;;     
        r)
            check_rate=$OPTARG
            ;;         
        o)
            CheckNode $* 
            exit $?
            ;;
        d)
            CheckNode_2 $*
            exit $?
            ;;
        h)
            Usage;
            exit 1;
            ;;
        *)
            Usage
            exit 1;
esac
done

SetEnv
CutParameter
while [[ true ]]; do
	MonitorToD1& $*
	MonitorToD2& $*
        wait
        echo >> ${TRAF_XDC_LOG}/xdc_peer_controller_pr
            sum=0
           for i in {1..8}
            do
             ping_rate=`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller_pr | awk 'NR=='1' {print $'$i'}'`
             sum=`expr $sum + $ping_rate`
            done
           ping_rate_D1ToD2=`expr $sum / 8`
            sum=0
            for i in {1,2}
            do
             ping_rate=`tail -n $i /var/log/trafodion/xdc_peer_controller_pr.log | awk 'NR=='1' {print $1}'`
             sum=`expr $sum + $ping_rate`
            done
            ping_rate_MToD1=`expr $sum / 2`
            sum=0
            for i in {3,4}
            do
             ping_rate=`tail -n $i /var/log/trafodion/xdc_peer_controller_pr.log | awk 'NR=='1' {print $1}'`
             sum=`expr $sum + $ping_rate`
            done
           ping_rate_MToD2=`expr $sum / 2`

   echo -n  `tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller_MToD1_status` >> ${TRAF_XDC_LOG}/xdc_peer_controller
   echo `tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller_MToD2_status` >> ${TRAF_XDC_LOG}/xdc_peer_controller
   if [ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" = "1111111111111111" ]; then
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo "  INFO,DC1 cluster status is normal, DC2 cluster status is normal, network [normal, success rate: MToD1 $ping_rate_MToD1% MToD2 $ping_rate_MToD2% D1ToD2 $ping_rate_D1ToD2%]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
   elif [ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" = "0000000011111111" ]; then
      CheckByNode $user_d2a $ip_d2a $passwd_d2a $user_d1a $ip_d1a $passwd_d1a $user_d1s $ip_d1s $passwd_d1s ${TRAF_XDC_LOG}
        if [ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_checkbynode.log`" = "0"  ]; then
          echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          echo  "  WARN, DC1 cluster is normal, DC2 cluster is normal, network [Monitor to cluster DC1 network failure, success rate: MToD1 $ping_rate_MToD1%]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        elif [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_checkbynode.log | head -1`" = "0" ]; then
          echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          echo  "  WARN, DC1 cluster is normal, DC2 cluster is normal, network [Monitor to cluster DC1 network failure, success rate: MToD1 $ping_rate_MToD1%]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        else
          echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          echo -n "  ERROR, DC1 cluster failure, DC2 cluster status is normal, network [Monitor to cluster DC1 network failure, success rate: MToD1 $ping_rate_MToD1% D1ToD2 0]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          starttime=`date +'%Y-%m-%d %H:%M:%S'`          
          ConnectNode $ip_d2a $user_d2a $passwd_d2a
          endtime=`date +'%Y-%m-%d %H:%M:%S'`
          start_seconds=$(date --date="$starttime" +%s);
          end_seconds=$(date --date="$endtime" +%s);
          echo "  Automatically switch to DC2 cluster  RTO "$((end_seconds-start_seconds))"s  " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          AfterSwitch $ip_d2a $user_d2a $passwd_d2a ${TRAF_XDC_LOG}
        fi
    elif [ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" = "1111111100000000" ]; then
      CheckByNode $user_d1a $ip_d1a $passwd_d1a $user_d2a $ip_d2a $passwd_d2a $user_d2s $ip_d2s $passwd_d2s ${TRAF_XDC_LOG}
        if [ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_checkbynode.log`" = "0"  ]; then
          echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          echo  "  WARN, DC1 cluster is normal, DC2 cluster is normal, network [Monitor to cluster DC2 network failure, success rate: MToD2 $ping_rate_MToD2%]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        elif [ "`tail -n 2 ${TRAF_XDC_LOG}/xdc_checkbynode.log | head -1`" = "0" ]; then
          echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          echo  "  WARN, DC1 cluster is normal, DC2 cluster is normal, network [Monitor to cluster DC2 network failure, success rate: MToD2 $ping_rate_MToD2%]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        else
          echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          echo "  ERROR, DC1 cluster is normal, DC2 cluster is faulty, network [Monitor to cluster DC2 network failure, success rate: MToD2 $ping_rate_MToD2% D1ToD2 0]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          starttime=`date +'%Y-%m-%d %H:%M:%S'`
          ConnectNode $ip_d1a $user_d1a $passwd_d1a
          endtime=`date +'%Y-%m-%d %H:%M:%S'`
          start_seconds=$(date --date="$starttime" +%s);
          end_seconds=$(date --date="$endtime" +%s);
          echo "  Automatically switch to DC1 cluster ,RTO  "$((end_seconds-start_seconds))"s " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
          AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
        fi
   elif [ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" = "0000000011001100" ]; then
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, DC1 cluster failure, DC2 cluster is normal, network [Monitor to cluster DC1 network failure, success rate: MToD1 0 D1ToD2 0 ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
   	    starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d2a $user_d2a $passwd_d2a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC2 cluster  RTO "$((end_seconds-start_seconds))"s " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d2a $user_d2a $passwd_d2a ${TRAF_XDC_LOG}
   elif [ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" = "1100110000000000" ]; then
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, DC1 cluster is normal, DC2 cluster is faulty, network [Monitor to cluster DC2 network failure, success rate: MToD2 0 D1ToD2 0 ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d1a $user_d1a $passwd_d1a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC1 cluster RTO  "$((end_seconds-start_seconds))"s" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
   elif [[ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" == 10111011* ]]; then
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, DC1 cluster failure, DC2 cluster is normal, network [normal, success rate: MToD1 $ping_rate_MToD1% MToD2 $ping_rate_MToD2% D1ToD2 $ping_rate_D1ToD2%]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d2a $user_d2a $passwd_d2a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC2 cluster  RTO "$((end_seconds-start_seconds))"s " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d2a $user_d2a $passwd_d2a ${TRAF_XDC_LOG}
   elif [[ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" == *10111011 ]]; then
   	    echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, DC1 cluster is normal, DC2 cluster is faulty, network [normal, success rate: MToD1 $ping_rate_MToD1% MToD2 $ping_rate_MToD2% D1ToD2 $ping_rate_D1ToD2%]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d1a $user_d1a $passwd_d1a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC1 cluster RTO  "$((end_seconds-start_seconds))"s" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
   elif [[ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" == 10001100* ]]; then
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log 
        echo -n "  ERROR, network [cluster 1 disconnected from cluster 2 network, success rate: MToD1 $ping_rate_MToD1 D1ToD2 0 ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d1a $user_d1a $passwd_d1a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC1 cluster RTO  "$((end_seconds-start_seconds))"s" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
   elif [[ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" == 11001000* ]]; then
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, network [cluster 1 disconnected from cluster 2 network, success rate: MToD1 $ping_rate_MToD1 D1ToD2 0 ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d1a $user_d1a $passwd_d1a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC1 cluster RTO  "$((end_seconds-start_seconds))"s" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
   elif [[ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" == 11001100* ]]; then
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, network [cluster 1 disconnected from cluster 2 network, success rate: MToD1 $ping_rate_MToD1 D1ToD2 0 ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d1a $user_d1a $passwd_d1a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC1 cluster RTO  "$((end_seconds-start_seconds))"s" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
   elif [[ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" == *10001100 ]]; then 
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, Network [Cluster 2 disconnected from cluster 1 network, success rate: MToD2 $ping_rate_MToD2 D1ToD2 0 ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d1a $user_d1a $passwd_d1a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC2 cluster  RTO "$((end_seconds-start_seconds))"s " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
   elif [[ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" == *11001000 ]]; then 
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, Network [Cluster 2 disconnected from cluster 1 network, success rate: MToD2 $ping_rate_MToD2 D1ToD2 0 ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d1a $user_d1a $passwd_d1a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC2 cluster  RTO "$((end_seconds-start_seconds))"s "
        AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
   elif [[ "`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller `" == *11001100 ]]; then 
        echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        echo -n "  ERROR, Network [Cluster 2 disconnected from cluster 1 network, success rate: MToD2 $ping_rate_MToD2 D1ToD2 0 ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        starttime=`date +'%Y-%m-%d %H:%M:%S'`
        ConnectNode $ip_d1a $user_d1a $passwd_d1a
        endtime=`date +'%Y-%m-%d %H:%M:%S'`
        start_seconds=$(date --date="$starttime" +%s);
        end_seconds=$(date --date="$endtime" +%s);
        echo "  Automatically switch to DC2 cluster  RTO "$((end_seconds-start_seconds))"s " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
        AfterSwitch $ip_d1a $user_d1a $passwd_d1a ${TRAF_XDC_LOG}
    else
      echo -n `date '+%Y.%m.%d %X'` >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
      echo -n "  WARN ," >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
      VAR="`tail -n 1 ${TRAF_XDC_LOG}/xdc_peer_controller`"
      for (( i = 0; i < 16; i++ )); do
            b=${VAR:$i:1}
            if [ "$b" = "0" ];then
            case $i in
            0)
            echo -n " Network [Monitor to cluster DC1 network failure ] " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            i=3
            ;;
            1)
            echo -n " DC1 cluster [master node: fault], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            2)
            echo -n " Network [DC1 master node to DC2 master node failure], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            3)
            echo -n " Network [DC1 master node to DC2 standby node failure], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            4)
            echo -n " Network [Monitor to cluster DC1 network failure ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            i=7
            ;;
            5)
            echo -n " DC1 cluster [standby node: fault], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            6)
            echo -n " Network [DC1 standby node to DC2 master node failure], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            7)
            echo -n " Network [DC1 standby node to DC2 standby node failure], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            8)
            echo -n " Network [Monitor to cluster DC2 network failure ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            i=11
            ;;
            9)
            echo -n " DC2 cluster [master node: fault], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            10)
            echo -n " Network [DC2 master node to DC1 master node failure], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            11)
            echo -n " Network [DC2 master node to DC1 standby node failure], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            12)
            echo -n " Network [Monitor to cluster DC2 network failure ]" >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            i=16
            ;;
            13)
            echo -n " DC1 cluster [standby node: fault], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            14)
            echo -n " Network [DC2 standby node to DC1 master node failure], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            15)
            echo -n " Network [DC2 standby node to DC1 standby node failure], " >> ${TRAF_XDC_LOG}/xdc_peer_controller.log
            ;;
            esac
       fi
       done
       echo >> ${TRAF_XDC_LOG}/xdc_peer_controller.log

   fi
     echo "sleep ${sleep_time}s "
    sleep ${sleep_time}s
    done
