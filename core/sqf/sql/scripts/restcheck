#!/bin/bash
# @@@ START COPYRIGHT @@@ 
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# @@@ END COPYRIGHT @@@

restserver_node=`hostname -f`
restserver_protocol="http"

tmprest=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp restcheck_tmprest_XXXXXXX`
if [[ $? != 0 ]]; then
    echo "Error while getting a temporary file for $tmprest. Exiting."
    exit 3
fi

cat <<EOF > $TRAF_VAR/restsite
import os
from xml.dom import minidom

restconfig_dir = os.environ.get('REST_CONF_DIR')
if not restconfig_dir:
   name = os.environ.get('REST_INSTALL_DIR')
   restconfig_dir=name+"/conf"
doc = minidom.parse(restconfig_dir+"/rest-site.xml")
props = doc.getElementsByTagName("property")
for prop in props:
      tagName = prop.getElementsByTagName("name")[0]
      pname=tagName.childNodes[0].data
      tagValue = prop.getElementsByTagName("value")[0]
      pvalue=tagValue.childNodes[0].data
      print("%s:%s" % (pname,pvalue))
EOF

chmod +x $TRAF_VAR/restsite
restserver_ssl_pwd=`python ${TRAF_VAR}/restsite| grep "^rest.ssl.password:"| cut -f2 -d":"`
if [[ ! -z $restserver_ssl_pwd ]]; then
   restserver_port=`python ${TRAF_VAR}/restsite| grep "^rest.https.port:"| cut -f2 -d":"`
   restserver_protocol="https"
else
   restserver_port=`python ${TRAF_VAR}/restsite| grep "^rest.port:"| cut -f2 -d":"`
   restserver_protocol="http"
fi

edb_pdsh -a "node_sqcheck |egrep 'RestServer'" 2>/dev/null > $tmprest

actual_restserver_cnt=`cat $tmprest | awk '{if ($3==0) k=0;else k=$3;cnt+=k} END {print cnt}'` 
restserver_node=`cat $tmprest | awk '{if ($3>0) print $1}' |cut -d":" -f1 |paste -sd ' ' -`

rm -rf $TRAF_VAR/restsite $tmprest

echo
if [[ $actual_restserver_cnt > 0 ]]; then
   if [[ -z $restserver_port ]]; then
       restserver_port=4200
       restserver_protocol="http"
   fi
   echo "TrafodionRest listen port      : $restserver_port ($restserver_protocol)"
   echo "TrafodionRest is up on node(s) : "$restserver_node
   echo
fi

echo -e "Process\t\tActual\t"
echo -e "---------\t------\t"
echo -e "TrafodionRest\t$actual_restserver_cnt\t"
echo

