#!/bin/bash
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2019 Esgyn Corportation
#
# @@@ END COPYRIGHT @@@
#

# The new xdc_compare_ddl script by Li Liu has the following changes,
#
# 1) instead of `get_synchronous_tables_without_namespace`, use different SQL statement to retrive the DDL (excludes
#     the index table), and this drops the number of tables to compare from 3688 to 1886
# 2) start 15 trafci sessions to execute the sql statement in paralle (instead of 1 sqlci session)
# 3) since the script uses traci, it needs to have args on username and password, so the usage syntax becomes
#         xdc_compare_ddl user_name user_passwd
#
# Note. the original xdc_compre_ddl is renamed to xdc_compare_ddl_local for the env without DCS configured 

function Usage {

    echo 
    echo "Usage: `basename $0` [ -i <nn> | -d <nn> | -n | -h | -v ]"
    echo "Usage: xdc_compare_ddl user_name user_passwd"
    echo
    PrintScriptPurpose
    echo
    echo "-i <nn>  Number of times the check will be done (Default 1)"
    echo "-d <nn>  Duration of sleep (in seconds) between each check"
    echo "-n       Notify when the DDLs do not match. Send the"
    echo "         notification email to the recipients listed in the file"
    echo "         ${lv_to_list_file}"
    echo
    echo "-h       Help"
    echo "-v       Verbose"
    echo
}

function PrintScriptPurpose {
    echo "This script compares the DDLs of synchronous tables across the XDC clusters."
}

function PrintHeader {

    echo
    echo -n "- "
    PrintScriptPurpose
    echo -n "- Based on the parameters, this script will execute"
    if [ ${lv_num_provided} '==' 1 ]; then
	echo -n " a total of ${lv_num_checks} time"
	if [ ${lv_num_checks} '>' 1 ]; then
	    echo -n "s"
	else
	    lv_sleep=0
	fi
    else 
	if ( [ ${lv_num_checks} '==' 1 ] && [ ${lv_sleep} '==' 0 ] ); then
	    echo -n " a total of ${lv_num_checks} time"
	    lv_num_provided=1
	else
	    echo -n " continously"
	fi
    fi
    if [ ${lv_sleep} '>' 0 ]; then
	echo -n " every ${lv_sleep} seconds"
    fi
    echo "."
    if [ ${lv_notification} '==' 1 ]; then
	echo "- Will send a notification email if the DDLs do not match."
    fi
    echo

}

function SendNotification {

    lv_peer_id=$1
    lv_subject="EsgynDB_XDC_DDL_Mismatch"
    lv_curr_time=`date +%Y%m%d_%H%M%S`;
    lv_body_file=${TRAF_LOG}/xdc_compare_ddl.notification.email.${lv_curr_time}
    echo "`date`" > ${lv_body_file}
    echo "DDLs of synchronous tables on peer ids: ${1} and ${2} do not match" >> ${lv_body_file}
    echo "Send notification via: edb_sendmail -t ${lv_to_list_file} -s $lv_subject -b ${lv_body_file}"
    edb_sendmail -t ${lv_to_list_file} -s $lv_subject -b ${lv_body_file}

}

function CheckXDCStatus {
	date
	echo ">>>>>> check status of XDC <<<<<<"
        sup=`xdc -list | grep sup | wc -l`
		echo "sup=${sup}"
        sdn=`xdc -list | grep sdn | wc -l`
		echo "sdn=${sdn}"
        if [ ${sup} '==' 2 ]  &&  [ ${sdn} '==' 0 ]; then
        xdc -list
        echo "======xcd status normal======"
        fi

        if [ ${sup} -lt 2 ] || [ ${sdn} -gt 0 ]; then
        echo "xcd status abnormal ,please check xdc status!"
        exit 0
        fi
}

function RunShowDDL_old {

    lv_peer_id=$1
    if [ ${lv_verbose} '==' 1 ]; then
	echo "Getting the list of synchronous tables on peer id: ${lv_peer_id}"
    fi

    export CONNECT_TO_XDC_PEER_ID=${lv_peer_id}
    lv_synchronous_tables=`get_synchronous_tables_without_namespace`
    if [ ${lv_verbose} '==' 1 ]; then
	echo "List of synchronous tables: "
	echo ${lv_synchronous_tables}
	echo
    fi

    lv_xdc_ddl_in=${lv_ddl_in_prefix}${lv_peer_id}
    lv_xdc_ddl_out=${lv_ddl_out_prefix}${lv_peer_id}
    echo "-- Get the DDL of the synchronous tables" > ${lv_xdc_ddl_in}
    echo "" >> ${lv_xdc_ddl_in}
    for lv_table in ${lv_synchronous_tables} ; do
	echo "showddl ${lv_table} ; " >> ${lv_xdc_ddl_in}
    done
    
    if [ ${lv_verbose} '==' 1 ]; then
	echo "Executing: sqlci -i ${lv_xdc_ddl_in} > ${lv_xdc_ddl_out}"
    fi
    sqlci -i ${lv_xdc_ddl_in} > ${lv_xdc_ddl_out}

}

# NEW RunShowDDL
function RunShowDDL {
	date
	echo ">>>>>> Get DDL Of Cluster $1 >>>>>>"
	
	dcs_master_hostname=`xdc -get $1 | awk -F':' '{print $2}'| sed 's/,/\n/g' | grep $1`
	#echo "dcs_master_hostname=$dcs_master_hostname"
	dcs_master_ip=$(sshpass -p ${passwd} ssh ${user}@$dcs_master_hostname dcscheck | grep "Active DcsMaster"|awk '{print $4}')
	#dcs_master_ip=`grep $dcs_master_hostname /etc/hosts | awk -F' ' '{print $1}'`
	echo "dcs_master_ip=$dcs_master_ip"

	trafci.sh -h ${dcs_master_ip} -u ${user} -p ${passwd} -q 'select * from dual;'
	if [ $? -ne 0 ]; then
		echo "User or password error, please enter the correct user and password."
		exit 0
	else
		echo "user and passwd is true"
	fi
	
    c_num=15  #sqlci concurrency (Concurrency must be less than 100)
	c_num1=`expr ${c_num} - 1`
	echo "c_num=${c_num},c_num1=${c_num1}"
	lv_peer_id=$1
	echo "lv_peer_id=${lv_peer_id}"
	
    if [ ${lv_verbose} '==' 1 ]; then
	echo "Getting the list of synchronous tables on peer id: ${lv_peer_id}"
    fi

    export CONNECT_TO_XDC_PEER_ID=${lv_peer_id}
	
    #lv_synchronous_tables_back=`get_synchronous_tables_without_namespace | grep -v IDX | grep -v INDEX | grep -v IDEX` #Index elimination
echo "lv_synchronous_tables start"
	lv_synchronous_tables=`echo -e "select CATALOG_NAME||'.'||SCHEMA_NAME||'.'||OBJECT_NAME all_table from \"_MD_\".OBJECTS where OBJECT_TYPE = 'BT' and SCHEMA_NAME not like '/_%/_' escape '/' and OBJECT_NAME NOT IN ('SB_HISTOGRAMS','SB_HISTOGRAM_INTERVALS','SB_PERSISTENT_SAMPLES') order by all_table;\n exit;" | trafci.sh  -h ${dcs_master_ip} -u ${user} -p ${passwd}  | grep TRAFODION `
	
echo "lv_synchronous_tables complete"
    if [ ${lv_verbose} '==' 1 ]; then
	echo "List of synchronous tables: "
	echo ${lv_synchronous_tables}
	echo
    fi

    lv_xdc_ddl_in=${lv_ddl_in_prefix}${lv_peer_id}
    lv_xdc_ddl_out=${lv_ddl_out_prefix}${lv_peer_id}
    echo "-- Get the DDL of the synchronous tables" > ${lv_xdc_ddl_in}
    echo "" >> ${lv_xdc_ddl_in}
echo "make showddl sql start"
    for lv_table in ${lv_synchronous_tables} ; do
	echo "showddl ${lv_table} ; " >> ${lv_xdc_ddl_in}
    done
echo "make showddl sql complete"
	
	# add file split shell
	split_table=`cat ${lv_xdc_ddl_in} | wc -l` 
	echo "${split_table}"
	split_table_num=`expr ${split_table} / ${c_num} + 1`
	echo "$split_table_num"
	rm -rf ${lv_xdc_ddl_in}0*
	echo "split -l ${split_table_num} ${lv_xdc_ddl_in} -d -a 2 ${lv_xdc_ddl_in}"    
	split -l ${split_table_num} ${lv_xdc_ddl_in} -d -a 3 ${lv_xdc_ddl_in}
	
	for ((i=0;i<=${c_num1};i++));do
	{
		sleep 1;
		if [[ ${i} -lt 10 ]];then
			echo "execute:echo "exit\;" >> ${lv_xdc_ddl_in}00${i}"
			echo "exit;" >> ${lv_xdc_ddl_in}00${i}
		else
			echo "execute:echo "exit\;" >> ${lv_xdc_ddl_in}0${i}"
			echo "exit;" >> ${lv_xdc_ddl_in}0${i}
		fi 
	} &
	done
	
	wait #wait exit add in ddl_in file 
	
    if [ ${lv_verbose} '==' 1 ]; then
	echo "Executing: sqlci -i ${lv_xdc_ddl_in} > ${lv_xdc_ddl_out}"
    fi
	
	# add sqlci concurrency shell
	date
	rm -rf ${lv_xdc_ddl_out}0*
	for ((i=0;i<=${c_num1};i++));do
	{
		sleep 1;
		#echo "i=${i}"

		if [[ ${i} -lt 10 ]];then
			#echo "execute:sqlci -i ${lv_xdc_ddl_in}0${i} > ${lv_xdc_ddl_out}0${i}"
			#sqlci -i ${lv_xdc_ddl_in}00${i} > ${lv_xdc_ddl_out}00${i}
			echo "execute:trafci.sh -h ${dcs_master_ip} -u ${user} -p ${passwd} -s ${lv_xdc_ddl_in}00${i} > ${lv_xdc_ddl_out}00${i}"
			trafci.sh -h ${dcs_master_ip} -u ${user} -p ${passwd} -s ${lv_xdc_ddl_in}00${i} > ${lv_xdc_ddl_out}00${i}
		else
			#echo "execute:sqlci -i ${lv_xdc_ddl_in}${i} > ${lv_xdc_ddl_out}${i}"
			#sqlci -i ${lv_xdc_ddl_in}0${i} > ${lv_xdc_ddl_out}0${i}
			echo "execute:trafci.sh -h ${dcs_master_ip} -u ${user} -p ${passwd} -s ${lv_xdc_ddl_in}0${i} > ${lv_xdc_ddl_out}0${i}"
			trafci.sh -h ${dcs_master_ip} -u ${user} -p ${passwd} -s ${lv_xdc_ddl_in}0${i} > ${lv_xdc_ddl_out}0${i}
		fi
	} &
	done
	wait  #wait sqlci execute complete
	date
	echo "sqlci execute complete"
	
	# add merge out file shell
	date
	echo "merge ${lv_xdc_ddl_out}"
	echo '' > ${lv_xdc_ddl_out}
	for ((i=0;i<=${c_num1};i++));do
	{
		sleep 1;
		if [[ ${i} -lt 10 ]];then
			echo "execute:cat ${lv_xdc_ddl_out}0${i} >> ${lv_xdc_ddl_out}"
			cat ${lv_xdc_ddl_out}00${i} >> ${lv_xdc_ddl_out}
		else
			echo "execute:cat ${lv_xdc_ddl_out}${i} >> ${lv_xdc_ddl_out}"
			cat ${lv_xdc_ddl_out}0${i} >> ${lv_xdc_ddl_out}
		fi
	}
	done
	date
}


function CompareDDL {
    date
    echo ">>>>>> Compare DDL Of Two Clusters >>>>>>"

    lv_peer_1=$1
    lv_peer_2=$2
    lv_xdc_ddl_out_1=${lv_ddl_out_prefix}${lv_peer_1}
    lv_xdc_ddl_out_2=${lv_ddl_out_prefix}${lv_peer_2}
    
    if [ ${lv_verbose} '==' 1 ]; then
	echo "Performing the diff: diff -C 0 -p ${lv_xdc_ddl_out_1} ${lv_xdc_ddl_out_2}"
    fi
    diff -C 0 -p -I "^Connecting to the XDC Peer ID:" ${lv_xdc_ddl_out_1} ${lv_xdc_ddl_out_2} 
    return $?

}

function PrintResult {

    date
    if [ $1 '!=' 0 ]; then
	echo -n "Found differences in the DDLs of the synchronous tables between local and peers: "
	echo -n "${lv_my_cluster_id}"
	echo -n " and ${lv_peer}"
	echo
	echo "The different DDL between two clusters are shown in the above log, please check"
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    else 
	echo -n "The DDLs of the synchronous tables between local and peers: "
	echo -n "${lv_my_cluster_id}"
        echo -n " and ${lv_peer}"
    fi
    #echo -n "${lv_my_cluster_id}"
    #echo -n " and ${lv_peer}"
    if [ $1 '==' 0 ]; then
	echo -n " are identical"
	echo
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    fi
 
    echo "The DDL output files are here:"
    echo -e "This cluster\t: ${lv_ddl_out_prefix}${lv_my_cluster_id}"
    echo -e "Peer id ${lv_peer}\t: ${lv_ddl_out_prefix}${lv_peer}"

}

declare -i lv_sleep=0
declare -i lv_num_checks=1
declare -i lv_num_provided=0
declare -i lv_verbose=0
declare -i lv_my_cluster_id=0


user=$1
passwd=$2
#echo "user=$user"
#echo "passwd=$passwd"
if [ ! $user ] || [ ! $passwd ] ; then
  echo "user or passwd is null ,please import user_name or user_passwd of trafci."
  echo "Usage: xdc_compare_ddl user_name user_passwd"
  exit 0
fi

CheckXDCStatus

lv_ddl_in_prefix="${TRAF_LOG}/xdc_ddl_in.peer."
lv_ddl_out_prefix="${TRAF_LOG}/xdc_ddl_out.peer."

let lv_sleep=0
let lv_num_checks=1
let lv_num_provided=0
let lv_notification=0
lv_to_list_file=${TRAF_CONF}/xdc_compare_ddl.notify_recipients

while getopts "d:hi:nqvx" arg
do
    case $arg in
	d)
            lv_sleep=${OPTARG}
            ;;
	i)
            let lv_num_provided=1
            lv_num_checks=${OPTARG}
            ;;
	n)
            lv_notification=1
	    ;;
	q)
            lv_verbose=0
	    ;;
	v)
            lv_verbose=1
	    ;;
	h)
	    Usage;
	    exit 1;
	    ;;
	*)
	    Usage;
	    exit 1;
	    ;;
    esac
done

PrintHeader

lv_my_cluster_id=`xdc -getmyid`
if [ $? '!=' 0 ]; then
    echo "Error getting my cluster id. Please check the health of the local HBase instance."
    exit 1
fi

if [ ${lv_verbose} '==' 1 ]; then
    echo "My cluster id: ${lv_my_cluster_id}"
fi

if [ ${lv_notification} '==' 1 ]; then
    if [ ! -f ${lv_to_list_file} ]; then
	echo "The file containing the notification email recipients: ${lv_to_list_file} does not exist."
	echo "Exitting..."
	exit 1 ;
    fi
fi

while [ ${lv_num_checks} '>' 0 ]; do
    echo "======== `date` ========"

    lv_peers=`xdc_peer_list`
    lv_ret=$?
    if [[ ${lv_ret} != 0 ]]; then
	echo ${lv_peers}
	exit 1;
    fi
    
    if [ ${#lv_peers} '<' 1 ]; then
	echo "Did not find any peer. "
	exit 1
    fi
echo "==1== start RunShowDDL ${lv_my_cluster_id}"
date
    RunShowDDL ${lv_my_cluster_id}
echo "==1== complete RunShowDDL ${lv_my_cluster_id}"    
date

    for lv_peer in $lv_peers; do
	if [ ${lv_verbose} '==' 1 ]; then
	    echo "Checking the status of peer: ${lv_peer}"
	fi
echo "start hbcheck -p ${lv_peer} $* >/dev/null"
	hbcheck -p ${lv_peer} $* >/dev/null 
echo "complete hbcheck -p ${lv_peer} $* >/dev/null"
	lv_ret=$?
echo "lv_ret=${lv_ret}"
	if [[ ${lv_ret} == 0 ]]; then
echo "==2== start RunShowDDL ${lv_peer}"
date
	    RunShowDDL ${lv_peer}
echo "==2== complete RunShowDDL ${lv_peer}"
date
echo "==3== start CompareDDL ${lv_my_cluster_id} ${lv_peer}"
date
	    CompareDDL ${lv_my_cluster_id} ${lv_peer}
lv_ret=$?
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo "DDL Of Synchronous Tables Are Completed between Cluster ${lv_my_cluster_id} and Clsuter ${lv_peer}"
#date
	    #lv_ret=$?
	    if [ $lv_ret '!=' 0 ]; then
		PrintResult ${lv_ret}
		if [ ${lv_notification} '==' 1 ]; then
		    SendNotification ${lv_my_cluster_id} ${lv_peer}
		fi
		exit ${lv_ret}
	    else
		PrintResult ${lv_ret}
	    fi
	else 
	    echo "Error: Cannot access peer: ${lv_peer}. Exitting..."
	    exit 1
	fi
    done
    
    if [ ${lv_num_provided} '==' 1 ]; then
	let --lv_num_checks
    fi

    if [ ${lv_num_checks} '>' 0 ]; then
	if [ $lv_sleep '>' 0 ]; then
	    sleep ${lv_sleep}
	fi
    fi

done
echo "======== `date` ========"
exit 0
