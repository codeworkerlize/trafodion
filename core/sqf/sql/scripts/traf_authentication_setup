#!/bin/bash

# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@

#==============================================================================
# script: traf_authentication_setup
#
# This script is run to setup authentication for Trafodion.
# You can turn on authentication, turn off authentication, or get the status
# It is off by default when the software is installed
#
# To turn on authentication, specify:
#    --setup or --on
#    --file <name> (OPTIONAL) 
#        ==> specifies the name of the ldap configuration file that
#            will be used to contact the identity store
#            defaults to:  $TRAF_VAR/.traf_authentication_config 
#
#   When specifying --setup or --on, the script:
#      ==> verifies that the configuration file exists
#      ==> calls ldapconfigcheck to verify the contents of the config file
#      ==> calls ldapcheck to test a connection to LDAP
#      ==> if all is good then:
#         ==> sets the environment variable TRAFODION_ENABLE_AUTHENTICATION to
#             YES in $TRAF_HOME/sqenvcom.sh
#         ==> copies $TRAF_HOME/sqenvcom.sh to all nodes in cluster
#         ==> propagates $TRAF_VAR/.traf_authentication_config to
#             all nodes in the cluster
#
#   When specifying --on 
#     ==> brings up sqlci and performs "initialize authorization"
#
# To turn off authentication specify:
#    --off
#
#   When specifying --off, the script:
#      ==> sets the environment variable TRAFODION_ENABLE_AUTHENTICATION = YES
#          in $TRAF_HOME/sqenvcom.sh
#      ==> copies $TRAF_HOME/sqenvcom.sh to all nodes in cluster
#
# To know whether authentication is enable or not, specify:
#    -- status
#
#  When specifying --status, the script returns the value of:
#     TRAFODION_ENABLE_AUTHENTICATION
#===============================================================================

function print_usage {
cat << EOF

This script enables or disables security features for Trafodion

Usage: $(basename $0) [options]

Options:
    --file <loc>  Optional location of OpenLDAP configuration file
    --help        Prints this message
    --local       Switch the configuration to LOCAL.
    --ldap        Switch the configuration to LDAP.
    --nopass      Use Not-password LOCAL authentication. Only works with --local
    --check       check for user auth password status
    --setup       Enables authorization
    --setoff      Disables authorization
    --status      Returns type of authentication

EOF
}

# =============================================================================
# function: change_msenv
#
# This function adjusts the msenv file by changing the envvar:
#    TRAFODION_ENABLE_AUTHENTICATION to either YES (--on) or NO (--off)
# =============================================================================
function change_msenv 
{
  if [ ! -s $TRAF_VAR/ms.env ];then
    echo "WARN: $TRAF_VAR/ms.env is not exists"
    exit 0
  fi
  echo "INFO: Modifying ms.env to adjust the authentication default"
  if [ $authLDAP == 1 ]; then
    type="LDAP"
    echo "INFO: LDAP authentication has been enabled"
  else
    if [ $authNopass == 1 ]; then
        type="SKIP_AUTHENTICATION"
    else
        type="LOCAL"
    fi
    echo "INFO: Local authentication has been enabled"
  fi
  sed -i "/^TRAFODION_AUTHENTICATION_TYPE*.*/d" $TRAF_VAR/ms.env
  echo "TRAFODION_AUTHENTICATION_TYPE=${type}" >>$TRAF_VAR/ms.env
  #genms
  sed -i "/^echo TRAFODION_AUTHENTICATION_TYPE*.*/d" $TRAF_HOME/sql/scripts/genms
  echo "echo TRAFODION_AUTHENTICATION_TYPE=${type}" >>$TRAF_HOME/sql/scripts/genms
}

# =============================================================================
# function setup_config
#
# This function determines the configuration file name and makes sure the 
# configuration file is valid
# =============================================================================
function setup_config 
{
  # Check to see if the passed in name is a directory, if so then
  # attach the configuration file name to create a complete location
  if [ -d $configFile ]; then
    configFile=$configFile$defaultConfigFile
  fi

  # Does the configuration file exist?
  if [ ! -s $configFile ]; then
    echo
    echo "ERROR: Configuration file $configFile does not exist."
    echo
    exit 1;
  fi

  echo "INFO: Using configuration file $configFile"
  
  # make sure the configuration file is valid
  ldapconfigcheck -file $configFile > auth_configcheck
  isValid=`/bin/cat auth_configcheck | grep -e "is valid" | wc -l`
  if [ $isValid -ne 1 ]; then
    echo
    echo "***ERROR: Configuration file is invalid, check file params"
    cat auth_configcheck
    echo
    exit 2
  fi
  rm auth_configcheck

  echo "INFO: Configuration file is valid"
}

# =============================================================================
# function copy_config
#
# This function makes sure the configuration file can be used to contact LDAP
# then it copies the configuration file to all the nodes in the cluster
# =============================================================================
function copy_config
{
  if [ "$configFile" != "$defaultConfigFileDir$defaultConfigFile" ]; then
    cp $configFile $defaultConfigFileDir$defaultConfigFile
  fi

  # before propagating the configuration file to nodes in the cluster, verify 
  # that the current file can successfully contact the identity store
  ldapcheck --username=micky.mouse > auth_configcheck
  isValid=`cat auth_configcheck | grep "(Invalid username/groupname or password)" | wc -l`
  if [ $isValid -ne 1 ]; then
    echo
    echo "***ERROR: Configuration file is invalid, error contacting LDAP server"
    cat auth_configcheck
    echo
    exit 2
  fi
  rm auth_configcheck

  # copy the configuration file to $TRAF_VAR on
}

# =============================================================================
# function enable_authorization
#
# this functions calls sqlci to enable authorization
# =============================================================================
function enable_authorization
{
  logLoc=$TRAF_LOG
  rm $logLoc/authEnable.log > /dev/null 2>&1
  #gdb sqlci
  sqlci >> "$logLoc/authEnable.log" 2>&1 <<eof
   values (current_timestamp);
   initialize authorization;
   get tables in schema privmgr_md;
   get users;
   get roles;
   get components;
   exit;
eof
  errorRows=`/bin/cat $logLoc/authEnable.log | /bin/grep "\*\*\* ERROR" | wc -l`
  if [ $errorRows -ne 0 ]; then
    echo "ERROR: Authorization setting have not changed, see $logLoc/authEnable.log"
  else
    echo "INFO: Authorization (grant/revoke support) has been enabled"
  fi
}

# =============================================================================
# function disable_authorization
#
# this functions calls sqlci to disable authorization
# =============================================================================
function disable_authorization
{
  logLoc=$TRAF_LOG
  rm $logLoc/authDisable.log > /dev/null 2>&1
  sqlci >> "$logLoc/authDisable.log" 2>&1 <<eof
   values (current_timestamp);
   initialize authorization, drop;
   get tables in schema privmgr_md;
   get users;
   get roles;
   exit;
eof
  errorRows=`/bin/cat $logLoc/authDisable.log | /bin/grep "\*\*\* ERROR" | wc -l`
  if [ $errorRows -ne 0 ]; then
    echo "ERROR: Authorization settings have not changed, see $logLoc/authDisable.log"
  else
    echo "INFO: Authorization (grant/revoke support) has been disabled"
  fi
}

# =============================================================================
# function check_authentication
#
# this functions calls sqlci to check for user auth password status
# =============================================================================
function check_authentication
{
  logLoc=$TRAF_LOG
  rm $logLoc/authCheck.log > /dev/null 2>&1
  #gdb sqlci
  sqlci >> "$logLoc/authCheck.log" 2>&1 <<eof
   values (current_timestamp);
   initialize authentication;
   exit;
eof
  errorRows=`/bin/cat $logLoc/authCheck.log | /bin/grep "\*\*\* ERROR" | wc -l`
  if [ $errorRows -ne 0 ]; then
    echo "ERROR: Unknown error occurs, see $logLoc/authCheck.log"
  else
    echo "INFO: checking for user auth password has been done"
  fi
}


# =============================================================================
# function status_authorization
#
# this functions calls sqlci to see if the schema containing authorization
# data exists (PRIVMGR_MD)
# =============================================================================
function status_authorization
{
  logLoc=$TRAF_LOG
  rm $logLoc/authStatus.log > /dev/null 2>&1
  sqlci >> "$logLoc/authStatus.log" 2>&1 <<eof
   values (current_timestamp);
   get schemas, no header;
   exit;
eof
  errorRows=`/bin/cat $logLoc/authStatus.log | /bin/grep "\*\*\* ERROR" | wc -l`
  if [ $errorRows -ne 0 ]; then
    echo "   Unable to determine authorization status, see $logLoc/authStatus.log"
  else
    privMgrSchema=`/bin/cat $logLoc/authStatus.log | /bin/grep "PRIVMGR_MD" | wc -l`
    if [ $privMgrSchema -eq 0 ]; then
      echo "   Authorization (grant/revoke) is NOT ENABLED"
    else
      echo "   Authorization (grant/revoke) is ENABLED"
    fi
  fi
}


# =============================================================================
# main
# =============================================================================

defaultConfigFileDir="$TRAF_CONF"
defaultConfigFile="/.traf_authentication_config"
configFileDir=$defaultConfigFileDir
configFile=$defaultConfigFileDir$defaultConfigFile
authLDAP=0
authLocal=0
authNopass=0
doCheck=0
enableAuthorization=0
disableAuthorization=0
fileSpecified=0
statusSpecified=0

# Make sure required env vars have been set first
if [[ -z "$TRAF_HOME" ]]; then
    echo
    echo "***ERROR: Environment variable TRAF_HOME has no value."
    echo
    exit 1
fi

if [ $# == 0 ]; then
    echo
    print_usage
    exit 0
fi

# Parse input parameters
while [[ $# -gt 0 ]]; do
    case "$1" in
        -f | --file)
            if [[ -z "$2" ]]; then
                echo
                echo "***ERROR: No filename specified for param $1."
                print_usage
                exit 1
            fi
            if [ $fileSpecified -eq 1 ]; then
              echo
              echo "***ERROR: Option $1 specified more than once."
              print_usage
              exit 1
            fi
            fileSpecified=1 
            configFile=$2
            shift
            ;;

        -h | --help)
            print_usage
            exit 0
            ;;
        --local)
            if [[ $authLocal -eq 1 ]]; then
                echo
                echo "***ERROR: Option $1 specified more than once."
                print_usage
                exit 1
            fi
            authLocal=1
            ;;
        --ldap)
            if [[ $authLDAP -eq 1 ]]; then
              echo
              echo "***ERROR: Option $1 specified more than once."
              print_usage
              exit 1
            fi
            authLDAP=1
            ;;
        --nopass)
            if [[ $authNopass -eq 1 ]]; then
              echo
              echo "***ERROR: Option $1 specified more than once."
              print_usage
              exit 1
            fi
            authNopass=1
            ;;
        --check)
            if [[ $doCheck -eq 1 ]]; then
              echo
              echo "***ERROR: Option $1 specified more than once."
              print_usage
              exit 1
            fi
            doCheck=1
            ;;
        --setup)
            if [ $enableAuthorization -eq 1 ]; then
              echo
              echo "***ERROR: Option $1 specified more than once."
              print_usage
              exit 1
            fi
            enableAuthorization=1
            ;;
        --setoff)
            if [ $disableAuthorization -eq 1 ]; then
              echo
              echo "***ERROR: Option $1 specified more than once."
              print_usage
              exit 1
            fi
            disableAuthorization=1
            ;;
        --status)
            if [ $statusSpecified -eq 1 ]; then
              echo
              echo "***ERROR: Option $1 specified more than once."
              print_usage
              exit 1
            fi
            statusSpecified=1
            ;;
        *)
            print_usage
            exit 1
  esac
  shift
done

if [[ $authLDAP == 1 && $local == 1 ]]; then
    echo
    echo "***ERROR: Cannot turn authentication both ldap and local, please choose one."
    print_usage 
    exit 1
fi

if [[ $enableAuthorization == 1 && $disableAuthorization == 1 ]]; then
    echo
    echo "***ERROR: Cannot turn authorization both on and off, please choose one."
    print_usage 
    exit 1
fi

if [ $authNopass == 1 ]; then
    tmp=`echo ${TRAFODION_AUTHENTICATION_TYPE^^}`
    if [[ $authLocal == 0  && "LDAP" == $tmp1 ]];then
        echo
        echo "***ERROR: --nopass is only works with --local or current authentication is local."
        print_usage 
        exit 1
    fi
fi

# display introductory messages
echo "INFO: Start of security script $(date)."

if [[ $authLDAP == 0 && $local == 0 && $enableAuthorization == 0 && $disableAuthorization == 0 && $statusSpecified == 0 ]]; then
    print_usage
    exit 0
fi

if [[ -e /usr/bin/pdcp ]];then
  echo "INFO: Only use this script on local hadoop for test $(date)."
  exit 0
fi

errorRows=0

# if requested, enable authorization
if [ $enableAuthorization == 1 ]; then
  enable_authorization
fi

if [ $disableAuthorization == 1 ]; then
  disable_authorization
fi

if [ $doCheck == 1 ]; then
  check_authentication
fi

if [ $errorRows -ne 0 ]; then
  echo "Errors found, script terminated"
  exit 3
fi

# if turning LDAP authentication on, make sure a valid config file was specified
# and copy the configuration file to all nodes
if [ $fileSpecified == 1 ]; then
  setup_config
  copy_config
fi

# Adjust the TRAFODION_AUTHENTICATION_CONFIG environment variable
if [[ $authLDAP == 1 || $authLocal == 1 || $authNopass == 1 ]]; then
  if [ $authLDAP == 1 ];then
    setup_config
  fi
  change_msenv
  echo
  echo "INFO **** IMPORTANT ***"
  echo "INFO: Please start a new shell and restart dcs in order to changing the authentication to take affect"
  echo
fi

  # report the status of authentication enablement
  if [ $statusSpecified == 1 ]; then
    echo
    echo "INFO:  *** Trafodion security (authentication and authorization) status *** "
    authEnabled=`echo ${TRAFODION_AUTHENTICATION_TYPE^^}`
    if [ $authEnabled == "LDAP" ]; then
      echo "   Authentication is LDAP"
    else
      echo "   Authentication is LOCAL"
    fi
    status_authorization
    echo
fi
echo "INFO: End of security (authorization and authentication) script $(date)."