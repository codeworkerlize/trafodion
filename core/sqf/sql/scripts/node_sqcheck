#!/bin/bash
#
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@
#

function Usage {

    echo 
    echo "Usage: $0 [ -c <cc> | -i <nn> | -d <nn> | -h | -f | -q | -v | -r | -j ]"
    echo 
    echo "-i <nn>  Number of times the check for Trafodion processes will be done (Default $max_checks)"
    echo "-d <nn>  Duration of sleep (in seconds) between each check  (Default $sleep_duration)"
    echo "-c <cc>  Which component to check: [all | dtm | dcs | rms | rest | mgblty ] (Default $sqck_component)"
    echo "-f       fast - (it's like running $0 -i 1 -d 0)"
    echo "-r       reset the iteration counter if the process count increases (as compared to the count in the last iteration)"
    echo "-j       Format the output in JSON. Used by REST server"
    echo "-h       Help"
    echo "-v       Verbose"
    echo "-q       Quiet"
    echo "-n <nid> Check if the node is up"
    echo

}

function GetOpts {

    while getopts "c:i:d:fqvrjn:h" arg
      do
      case $arg in 
      c)
          t_ck=${OPTARG}
          if 
          (
              [ $t_ck == "all" ] || 
              [ $t_ck == "dtm" ] ||
              [ $t_ck == "dcs" ] ||
              [ $t_ck == "rms" ] ||
              [ $t_ck == "mgblty" ] ||
              [ $t_ck == "rest" ] 
          ); then 
              sqck_component=${OPTARG}
          else
              Usage
              exit 0;
          fi
          ;;
      d)
          sleep_duration=${OPTARG}
          ;;
      i)
          max_checks=${OPTARG}
          ;;
      v)
          sqc_verbose=1
          ;;
      q)
          sqc_verbose=0
          ;;
      f)
          sleep_duration=0
          max_checks=1
          ;;
      r)
          reset_counter=1
          ;;
      j)
          json_output=1
          ;;
      h)
      Usage;
      exit 1;
      esac
    done
}

function cleanup_tmp_files {

  rm -f $tmp_ps $tmp_allnodes $tmp_dcsserver_nodes $tmp_dcsmaster_nodes $tmp_restserver_nodes $tmp_alldcs_masters $tmp_allrest_nodes

}

function cleanup_on_sigint {
#    echo "sighandler: cleanup on sigint"
    cleanup_tmp_files
}

function getDcsInfo {

 if [[ -d $DCS_INSTALL_DIR ]];then

  DCS_MASTER="$(cat $tmp_ps |grep DCSMASTERS | cut -d: -f1)"

### Check if there are any DcsMaster and DcsServer's that are started
   actual_dcsmaster_cnt=`< $tmp_ps grep DCSMASTERS | wc -l`
   actual_dcsserver_cnt=`< $tmp_ps grep DCSSERVERS | wc -l`
 fi
}

function getRestInfo {

 if [[ -d $REST_INSTALL_DIR ]];then

### Check if there are any TrafodionRest Servers that are started
   actual_restserver_cnt=`cat $tmp_ps |grep RESTSERVERS |wc -l`
 fi

}

function getMgbltyInfo {
    ### Check if there are any DBMgr components that are started
    actual_dbmgr_cnt=`cat $tmp_ps |grep dbmgr- |wc -l`
}

function getHRegionServerInfo {

   ### Check if there are any HBase RegionServers that are started
   actual_hregionsrv_cnt=`ps -aux |grep 'org.apache.hadoop.hbase.regionserver.HRegionServer' |grep -v grep |wc -l`

}

function get_json_dtm {
   echo ""\""PROCESS"\"":"\""DTM"\"","\""ACTUAL"\"":$act_dtm_cnt"
}

function get_json_rms {
   echo ""\""PROCESS"\"":"\""RMS"\"","\""ACTUAL"\"":$act_rms_cnt"
}

function get_json_dcsmaster {
   echo ""\""PROCESS"\"":"\""DCSMASTER"\"","\""ACTUAL"\"":$actual_dcsmaster_cnt"        
}

function get_json_dcsserver {
   echo ""\""PROCESS"\"":"\""DCSSERVER"\"","\""ACTUAL"\"":$actual_dcsserver_cnt"        
}

function get_json_mxosrvr {
   echo ""\""PROCESS"\"":"\""MXOSRVR"\"","\""ACTUAL"\"":$act_mxo_cnt"
}

function get_json_restserver {
   echo ""\""PROCESS"\"":"\""RESTSERVER"\"","\""ACTUAL"\"":$actual_restserver_cnt"
}

function get_json_dbmgr {
   echo ""\""PROCESS"\"":"\""DBMGR"\"","\""ACTUAL"\"":$actual_dbmgr_cnt"
}

function get_json_hregionsrv {
   echo ""\""PROCESS"\"":"\""HREGIONSERVER"\"","\""ACTUAL"\"":$actual_hregionsrv_cnt"
}

### main ###
begin_time_seconds=$(date +%s)

declare -i max_checks
declare -i sleep_duration
declare -i sqc_verbose
declare -i reset_counter
declare -i json_output

let max_checks=2
let sleep_duration=1
let sqc_verbose=0
let reset_counter=0
let json_output=0

# Set debug_display to 1 to eanble debugging display of values
let debug_display=0

sqck_component="all"
ft_pair=""

GetOpts $1 $2 $3 $4 $5 $6 $7 $8 $9

if [ $sqc_verbose '==' 1 ]; then
    echo "Max number of times to check the Trafodion environment: $max_checks, Sleep Duration: $sleep_duration seconds"
fi

declare -i num_checks
declare -i l_result
declare -i cmp_result
declare -i sq_up

declare -i cfg_dtm_cnt
declare -i cfg_rms_cnt
declare -i cfg_mxo_cnt
declare -i cfg_lnode_cnt
declare -i cfg_pnode_cnt

let act_dtm_cnt=0
let act_rms_cnt=0
let act_mxo_cnt=0

let act_lnode_down_cnt=0
let act_pnode_down_cnt=0
let act_lnode_up_cnt=0
let act_pnode_up_cnt=0
let cfg_lnode_cnt=0
let cfg_pnode_cnt=0

let cfg_mxo_cnt=0
let act_mxo_down_cnt=0

let num_checks=0
let chk_cnt_result=1
let cmp_result=0
let sq_up=0

if [[ -z $TRAF_VAR ]]; then
    echo "The environment variable TRAF_VAR is not present."
    echo "Looks like the Trafodion environment has not been configured. Exiting..."
    exit 5;
fi

# setup trap handler
trap 'cleanup_on_sigint' SIGINT SIGPIPE SIGHUP SIGTERM

tmp_ps=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_tmp_ps_XXXXXXX`
if [[ $? != 0 ]]; then
    echo "Error while getting a temporary file for tmp_ps. Exiting."
    exit 3
fi

declare -i pcmp_result
declare -i total_procs_result
let pcmp_result=0
let total_procs_result=0

# Get the current process status (all processes)
get_process_status > $tmp_ps 2>/dev/null

#DTM
let act_dtm_cnt=`< $tmp_ps grep -a 'tm ' | wc -l`

#MgbltyInfo
getMgbltyInfo

#MXOSRVR
getDcsInfo

#TrafodionRestServer
getRestInfo

#HRegionServer
getHRegionServerInfo

let act_mxo_cnt=`< $tmp_ps egrep -a -i 'mxosrvr ' | wc -l`

  #RMS
let act_rms_cnt=`< $tmp_ps egrep -a -i 'mxssmp |mxsscp ' | wc -l`

#Cleanup all the tmp file
cleanup_tmp_files

if [ $debug_display '==' 1 ]; then
    let total_procs_result=($act_dtm_cnt+$act_rms_cnt)
    echo act_dtm_cnt=$act_dtm_cnt
    echo act_rms_cnt=$act_rms_cnt
    echo total_procs_result=$total_procs_result
fi

if [ $json_output '==' 1 ]; then
    if [[ $sqck_component == "all" ]]; then
        json_dtm=$(get_json_dtm)
        json_rms=$(get_json_rms)
        json_dcsmaster=$(get_json_dcsmaster)
        json_dcsserver=$(get_json_dcsserver)
        json_mxosrvr=$(get_json_mxosrvr)
        json_restserver=$(get_json_restserver)
        json_dbmgr=$(get_json_dbmgr)
        json_hregionsrv=$(get_json_hregionsrv)
        echo "[{$json_dtm},{$json_rms},{$json_dcsmaster},{$json_dcsserver},{$json_mxosrvr}, {$json_restserver}, {$json_dbmgr}, {$json_hregionsrv}]"
    elif [[ $sqck_component == "dtm" ]]; then
        json_dtm=$(get_json_dtm)
        echo "[{$json_dtm}]" 
    elif [[ $sqck_component == "rms" ]]; then
        json_rms=$(get_json_rms)
        echo "[{$json_rms}]" 
    elif [[ $sqck_component == "dcs" ]]; then
        json_dcsmaster=$(get_json_dcsmaster)
        json_dcsserver=$(get_json_dcsserver)
        json_mxosrvr=$(get_json_mxosrvr)
        echo "[{$json_dcsmaster},{$json_dcsserver},{$json_mxosrvr}]" 
    elif [[ $sqck_component == "rest" ]]; then
        json_restserver=$(get_json_restserver)
        echo "[{$json_restserver}]"
    elif [[ $sqck_component == "mgblty" ]]; then
        json_dbmgr=$(get_json_dbmgr)
        echo "[{$json_dbmgr}]"
    fi
else
    if [[ $sqck_component == "all" ]]; then
        echo -e "DTM $act_dtm_cnt"
        echo -e "RMS $act_rms_cnt"
        echo -e "DcsMaster $actual_dcsmaster_cnt"
        echo -e "DcsServer $actual_dcsserver_cnt"
        echo -e "mxosrvr $act_mxo_cnt"
        echo -e "RestServer $actual_restserver_cnt"
        echo -e "DBManager $actual_dbmgr_cnt"
        echo -e "HRegionServer $actual_hregionsrv_cnt"
    elif [[ $sqck_component == "dtm" ]]; then
        echo -e "DTM $act_dtm_cnt"
    elif [[ $sqck_component == "rms" ]]; then
        echo -e "RMS $act_rms_cnt"
    elif [[ $sqck_component == "dcs" ]]; then
        echo -e "DcsMaster $actual_dcsmaster_cnt"
        echo -e "DcsServer $actual_dcsserver_cnt"
        echo -e "mxosrvr $act_mxo_cnt"
    elif [[ $sqck_component == "rest" ]]; then
        echo -e "RestServer $actual_restserver_cnt"
    elif [[ $sqck_component == "mgblty" ]]; then
        echo -e "DBManager $actual_dbmgr_cnt"
    fi
fi

exit 0
