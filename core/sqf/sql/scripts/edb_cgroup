#!/usr/bin/env python2
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2017-2019 Esgyn Corporation
#
# @@@ END COPYRIGHT @@@

### this script should be run by trafodion user ###

import os
import grp
import sys
import subprocess
import getpass
from optparse import OptionParser

def get_options():
    usage = 'usage: %prog [options]\n'
    usage += '  EsgynDB cgroup wrapper script, it invokes edb_cgroup_cmd script on all nodes.'
    parser = OptionParser(usage=usage)
    parser.add_option("--add", action="store_true", dest="add", default=False,
                      help="Add a new cgroup.")
    parser.add_option("--modify", action="store_true", dest="modify", default=False,
                      help="Modify an existing cgroup.")
    parser.add_option("--delete", action="store_true", dest="delete", default=False,
                      help="Delete an existing cgroup.")
    parser.add_option("--get", action="store_true", dest="get", default=False,
                      help="Get an existing cgroup configuration")
    parser.add_option("--getr", action="store_true", dest="getr", default=False,
                      help="Get an existing cgroup configuration recursively including child cgroups")
    parser.add_option("--si", action="store_true", dest="si", default=False,
                      help="Get system resources on all Esgyn nodes")

    parser.add_option("-a", action="store_true", dest="all_nodes", default=False,
                      help="Run this command on all nodes.")
    parser.add_option("-w", dest="node_list", metavar="NODE_LIST",
                      help="Provide a comma-separated list of nodes to run this command on.")

    parser.add_option("-u", "--user", dest="user", metavar="USER",
                      help="Specify the user name to own the cgroup permission.")
    parser.add_option("-g", "--group", dest="group", metavar="GROUP",
                      help="Specify the group name to own the cgroup permission.")
    parser.add_option("--cpu-pct", dest="cpu_pct", metavar="CPU_PERCENT",
                      help="Percentage of CPU to use in cgroup for esgyndb services.")
    parser.add_option("--mem-pct", dest="mem_pct", metavar="MEM_PERCENT",
                      help="Percentage of Memory to use in cgroup for esgyndb services.")
    parser.add_option("--pcgrp", dest="pcgrp", metavar="PARENT_CGROUP",
                      help="Specify parent cgroup name.")
    parser.add_option("--ccgrp", dest="ccgrp", metavar="CHILD_CGROUP",
                      help="Specify child cgroup name.")

    (options, args) = parser.parse_args()
    return options

def main():
    options = get_options()

    def err(msg):
        sys.stderr.write('[CGROUP_WRAPPER][ERROR] ' + msg + '\n')
        sys.exit(1)

    def run_cmd(cmd):
        p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        stdout, stderr = p.communicate()
        if p.returncode != 0:
            err('Failed to execute [%s]' % cmd)
        return stdout if stdout else stderr

    def run_esgyn_cgroup(nodes, cmd):
        #pdsh_cmd = run_cmd('get_pdsh_cmd').strip() + ' edb_cgroup_cmd '
        pdsh_cmd = ' edb_pdsh ' + nodes + ' edb_cgroup_cmd '
        cmd = pdsh_cmd + cmd
        output = run_cmd(cmd)
        if 'ssh exited with exit code 1' in output:
            err('Failed to execute [%s]:\n%s' % (cmd, output))
        return output
    ### validate parameters ###

    val = 0
    if options.add: val += 1
    if options.delete: val += 1
    if options.modify: val += 1
    if options.get: val += 1
    if options.getr: val += 1
    if options.si: val += 1

    if val != 1:
        err('Must specify only one operation: <add,delete,modify,get,getr,si>')

    # select nodes
    tgt_nodes = ''
    if options.all_nodes:
        if options.node_list:
            err('Cannot specify both -a and -w options')
        tgt_nodes = '-a'
    else:
        if not options.node_list:
            err('Must specify one of the -a or -w options')
        node_arr = options.node_list.split(',')
        for n in node_arr:
            tgt_nodes = tgt_nodes + ' -w ' + n

    login_user = getpass.getuser()
    login_user_group = grp.getgrgid(os.getgid()).gr_name
    user = options.user if options.user else login_user
    group = options.group if options.group else login_user_group
    ccgrp = options.ccgrp if options.ccgrp else ''
    pcgrp = options.pcgrp if options.pcgrp else 'ESGYNDB'
    try:
        cpu_pct = int(options.cpu_pct if options.cpu_pct else 100)
        mem_pct = int(options.mem_pct if options.mem_pct else 100)
    except ValueError:
        err('Percentage should be an integer')

    #if not (1 <= int(cpu_pct) <= 100 and 1 <= int(mem_pct) <= 100):
    #    err('Percentage should be between 1 to 100')

    ### invoke esgyn_cgroup_cmd on some or all nodes ###
    if ccgrp:
        opt = '--pcgrp %s --ccgrp %s' % (pcgrp, ccgrp)
    else:
        opt = '--pcgrp %s' % (pcgrp)

    if options.add:
        run_esgyn_cgroup(tgt_nodes, '--add %s --user %s --group %s --cpu-pct %s --mem-pct %s' % (opt, user, group, cpu_pct, mem_pct))
    elif options.delete:
        run_esgyn_cgroup(tgt_nodes, '--delete %s' % opt)
    elif options.modify:
        run_esgyn_cgroup(tgt_nodes, '--modify %s --cpu-pct %s --mem-pct %s' % (opt, cpu_pct, mem_pct))
    elif options.get:
        print run_esgyn_cgroup(tgt_nodes, '--get %s ' % opt)
    elif options.getr:
        print run_esgyn_cgroup(tgt_nodes, '--getr %s ' % opt)
    elif options.si:
        print run_esgyn_cgroup(tgt_nodes, '--si')

if __name__ == '__main__':
    main()
