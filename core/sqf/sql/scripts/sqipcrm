#!/bin/bash
#
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#
# @@@ END COPYRIGHT @@@
#

function perform_work {
    
    echo "In perform_work: $1"

    if [[ $1 == "-local" ]]; then
	lv_host=`hostname`
	id_col_num=2
    else
	lv_host=$1
	ssh="edb_pdsh -w $lv_host"
	id_col_num=3
    fi

    echo "remove shared memory ids on host $lv_host"
    $ssh sqnodeipcrm
    ids=`$ssh ipcs -m|grep -w $w|awk -v id_col_num=${id_col_num} '{ print $id_col_num }'`
    for id in $ids; do
	echo "$ssh ipcrm -m $id"
	$ssh ipcrm -m $id
    done
    
    echo "remove semaphore ids on host $lv_host"
    ids=`$ssh ipcs -s|grep -w $w|awk -v id_col_num=${id_col_num} '{ print $id_col_num }'`
    for id in $ids; do
	echo "$ssh ipcrm -s $id"
	$ssh ipcrm -s $id
    done

   echo "remove leftover semaphores on host $lv_host"
     rm -f /dev/shm/sem.rms* 2>/dev/null
     rm -f /dev/shm/sem.monitor* 2>/dev/null
 
    echo "remove message queue ids on host $lv_host"
    ids=`$ssh ipcs -q|grep -w $w|awk -v id_col_num=${id_col_num} '{ print $id_col_num }'`
    for id in $ids; do
	echo "$ssh ipcrm -q $id"
	$ssh ipcrm -q $id
    done
    
    echo "show ids on host $lv_host"
    $ssh ipcs -a|egrep -w "(key|------|$w)"
}

w=`whoami`

if [ -z "$1" ]; then
    hosts=$(edb_pdsh -a hostname |awk '{ print $2 }'|sort)
    for host in $hosts; do
	perform_work $host &
    done
else
    perform_work $1 &
fi

if [[ -z $1 ]]
then
  eval 'edb_pdsh -a rm -f /dev/shm/sem.sb-disc-sem-$USER 2>/dev/null'
elif [[ $1 == "-local" ]]
then
  rm -f /dev/shm/sem.sb-disc-sem-$USER 2>/dev/null
else
  eval 'edb_pdsh -w $1 rm -f /dev/shm/sem.sb-disc-sem-$USER 2>/dev/null'
fi

wait
