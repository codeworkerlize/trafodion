#!/bin/bash
 
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@


# -----------------------------------------------------------------------------
# script: krb5functions
#
# This script contains common functions used between krb5service and krb5check
# ------------------------------------------------------------------------------

# =========================================================
# getCachedTicket
#   gets the location of the cached ticket
#   and places it in CACHE_FILE
#
# returns:
#   0 = cached file found
#   1 = cached file not found, ticket needs to be init'd
# =========================================================
function getCachedTicket
{
  if  [[ -n $KRB5CCNAME ]];then
      CACHE_FILE=$KRB5CCNAME
  else
      kname="krb5cc_"
      trafodionId=$(id -u)
      kname=$kname$trafodionId
      CACHE_FILE=`find /tmp -maxdepth 1 -type f -name $kname`
  fi

  if [ "$CACHE_FILE" == "" ]; then
    return 1
  fi
  return 0
}

# =========================================================
# getStatus
#   reports status of the ticket
#   details are identical to what krb5check reports
#
#  parameter 1:  if timeLeft is less than this value, then 
#                time to reinitialize
#  parameter 2:  if = 1 and debug enabled, send details to 
#                log
#
#  TICKET_STATUS is generated with ticket information
#  CACHE_FILE is setup up, if not already
#
# returns:
#   0 = ticket information found
#   1 = ticket information not found
#   2 = ticket has expired but can be renewed
#   3 = ticket has expired and cannot be renewed
# =========================================================
function getStatus
{
  # case 1: ticket not found
  if [[ ! -e $CACHE_FILE ]]; then
    getCachedTicket
    if [[ $? -eq 1 ]]; then
      TICKET_STATUS="Ticket has not been created or it has expired"
      return 1
    fi
  fi

  # get times from current ticket
  currentTicket="$( klist -c $CACHE_FILE )"
  expireTime=$( date -d "$( echo "$currentTicket" | grep krbtgt | awk '{print $3, $4}' | head -n 1 )" +%s )
  startTime=$( date -d "$( echo "$currentTicket" | grep krbtgt | awk '{print $1, $2}' | head -n 1 )" +%s )
  maxTime=$( date -d "$( echo "$currentTicket" | grep "renew until" | awk '{print $3, $4}' | head -n 1 )" +%s )
  currentTime=`date +%s`

  # case 2: ticket no longer valid
  if [ $maxTime -lt $currentTime ]; then
    if [[ $DEBUG == "Y" ]]; then
      echo "Invalid ticket - ticket expired and there are no more renewals" >> LOG_FILE
      echo "  currentTime:             $currentTime" >> LOG_FILE
      echo "  currentTicketStartTime:  $startTime" >> LOG_FILE
      echo "  currentTicketExpiration: $expireTime" >> LOG_FILE
      echo "  finalTicketExpiration:   $maxTime" >> LOG_FILE
    fi

    TICKET_STATUS="Ticket is no longer valid"
    echo $TICKET_STATUS
    return 3
  fi

  maxTimeLeft=$( expr $maxTime - $currentTime )
  readyToInit=$( expr $1 + 300 )

  # case 3:  ticket expired, either renew or init
  result=0
  if [ $expireTime -lt $currentTime ]; then
    # ticket has expired, see if it should be renewed or initialized
    if [[ $maxTimeLeft -lt $readyToInit ]]; then 
      TICKET_STATUS="Ticket has expired for the final time, please init a new ticket"
      result=3
    else
      TICKET_STATUS="Ticket has expired, please renew ticket"
      result=2
    fi

    if [[ $DEBUG == "Y" ]]; then
      echo "Invalid ticket - ticket expired" >> LOG_FILE
      echo "  currentTime:             $currentTime" >> LOG_FILE
      echo "  currentTicketStartTime:  $startTime" >> LOG_FILE
      echo "  currentTicketExpiration: $expireTime" >> LOG_FILE
      echo "  finalTicketExpiration:   $maxTime" >> LOG_FILE
      echo "  timeLeftBeforeInit:      $maxTimeLeft" >> LOG_FILE
    fi

    echo $TICKET_STATUS
    return $result
  fi
  
  timeLeft=$( expr $expireTime - $currentTime )
  timePast=$( expr $currentTime - $startTime )
  units=$( printf '%d hours %d mins %d secs\n' $( expr $timeLeft / 3600 ) $( expr $timeLeft % 3600 / 60 ) $( expr $timeLeft % 60 ) )
  maxUnits=$( printf '%d hours %d mins %d secs\n' $( expr $maxTimeLeft / 3600 ) $( expr $maxTimeLeft % 3600 / 60 ) $( expr $maxTimeLeft % 60 ) )

  # case 4: ticket is about to expire, should be renewed or initialized
  if [[ $timeLeft -lt $readyToInit ]]; then
    if [[ $maxTimeLeft -lt $readyToInit ]]; then
      TICKET_STATUS="Ticket is about to expire for the final time in $units, please init a new ticket"
      result=3
      type=init
    else
      TICKET_STATUS="Ticket is about to expire in $units, please renew ticket"
      result=2
      type=renew
    fi

    if [[ $DEBUG == "Y" ]]; then
      echo "Ticket ready to $type: " >> $LOG_FILE
      echo "  currentTime:              $currentTime" >> $LOG_FILE
      echo "  currentTicketStartTime:   $startTime" >> $LOG_FILE
      echo "  currentTicketExpiration:  $expireTime" >> $LOG_FILE
      echo "  finalTicketExpiration:    $maxTime" >> $LOG_FILE
      echo "  timeLeftBeforeInit:       $maxTimeLeft" >> $LOG_FILE
    fi
    return $result
  fi

  # case 5: ticket valid
  if [[ $2 -eq 1 ]]; then
    if [[ $DEBUG == "Y" ]]; then
      echo "Renew details: " >> $LOG_FILE
      echo "  timePastSinceRenewal:     $timePast" >> $LOG_FILE
      echo "  timeLeftBeforeRenewal:    $timeLeft" >> $LOG_FILE
      echo "  currentTime:              $currentTime" >> $LOG_FILE
      echo "  currentTicketStartTime:   $startTime" >> $LOG_FILE
      echo "  currentTicketExpiration:  $expireTime" >> $LOG_FILE
      echo "  finalTicketExpiration:    $maxTime" >> $LOG_FILE
      echo "  timeLeftBeforeInit:       $maxTimeLeft" >> $LOG_FILE
    fi
  fi

  TICKET_STATUS="Ticket expires: $units, ticket becomes invalid: $maxUnits"
  return 0
}

function getLogFile
{
  LOG_FILE=$TRAF_LOG/krb5check
}

function getLockFile
{
  LOCK_FILE=$TRAF_VAR/krb5check
}

function getKeytab
{
  if  [[ ! -n $KEYTAB ]];then
    if [[ -z ${TRAF_AGENT} ]]; then
      KEYTAB="/etc/$TRAF_USER/keytab/$TRAF_USER.keytab"
    else
      KEYTAB="$TRAF_CONF/esgyndb.keytab"
    fi
  fi
} 
