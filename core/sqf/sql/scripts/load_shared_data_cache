#!/bin/bash
#
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@
#

# -----------------------------------------------------------------------------
# script:  load_shared_data_cache
#
# Calls sqlci to load the shared cache segment if the cqd:
#   TRAF_ENABLE_DATA_LOAD_IN_SHARED_CACHE is on
#
# returns:
#   0 - successful
#   1 - invalid syntax specified
#   2 - unable to retrieve information from SQL
#   3 - shared cache is disabled
#   4 - failed to set the valid flag in data cache
#
# Parameters:
#    init - load cache
#    verbose - echo the result
#    enable - when done loading cache, set the valid flag in data caches
#
#    local  - loads cache locally on each node
# additional parameters can be added to handle elasticity, etc.
# -----------------------------------------------------------------------------

doInit=0
doVerbose=0
setValid=0

function isCqdEnabled()
{
  cqdEnabled=$( sqlci -q "select cast(attr_value as char(20) character set iso88591)
                      from trafodion.\"_MD_\".defaults where attribute =
                      'TRAF_ENABLE_DATA_LOAD_IN_SHARED_CACHE'" | grep ON | wc -l )
  if [[ $cqdEnabled -eq '1' ]]; then
    return 0
  else
    return 1
  fi
}

function chkAndLoadCache()
{
  isCqdEnabled
  if [[ $? == 0 ]]; then
    error=$( sqlci -q "load trafodion data into shared cache local if empty" | grep ERROR )
    numErrors=$( echo $error | grep ERROR | wc -l )
    if [[ $numErrors -gt '0' ]]; then
      echo "Loading of Trafodion data into shared cache failed with error : $error"
      exit 2
    else
      entries=$( tdm_arkcmp -testSharedDataCacheFindAll | grep FindAll | cut -d '.' -f2 )
      echo "Loaded Trafodion data into shared cache : $entries"
      exit 0
    fi
  else
    echo "Loading Trafodion data into shared cache is disabled"
    exit 3
  fi
}

while [ $# -gt 0 ]; do

  case $1 in
    init)
        doInit=1
        ;;
    verbose)
       doVerbose=1
       ;;
    enable)
       setValid=1
       ;;
    local) 
       chkAndLoadCache
       exit 0
       ;;
    *)
        echo $"Usage: $0 {[init] [verbose] [enable] | [local]}"
        exit 1
        ;;
  esac
  shift
done

if [ $doVerbose -eq 1 ]; then
  trafcheck -f > /dev/null
  sq_stat=$?
  if ( [ $sq_stat == 0 ] || [ $sq_stat == 1 ] ); then
    echo "QianBase is available, continuing ..."
  else
    echo "QianBase is not started. Please start QianBase ..."
    exit 1
  fi
fi

nodeId=$( trafconf -node  | grep $HOSTNAME | cut -d '=' -f2 | cut -d ';' -f1 )
if [ $doVerbose -eq 1 ]; then
  echo "Script running on node: $nodeId"
fi

# if running on system installed with Python, load shared cache
if [[ $TRAF_AGENT == "" ]]; then

  # See if shared cache is enabled
  cqdSet=$( sqlci -q "select cast(attr_value as char(20) character set iso88591)
                      from trafodion.\"_MD_\".defaults where attribute =
                      'TRAF_ENABLE_DATA_LOAD_IN_SHARED_CACHE'" | grep ON | wc -l )

  if [ $cqdSet -ne '1' ]; then
    if [ $doVerbose -eq 1 ]; then
      echo "Loading Trafodion Data into Shared cache disabled, cache load step skipped" 
    fi
    exit 3
  fi

  # Shared cache is enabled - load it
  error=$( sqlci -q "load trafodion Data into shared cache" | grep ERROR )
  numErrors=$( echo $error | grep ERROR | wc -l )

  # error occurred during load, return error
  if [ $numErrors -gt '0' ]; then
    if [ $doVerbose -eq 1 ]; then 
      echo "Errors ($error) occurred while loading Trafodion Data into shared cache, continuing."
    fi
    exit 2
  fi

  if [ $doVerbose -eq 1 ]; then 
    entries=$( tdm_arkcmp -testSharedDataCacheFindAll | grep FindAll | cut -d '.' -f2 )
    echo "Loaded Trafodion Data into Shared Cache: $entries" 
  fi

# Shared cache load is not implemented
else
  if [ $doVerbose -eq 1 ]; then
    echo "Loading Trafodion Data into Shared cache not implemented, cache load step skipped" 
  fi
  exit 3
fi
exit 0
