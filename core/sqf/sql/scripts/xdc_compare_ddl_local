#!/bin/bash
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2019 Esgyn Corportation
#
# @@@ END COPYRIGHT @@@
#

function Usage {

    echo 
    echo "Usage: `basename $0` [ -i <nn> | -d <nn> | -n | -h | -v ]"
    echo 
    PrintScriptPurpose
    echo
    echo "-i <nn>  Number of times the check will be done (Default 1)"
    echo "-d <nn>  Duration of sleep (in seconds) between each check"
    echo "-n       Notify when the DDLs do not match. Send the"
    echo "         notification email to the recipients listed in the file"
    echo "         ${lv_to_list_file}"
    echo
    echo "-h       Help"
    echo "-v       Verbose"
    echo
}

function PrintScriptPurpose {
    echo "This script compares the DDLs of synchronous tables across the XDC clusters."
}

function PrintHeader {

    echo
    echo -n "- "
    PrintScriptPurpose
    echo -n "- Based on the parameters, this script will execute"
    if [ ${lv_num_provided} '==' 1 ]; then
	echo -n " a total of ${lv_num_checks} time"
	if [ ${lv_num_checks} '>' 1 ]; then
	    echo -n "s"
	else
	    lv_sleep=0
	fi
    else 
	if ( [ ${lv_num_checks} '==' 1 ] && [ ${lv_sleep} '==' 0 ] ); then
	    echo -n " a total of ${lv_num_checks} time"
	    lv_num_provided=1
	else
	    echo -n " continously"
	fi
    fi
    if [ ${lv_sleep} '>' 0 ]; then
	echo -n " every ${lv_sleep} seconds"
    fi
    echo "."
    if [ ${lv_notification} '==' 1 ]; then
	echo "- Will send a notification email if the DDLs do not match."
    fi
    echo

}

function SendNotification {

    lv_peer_id=$1
    lv_subject="EsgynDB_XDC_DDL_Mismatch"
    lv_curr_time=`date +%Y%m%d_%H%M%S`;
    lv_body_file=${TRAF_LOG}/xdc_compare_ddl.notification.email.${lv_curr_time}
    echo "`date`" > ${lv_body_file}
    echo "DDLs of synchronous tables on peer ids: ${1} and ${2} do not match" >> ${lv_body_file}
    echo "Send notification via: edb_sendmail -t ${lv_to_list_file} -s $lv_subject -b ${lv_body_file}"
    edb_sendmail -t ${lv_to_list_file} -s $lv_subject -b ${lv_body_file}

}

function RunShowDDL {

    lv_peer_id=$1
    if [ ${lv_verbose} '==' 1 ]; then
	echo "Getting the list of synchronous tables on peer id: ${lv_peer_id}"
    fi

    export CONNECT_TO_XDC_PEER_ID=${lv_peer_id}
    lv_synchronous_tables=`get_synchronous_tables_without_namespace`
    if [ ${lv_verbose} '==' 1 ]; then
	echo "List of synchronous tables: "
	echo ${lv_synchronous_tables}
	echo
    fi

    lv_xdc_ddl_in=${lv_ddl_in_prefix}${lv_peer_id}
    lv_xdc_ddl_out=${lv_ddl_out_prefix}${lv_peer_id}
    echo "-- Get the DDL of the synchronous tables" > ${lv_xdc_ddl_in}
    echo "" >> ${lv_xdc_ddl_in}
    for lv_table in ${lv_synchronous_tables} ; do
	echo "showddl ${lv_table} ; " >> ${lv_xdc_ddl_in}
    done
    
    if [ ${lv_verbose} '==' 1 ]; then
	echo "Executing: sqlci -i ${lv_xdc_ddl_in} > ${lv_xdc_ddl_out}"
    fi
    sqlci -i ${lv_xdc_ddl_in} > ${lv_xdc_ddl_out}

}

function CompareDDL {

    lv_peer_1=$1
    lv_peer_2=$2
    lv_xdc_ddl_out_1=${lv_ddl_out_prefix}${lv_peer_1}
    lv_xdc_ddl_out_2=${lv_ddl_out_prefix}${lv_peer_2}
    
    if [ ${lv_verbose} '==' 1 ]; then
	echo "Performing the diff: diff -C 0 -p ${lv_xdc_ddl_out_1} ${lv_xdc_ddl_out_2}"
    fi
    diff -C 0 -p -I "^Connecting to the XDC Peer ID:" ${lv_xdc_ddl_out_1} ${lv_xdc_ddl_out_2} 
    return $?

}

function PrintResult {

    date
    if [ $1 '!=' 0 ]; then
	echo -n "Found differences in the DDLs of the synchronous tables on peers: "
    else 
	echo -n "The DDLs of the synchronous tables on peers: "
    fi
    echo -n "${lv_my_cluster_id}"
    echo -n " and ${lv_peer}"
    if [ $1 '==' 0 ]; then
	echo -n " are identical"
    fi
    echo 
    echo "The DDL output files are here:"
    echo -e "This cluster\t: ${lv_ddl_out_prefix}${lv_my_cluster_id}"
    echo -e "Peer id ${lv_peer}\t: ${lv_ddl_out_prefix}${lv_peer}"

}

declare -i lv_sleep=0
declare -i lv_num_checks=1
declare -i lv_num_provided=0
declare -i lv_verbose=0
declare -i lv_my_cluster_id=0

lv_ddl_in_prefix="${TRAF_LOG}/xdc_ddl_in.peer."
lv_ddl_out_prefix="${TRAF_LOG}/xdc_ddl_out.peer."

let lv_sleep=0
let lv_num_checks=1
let lv_num_provided=0
let lv_notification=0
lv_to_list_file=${TRAF_CONF}/xdc_compare_ddl.notify_recipients

while getopts "d:hi:nqvx" arg
do
    case $arg in
	d)
            lv_sleep=${OPTARG}
            ;;
	i)
            let lv_num_provided=1
            lv_num_checks=${OPTARG}
            ;;
	n)
            lv_notification=1
	    ;;
	q)
            lv_verbose=0
	    ;;
	v)
            lv_verbose=1
	    ;;
	h)
	    Usage;
	    exit 1;
	    ;;
	*)
	    Usage;
	    exit 1;
	    ;;
    esac
done

PrintHeader

lv_my_cluster_id=`xdc -getmyid`
if [ $? '!=' 0 ]; then
    echo "Error getting my cluster id. Please check the health of the local HBase instance."
    exit 1
fi

if [ ${lv_verbose} '==' 1 ]; then
    echo "My cluster id: ${lv_my_cluster_id}"
fi

if [ ${lv_notification} '==' 1 ]; then
    if [ ! -f ${lv_to_list_file} ]; then
	echo "The file containing the notification email recipients: ${lv_to_list_file} does not exist."
	echo "Exitting..."
	exit 1 ;
    fi
fi

while [ ${lv_num_checks} '>' 0 ]; do
    echo "======== `date` ========"

    lv_peers=`xdc_peer_list`
    lv_ret=$?
    if [[ ${lv_ret} != 0 ]]; then
	echo ${lv_peers}
	exit 1;
    fi
    
    if [ ${#lv_peers} '<' 1 ]; then
	echo "Did not find any peer. "
	exit 1
    fi

    RunShowDDL ${lv_my_cluster_id}
    
    for lv_peer in $lv_peers; do
	if [ ${lv_verbose} '==' 1 ]; then
	    echo "Checking the status of peer: ${lv_peer}"
	fi
	hbcheck -p ${lv_peer} $* >/dev/null 
	lv_ret=$?
	if [[ ${lv_ret} == 0 ]]; then
	    RunShowDDL ${lv_peer}
	    CompareDDL ${lv_my_cluster_id} ${lv_peer}
	    lv_ret=$?
	    if [ $lv_ret '!=' 0 ]; then
		PrintResult ${lv_ret}
		if [ ${lv_notification} '==' 1 ]; then
		    SendNotification ${lv_my_cluster_id} ${lv_peer}
		fi
		exit ${lv_ret}
	    else
		PrintResult ${lv_ret}
	    fi
	else 
	    echo "Error: Cannot access peer: ${lv_peer}. Exitting..."
	    exit 1
	fi
    done
    
    if [ ${lv_num_provided} '==' 1 ]; then
	let --lv_num_checks
    fi

    if [ ${lv_num_checks} '>' 0 ]; then
	if [ $lv_sleep '>' 0 ]; then
	    sleep ${lv_sleep}
	fi
    fi

done

exit 0
