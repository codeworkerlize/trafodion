#!/bin/bash
#
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@

function Usage {

    echo 
    echo "Usage: `basename $0` [ -s <nn> | -e <nn> | -f <nn> | -n | -h ]"
    echo 
    echo "-s <nn>  Start node id (Default: 0)"
    echo "-e <nn>  End node id (Default - max node id of the cluster)"
    echo "-f <nn>  Fanout - number of parallel tasks to create the TLOG tables (Default: 8)"
    echo "-n       Just create the input files. Do not execute."
    echo "-h       Help"
    echo

}

function echoDate {
    echo "`date`: $*" | tee -a ${lv_log_file}
}

function echoDateDebug {
    echo "`date`: $*" >> ${lv_log_file}
}

function echoDateDebugFinish {
    echoDateDebug "===== Finish ========================="
}

function createTlogCommandsForGivenNid {

    lv_nid=$1

    echo "create 'TRAF_RSRVD_5:TRAFODION._DTM_.TLOG${lv_nid}', {NAME => 'tf', VERSIONS => 10}, METADATA => {'SPLIT_POLICY' => 'org.apache.hadoop.hbase.regionserver.DisabledRegionSplitPolicy'}"
    echo "disable 'TRAF_RSRVD_5:TRAFODION._DTM_.TLOG${lv_nid}'"
    echo "alter 'TRAF_RSRVD_5:TRAFODION._DTM_.TLOG${lv_nid}' , METHOD => 'table_att' ,  'coprocessor' => '|org.apache.hadoop.hbase.coprocessor.transactional.TrxRegionEndpoint|1073741823|'"
    echo "enable 'TRAF_RSRVD_5:TRAFODION._DTM_.TLOG${lv_nid}'"
    echo "describe 'TRAF_RSRVD_5:TRAFODION._DTM_.TLOG${lv_nid}'"
    
    echo "create 'TRAF_RSRVD_5:TRAFODION._DTM_.TLOG${lv_nid}_CONTROL_POINT', {NAME => 'cpf', VERSIONS => 10}, METADATA => {'SPLIT_POLICY' => 'org.apache.hadoop.hbase.regionserver.DisabledRegionSplitPolicy'}"
    echo "describe 'TRAF_RSRVD_5:TRAFODION._DTM_.TLOG${lv_nid}_CONTROL_POINT'"
    echo
    
}

function create_AT_NameSpace {

    lv_just_create_input_files=$1

    export CREATE_AT_NAMESPACE_IN="${TRAF_LOG}/create_at_namespace.in"
    export CREATE_AT_NAMESPACE_OUT="${TRAF_LOG}/create_at_namespace.out"
    rm -f ${CREATE_AT_NAMESPACE_IN}

    echo "list_namespace" > ${CREATE_AT_NAMESPACE_IN}
    echo "create_namespace 'TRAF_RSRVD_5'" >> ${CREATE_AT_NAMESPACE_IN}
    echo "describe_namespace 'TRAF_RSRVD_5'" >> ${CREATE_AT_NAMESPACE_IN}

    if [[ ${lv_just_create_input_files} == 1 ]]; then
        echoDate "Only created the input file to create the namespace. Not executing it."
        return
    fi

    echoDate "Executing commands in the file: ${CREATE_AT_NAMESPACE_IN}. Output in the file: ${CREATE_AT_NAMESPACE_OUT}."

    if [ -f $TRAF_HOME/sql/scripts/swhbase ]; then
        swhbase < ${CREATE_AT_NAMESPACE_IN} >${CREATE_AT_NAMESPACE_OUT} 2>&1
    else 
        hbase shell < ${CREATE_AT_NAMESPACE_IN} > ${CREATE_AT_NAMESPACE_OUT} 2>&1
    fi

    echoDate "Done."
}

function list_AT_NameSpace {
    export LIST_AT_NAMESPACE_IN="${TRAF_LOG}/list_at_namespace.in"
    export LIST_AT_NAMESPACE_OUT="${TRAF_LOG}/list_at_namespace.out"
    rm -f ${LIST_AT_NAMESPACE_IN}

    echo "describe_namespace 'TRAF_RSRVD_5'" >> ${LIST_AT_NAMESPACE_IN}
    echo "list_namespace_tables 'TRAF_RSRVD_5'" >> ${LIST_AT_NAMESPACE_IN}

    echoDate "Executing commands in the file: ${LIST_AT_NAMESPACE_IN}. Output in the file: ${LIST_AT_NAMESPACE_OUT}."

    if [ -f $TRAF_HOME/sql/scripts/swhbase ]; then
        swhbase < ${LIST_AT_NAMESPACE_IN} >${LIST_AT_NAMESPACE_OUT} 2>&1
    else 
        hbase shell < ${LIST_AT_NAMESPACE_IN} > ${LIST_AT_NAMESPACE_OUT} 2>&1
    fi

    echoDate "Done."
}

function generate_AT_in_files_fanout {

    declare -i lv_start_node_id=$1
    declare -i lv_end_node_id=$2
    declare -i lv_fanout=$3

    lv_nid_seq=$(seq --separator=" " ${lv_start_node_id} ${lv_end_node_id})

    declare -i lv_nids_in_this_batch=0
    declare -i lv_file_index=1
    declare -i lv_max_file_index=0
    declare -i lv_reached_fanout_once=0

    echoDateDebug "start node id: ${lv_start_node_id}, end id: ${lv_end_node_id}, list of ids: ${lv_nid_seq}"
    echoDateDebug "first input file suffix: ${lv_file_index}"
    echoDateDebug "fanout: ${lv_fanout}"

    for lv_curr_nid in ${lv_nid_seq}; do
        if [[ ${lv_max_file_index} -lt ${lv_fanout} ]];then
            ((lv_max_file_index++))
        fi
        # Create a new file once - else we append to that file
        if [[ ${lv_reached_fanout_once} -eq 0 ]]; then
            echo "" > ${CREATE_AT_TABLES_IN}.${lv_file_index}
        fi
        createTlogCommandsForGivenNid ${lv_curr_nid} >> ${CREATE_AT_TABLES_IN}.${lv_file_index}
        if [[ ${lv_file_index} -lt ${lv_fanout} ]];then
            ((lv_file_index++))
        else
            let lv_file_index=1
            let lv_reached_fanout_once=1
        fi
    done

    echoDateDebug "max file suffix containing TLOG creation commands: ${lv_max_file_index}"
    echo ${lv_max_file_index}
}

if [ -z $TRAF_HOME ]; then
    echo
    echo "The TRAF_HOME environment variable does not exist."
    echo "Please ensure sqenv.sh has been sourced."
    echo
    exit 1;
fi

if [[ -z $SQSCRIPTS_DIR ]]; then
    export SQSCRIPTS_DIR=$TRAF_HOME/sql/scripts
fi
SQCONFIGDB_FILE="${TRAF_VAR}/sqconfig.db"
if [[ ! -e ${SQCONFIGDB_FILE} ]]; then
    echo "Cannot find the Trafodion configuration DB file ${SQCONFIGDB_FILE}"
    echo "Please execute sqgen to generate this file."
    exit 5;
fi

lv_log_file=${TRAF_LOG}/createat.log

let lv_start_node_id=0
let lv_end_node_id=0
let lv_fanout=8
let lv_just_create_input_files=0

while getopts ":e:f:nhs:" arg
do
    case $arg in 
	s)
            lv_start_node_id=${OPTARG}
            if [[ ${lv_start_node_id} -lt 0 ]]; then
                echo "Error: Node id cannot be less than 0. Exitting..."
                exit 1
            fi
	    ;;
	e)
	    lv_end_node_id=${OPTARG}
            if [[ ${lv_end_node_id} -lt 0 ]]; then
                echo "Error: Node id cannot be less than 0. Exitting..."
                exit 1
            fi
	    ;;
	f)
	    let lv_fanout=${OPTARG}
	    ;;
	n)
	    lv_just_create_input_files=1
	    ;;
        \?) Usage;
            exit 1;
            ;;
	h)
	    Usage;
	    exit 0;
    esac
done

if [ $lv_end_node_id == 0 ]; then
    let lv_num_nodes=0
    lv_num_nodes=$(trafconf -nid-count)
    lv_ret=$?
    if [[ $lv_ret != 0 ]]; then
        echo "Error in trying to get the number of nodes. Exitting..."
        exit 1
    fi

    let lv_end_node_id=(lv_num_nodes-1)
fi

if [[ ${lv_end_node_id} -lt ${lv_start_node_id} ]]; then
    echo "Error: End node id:${lv_end_node_id} cannot be less than the start node id:${lv_start_node_id}. Exitting..."
    exit 1
fi

echoDateDebug "===== Start =========================="
echoDate "createat: create TLOG tables for all (or the specified) nodes of EsgynDB."

echoDate "node ids for which DTM TLOG tables will be created - start id: ${lv_start_node_id}, end id: ${lv_end_node_id}"

create_AT_NameSpace $lv_just_create_input_files

export CREATE_AT_TABLES_IN="${TRAF_LOG}/create_at_tables.in"
export CREATE_AT_TABLES_OUT="${TRAF_LOG}/create_at_tables.out"
lv_file_index=$(generate_AT_in_files_fanout ${lv_start_node_id} ${lv_end_node_id} ${lv_fanout})

if [[ ${lv_just_create_input_files} == 1 ]]; then
    echoDate "Exitting.. parameter supplied to just create input files"
    echoDateDebugFinish
    exit 0
fi

lv_file_seq=$(seq --separator=" " 1 ${lv_file_index})
for lv_cfi in ${lv_file_seq}; do
    echoDate "Executing commands in the file: ${CREATE_AT_TABLES_IN}.${lv_cfi}. Output in the file: ${CREATE_AT_TABLES_OUT}.${lv_cfi}"
    if [ -f $TRAF_HOME/sql/scripts/swhbase ]; then
        swhbase < ${CREATE_AT_TABLES_IN}.${lv_cfi} >${CREATE_AT_TABLES_OUT}.${lv_cfi} 2>&1 &
    else 
        hbase shell < ${CREATE_AT_TABLES_IN}.${lv_cfi} > ${CREATE_AT_TABLES_OUT}.${lv_cfi} 2>&1 &
    fi
done

# wait for the background tasks started by this script
wait
echoDate "Done."

# just to record the TLOG tables that were created
list_AT_NameSpace

echoDateDebugFinish
echo "Log of this run appended to the file: ${lv_log_file}"

exit 0
