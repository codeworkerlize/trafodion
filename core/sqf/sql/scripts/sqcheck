#!/bin/bash
#
# @@@ START COPYRIGHT @@@
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# @@@ END COPYRIGHT @@@
#

# sqcheck 'all' will return:
#    -1 - Not up ($?=255)
#     0 - Fully up and operational
#     1 - Partially up and operational
#     2 - Partially up and NOT operational

function Usage {

    echo 
    echo "Usage: $0 [ -c <cc> | -i <nn> | -d <nn> | -h | -f | -q | -v | -r | -j | -a ]"
    echo 
    echo "-i <nn>  Number of times the check for Trafodion processes will be done (Default $max_checks)"
    echo "-d <nn>  Duration of sleep (in seconds) between each check  (Default $sleep_duration)"
    echo "-c <cc>  Which component to check: [all | fndn | dtm | dcs | rms | rest | mgblty ] (Default $sqck_component)"
    echo "-f       fast - (it's like running $0 -i 1 -d 0)"
    echo "-r       reset the iteration counter if the process count increases (as compared to the count in the last iteration)"
    echo "-j       Format the output in JSON. Used by REST server"
    echo "-h       Help"
    echo "-v       Verbose"
    echo "-q       Quiet"
    echo "-n <nid> Check if the node is up"
    echo "-a       Check all the configure file and folder"
    echo

}


function GetOpts {

    while getopts "c:i:d:fqvrjn:h:a" arg
      do
      case $arg in 
      c)
          t_ck=${OPTARG}
          if 
          (
              [ $t_ck == "all" ] || 
              [ $t_ck == "fndn" ] || 
              [ $t_ck == "dtm" ] ||
              [ $t_ck == "dcs" ] ||
              [ $t_ck == "rms" ] ||
              [ $t_ck == "mgblty" ] ||
              [ $t_ck == "rest" ] 
          ); then 
              sqck_component=${OPTARG}
          else
              Usage
              exit 0;
          fi
          ;;
      d)
          sleep_duration=${OPTARG}
          ;;
      a)
          check_all=1
          ;;
      i)
          max_checks=${OPTARG}
          ;;
      v)
          sqc_verbose=1
          ;;
      q)
          sqc_verbose=0
          ;;
      f)
          sleep_duration=0
          max_checks=1
          ;;
      r)
          reset_counter=1
          ;;
      j)
          json_output=1
          ;;
      n) 
          check_node=${OPTARG}  
          ;;
      h)
      Usage;
      exit 1;
      esac
    done
}

function fillArray {
    let count=0
    for item in $1; do
        #echo $item
        if [[ "$2" == "TM" ]]; then
            act_dtms[count]="$item"
        fi
        let ++count
    done
}

function cleanup_tmp_files {

  rm -f $tmp_ps $tmp_persist $tmp_allnodes $tmp_dcsserver_nodes $tmp_dcsmaster_nodes $tmp_restserver_nodes $tmp_alldcs_masters $tmp_allrest_nodes $tmp_monitor_nodes $tmp_allnodes

  rm -f $sq_tmp_lnode_up
  rm -f $sq_tmp_pnode_up
  rm -f $sq_tmp_lnode_dn
  rm -f $sq_tmp_pnode_dn
  rm -f $sq_tmp_node_info
  
}

function cleanup_on_sigint {
#    echo "sighandler: cleanup on sigint"
    cleanup_tmp_files
}

function get_component_count {
    if [ gv_using_sqps == 1 ]; then
	lv_component_count=`< $tmp_ps grep -i "$1 " | wc -l`
    else
	lv_component_count=`< $tmp_ps grep -i "$1 " | awk -v colnum=${gv_node_sqcheck_col_num_with_count} 'BEGIN {cnt=0} {cnt=cnt+$colnum;} END {print cnt;}'`
    fi

   echo ${lv_component_count}
}

function getDtmInfo {

  let act_dtm_cnt=$(get_component_count DTM)
  if [ $reset_counter '==' 1 ]; then
      let lv_cnt_check=(act_dtm_cnt '>' last_dtm_cnt)
      if [ $lv_cnt_check '==' 1 ]; then
          let num_checks=0
      fi
      let last_dtm_cnt=act_dtm_cnt
  fi

  let duplicate=0
  if ( [ $act_dtm_cnt '!=' $cfg_dtm_cnt ] &&
         ( [ "$sqck_component" == "all" ] || [ "$sqck_component" == "fndn" ] || [ "$sqck_component" == "dtm" ] ) ); then 
      for dtms in ${cfg_dtms[*]}; do
          if [ -z "`grep -i \"$dtms\>\" $tmp_persist`" ]; then
              for dups in ${down_dtms[*]}; do
                  if [[ "$dups" == "$dtms" ]]; then
                      let duplicate=1
                  fi
              done
              if [ $duplicate '==' 0 ]; then
                  down_dtms[${#down_dtms[@]}]=$dtms
              fi
              let duplicate=0
          fi
      done
  else
      down_dtms=()
  fi
  ldtm_node_num=`dtmci status tm 2>/dev/null|grep "true"|awk '{print $1}'`
  [ $ldtm_node_num ]||ldtm_node_num=-1
  if [ $ldtm_node_num -ge 0 ] ;then
      ldtm_host=`trafconf  --node |grep "node-id=$ldtm_node_num"|awk -F "[;=]"  '{print $4}'`
  else
      ldtm_host="NONE"
  fi
}

function getRmsInfo {

  let act_rms_cnt=$(get_component_count RMS)
  if [ $reset_counter '==' 1 ]; then
      let lv_cnt_check=(act_rms_cnt '>' last_rms_cnt)
      if [ $lv_cnt_check '==' 1 ]; then
          let num_checks=0
      fi
      let last_rms_cnt=act_rms_cnt
  fi

  let duplicate=0
  if ( [ $act_rms_cnt '!=' $cfg_rms_cnt ] &&
         ( [ "$sqck_component" == "all" ] || [ "$sqck_component" == "fndn" ] || [ "$sqck_component" == "rms" ] ) ); then
      for rms in ${cfg_rms[*]}; do
          if [ -z "`grep -i $rms $tmp_persist`" ]; then
              for dups in ${down_rms[*]}; do
                  if [[ "$dups" == "$rms" ]]; then
                      let duplicate=1
                  fi
              done
              if [ $duplicate '==' 0 ]; then
                  down_rms[${#down_rms[@]}]=$rms
              fi
              let duplicate=0
          fi
      done
  else 
      down_rms=()
  fi

}

function getConnProcessInfo {
  if [[ -f "/etc/trafodion/trafodion_config" || -f "/etc/trafodion/conf/client_config" ]]; then
    # get dcs master nodes from 'masters' config file
    configuredDcsMasterNodes=`cat /etc/trafodion/conf/dcs/masters | sed ':a;N;$!ba; s/\n/ /g'`
  else 
    configuredDcsMasterNodes="localhost"
  fi

  if [ -r ${DCS_INSTALL_DIR}/bin/getActiveMaster.sh ]; then
    activeMaster=`${DCS_INSTALL_DIR}/bin/getActiveMaster.sh`

    ### Get the configured number of DcsMaster's
    cfg_dcsmaster_cnt=`echo ${configuredDcsMasterNodes} |/usr/bin/wc -w`
    let cfg_restserver_cnt=$cfg_dcsmaster_cnt
  fi

}
function getMonitorInfo {
#  let cfg_monitor_cnt=`cat $tmp_allnodes |wc -l`
  tmp_monitor_nodes=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_monitor_nodes_XXXXXXX`
  cstat |grep "monitor COLD" |grep -v "mpirun" |  cut -d':' -f1 > $tmp_monitor_nodes
  let actual_monitor_cnt=`cat $tmp_monitor_nodes |wc -l`
  if ( [ "$cfg_monitor_cnt" '!=' "$actual_monitor_cnt" ] ); then
    let down_monitor_cnt=cfg_monitor_cnt-actual_monitor_cnt
    tmp_allnodes=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_all_nodes_XXXXXXX`
    trafconf -name |xargs -n 1 |cut -d'.' -f1 > $tmp_allnodes
    monitors_down=`sort $tmp_allnodes $tmp_monitor_nodes | uniq -u | paste -sd ' ' -`
    down_monitor_nodes="${down_monitor_cnt} (${monitors_down})"
  else
    down_monitor_cnt=''
    down_monitor_nodes=()
  fi
}

function getDcsInfo {

 if [ -d ${TRAF_CONF}/dcs ]; then

### Get the configured number of DcsServer and mxosrvr
   if [ -f ${TRAF_CONF}/dcs/servers ]; then
      let cfg_mxo_cnt=`cat ${TRAF_CONF}/dcs/servers|awk '{if ($2=="") k=1;else k=$2;cnt+=k} END {print cnt}'`
      let cfg_dcsserver_cnt=`cat ${TRAF_CONF}/dcs/servers|awk '{if ($2=="") p=1;else p+=1;} END {print p}'`
   fi

### Check if there are any DcsMaster and DcsServer's that are started
   actual_dcsmaster_cnt=$(get_component_count DcsMaster)
   actual_dcsserver_cnt=$(get_component_count DcsServer)

   if ( [ "$cfg_dcsserver_cnt" '!=' "$actual_dcsserver_cnt" ] ); then
     let down_dcsserver_cnt=cfg_dcsserver_cnt-actual_dcsserver_cnt
     tmp_allnodes=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_allnodes_XXXXXXX`
     trafconf -name |xargs -n 1 |cut -d'.' -f1 > $tmp_allnodes
     tmp_dcsserver_nodes=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_dcsserver_nodes_XXXXXXX`
     cat $tmp_ps | grep "DcsServer 1" |  cut -d':' -f1 > $tmp_dcsserver_nodes
     dcsservers_down=`sort $tmp_allnodes $tmp_dcsserver_nodes | uniq -u | paste -sd ' ' -`
     down_dcsserver_nodes="${down_dcsserver_cnt} (${dcsservers_down})"
   else
     down_dcsserver_cnt=''
     down_dcsserver_nodes=()
   fi

   if ( [ "$cfg_dcsmaster_cnt" '!=' "$actual_dcsmaster_cnt" ] ); then
     let down_dcsmaster_cnt=cfg_dcsmaster_cnt-actual_dcsmaster_cnt
     tmp_alldcs_masters=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_alldcs_masters_XXXXXXX`
     echo $configuredDcsMasterNodes |tr ' ' '\n' |cut -d'.' -f1 > $tmp_alldcs_masters
     tmp_dcsmaster_nodes=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_dcsmaster_nodes_XXXXXXX`
     cat $tmp_ps | grep "DcsMaster 1" | cut -d':' -f1 > $tmp_dcsmaster_nodes
     dcsmasters_down=`sort $tmp_alldcs_masters $tmp_dcsmaster_nodes | uniq -u | paste -sd ' ' -`
     down_dcsmaster_nodes="${down_dcsmaster_cnt} (${dcsmasters_down})"
   else
     down_dcsmaster_cnt=''
     down_dcsmaster_nodes=()
   fi
 fi
}

function getRestInfo {

 if [ -d $REST_INSTALL_DIR ];then

### Check if there are any TrafodionRest Servers that are started
   actual_restserver_cnt=$(get_component_count RestServer)
   if ( [ "$cfg_restserver_cnt" '!=' "$actual_restserver_cnt" ] ); then
     let down_restserver_cnt=cfg_restserver_cnt-actual_restserver_cnt
     tmp_allrest_nodes=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_allrest_nodes_XXXXXXX`
     cat ${TRAF_CONF}/dcs/masters |cut -d'.' -f1 > $tmp_allrest_nodes
     tmp_restserver_nodes=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_restserver_nodes_XXXXXXX`
     cat $tmp_ps | grep "RestServer 1" | cut -d':' -f1 > $tmp_restserver_nodes
     restservers_down=`sort $tmp_allrest_nodes $tmp_restserver_nodes | uniq -u | paste -sd ' ' -`
     down_restserver_nodes="${down_restserver_cnt} (${restservers_down})"
   else
     down_restserver_cnt=''
     down_restserver_nodes=()
   fi
 fi

}

function get_regionserver_count_by_api {

### same as hbcheck
   if [ -z $JAVA_HOME ]; then
       echo "The environment variable \$JAVA_HOME has not been set"
       echo "Please ensure \$TRAF_HOME/sqenv.sh has been sourced."
       return
   fi
   regionserver_cnt=$($JAVA_HOME/bin/java -Xmx512m org.trafodion.dtm.hbstatus 2>/dev/null|awk -F ':' '{if($1~/Number of RegionServers available/) print $2}')
   if [[ $? == 0 ]]
   then
     echo $regionserver_cnt
     return 0
   fi


   krb5Checked=0

   if [[ $krb5Checked -eq 0 ]]; then
     # on a kerberos enabled system, see if ticket is valid
     # unable to communicate with HBase unless a valid ticket exists
     if [[ $SECURE_HADOOP == "Y" ]]; then
       krb5Checked=1
       echo
       echo "Kerberos is enabled on the cluster.  Checking for valid tickets."
       NODE=$( uname -n )
       result=$( krb5service status; echo "retcode: $?" )
       retcode=$( echo "$result" | grep "retcode:" | cut -d ':' -f2 )
       if [[ $retcode -ne 0 ]]; then
         # see krb5functions - getStatus for valid retcode's
         echo "Kerberos ticket is invalid on node $NODE (status $retcode)."
         echo "Please run 'trafkerberos start' to generate valid tickets."
         echo
         return $retcode
       fi
     fi
   fi

   regionserver_cnt=$($JAVA_HOME/bin/java -Xmx512m org.trafodion.dtm.hbstatus 2>/dev/null|awk -F ':' '{if($1~/Number of RegionServers available/) print $2}')
   if [[ $? == 0 ]]
   then
     echo $regionserver_cnt
     return 0
   fi
}

function getHRegionServerInfo {

### Check if there are any HBase RegionServers that are started
   actual_hregionsrv_cnt=$(get_regionserver_count_by_api)
   if [[ -z $actual_hregionsrv_cnt || $actual_hregionsrv_cnt == *[!0123456789]* ]]; then
     actual_hregionsrv_cnt=$(get_component_count HRegionServer)
   fi

   let cfg_hregionsrv_cnt=cfg_pnode_cnt

   if ( [ "$cfg_hregionsrv_cnt" '!=' "$actual_hregionsrv_cnt" ] ); then
     let down_hregionsrv_cnt=cfg_hregionsrv_cnt-actual_hregionsrv_cnt
   else
     down_hregionsrv_cnt=''
   fi
}

function getMgbltyInfo {
   ### Check if there are any DBMgr components that are started
   actual_dbmgr_cnt=$(get_component_count DBManager)
   let cfg_dbmgr_cnt=$cfg_dcsmaster_cnt
   if ( [ "$cfg_dbmgr_cnt" '!=' "$actual_dbmgr_cnt" ] ); then
     let down_dbmgr_cnt=cfg_dbmgr_cnt-actual_dbmgr_cnt
   else
     down_dbmgr_cnt=''
   fi
}

function getNodeStatus {
  sq_tmp_node_info=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_node_info_XXXXXXX`
  sqshell -c zone nid $check_node  > $sq_tmp_node_info
  sq_tmp_lnode_up=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_lnode_up_XXXXXXX`
  grep -i 'up' $sq_tmp_node_info | awk '{ print $4 }' | grep -i 'up' > $sq_tmp_lnode_up
  for lnodeup in `cat $sq_tmp_lnode_up`; do
    let ++act_lnode_up_cnt
  done

  rm $sq_tmp_node_info $sq_tmp_lnode_up

  if ( [ $act_lnode_up_cnt '>' 0 ] ); then
     exit 0;
  else
     exit -1;
  fi
}

function file_cmp(){
  check_result=`edb_pdsh -a  md5sum $1 |awk '{print $2}'|sort -n|uniq|wc -l`
  return $check_result
}

function file_cmp_v(){
  file_cmp $1
  if [ $? -ne 1 ] ;then
    echo $1 is not consistent
    return 0
  else 
    echo $1 is consistent
  fi
  return 1
}

function check_folder_auth(){
  check_auth=`edb_pdsh -a  stat -c %a $1 |awk '{print $2}'|sort -n|uniq|wc -l`
  if [ $check_auth -ne 1 ] ;then
    echo $1 auth is not consistent
    return 0
  fi
  return 1
}

function folder_cmp(){
  check_folder_auth $1
  if [ $? -ne 1 ] ;then
     echo $1 is not consistent
     return 0
  fi
  check_status=0
  for file in $1/*
  do
    if test -f $file;then
      file_cmp $file
      if [ $? -ne 1 ] ;then
        echo $file is not consistent
        return 0
      fi
    fi
  done

  echo $1 is consistent
  return 1
}

function hdd_loc_cmp(){
  check_result=`edb_pdsh -a grep STFS_HDD_LOCATION /etc/trafodion/conf/ms.env.custom | awk -F '=' '{print $2}'|sort -n |uniq|wc -l`
  if [ $check_result -ne 1 ] ;then
    echo scratch folder env is not consistent
    return 0
  fi
  folder_name=`grep STFS_HDD_LOCATION /etc/trafodion/conf/ms.env.custom	|awk -F '=' '{print $2}'`
  if [ "$folder_name" = "\$TRAF_VAR" ];then
	check_folder_auth $folder_name	
  else
    arr=(${folder_name//:/})
	for ele in ${array[*]}
	do
      check_folder_auth $ele
      if [ $? -ne 1 ] ;then
        return 0
      fi
	done
  fi
  echo scratch folder is consistent
  return 1
}

### main ###
begin_time_seconds=$(date +%s)

declare -i max_checks
declare -i sleep_duration
declare -i sqc_verbose
declare -i reset_counter
declare -i json_output
declare -i check_node
declare -i check_all

# the col number that contains
declare -i gv_node_sqcheck_col_num_with_count=3
declare -i gv_using_sqps=0

let max_checks=2
let sleep_duration=1
let sqc_verbose=0
let reset_counter=0
let json_output=0
let check_node=-1
let check_all=0

# Set debug_display to 1 to eanble debugging display of values
let debug_display=0

sqck_component="all"
ft_pair=""

GetOpts $1 $2 $3 $4 $5 $6 $7 $8 $9

if [ $sqc_verbose '==' 1 ]; then
    echo "Max number of times to check the Trafodion environment: $max_checks, Sleep Duration: $sleep_duration seconds"
fi

declare -i num_checks
declare -i l_result
declare -i cmp_result
declare -i sq_up

declare -i cfg_dtm_cnt
declare -i cfg_rms_cnt
declare -i cfg_mxo_cnt
declare -i cfg_lnode_cnt
declare -i cfg_pnode_cnt

let act_dtm_cnt=0
let act_rms_cnt=0
let act_mxo_cnt=0

let act_lnode_down_cnt=0
let act_pnode_down_cnt=0
let act_lnode_up_cnt=0
let act_pnode_up_cnt=0
let cfg_lnode_cnt=0
let cfg_pnode_cnt=0

let cfg_mxo_cnt=0
let act_mxo_down_cnt=0

let last_dtm_cnt=0
let last_rms_cnt=0

let num_checks=0
let chk_cnt_result=1
let cmp_result=0
let sq_up=0

if [[ -z $TRAF_VAR ]]; then
    echo "The environment variable TRAF_VAR is not present."
    echo "Looks like the Trafodion environment has not been configured. Exiting..."
    exit 5;
fi


[[ -e $TRAF_VAR/sqshell.env ]] && source $TRAF_VAR/sqshell.env

# setup trap handler
trap 'cleanup_on_sigint' SIGINT SIGPIPE SIGHUP SIGTERM

if [ $check_node '>' -1 ]; then
   getNodeStatus
fi

tmp_ps=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_tmp_ps_XXXXXXX`
if [[ $? != 0 ]]; then
    echo "Error while getting a temporary file for tmp_ps. Exiting."
    exit 3
fi

tmp_persist=`mktemp --tmpdir=${TRAF_VAR} --suffix=.tmp sqchk_tmp_persist_XXXXXXX`
if [[ $? != 0 ]]; then
    echo "Error while getting a temporary file for tmp_persist. Exiting."
    exit 3
fi

cfg_lnode_cnt=$(trafconf -nid-count)
cfg_pnode_cnt=$(trafconf -pnid-count)

parseNodeInfo(){
    isup(){ [[ $1 =~ (Up|UP|up) ]];}
    # local variables:
    #  @a up count for logic node;
    #  @b down count for logic node;
    #  @c up count for physical node;
    #  @d down count for physical node;
    #  @flag jump the line if flag=0;
    #  @lp 0 for logic node, 1 for physical.
    a=0 b=0 c=0 d=0
    flag=0
    lp=0
    while read -r line;do
        read _1 _2 _3 _4 <<<$line
        [ $_1 ]||continue
        if [ $flag -eq 0 ];then
            [ $_2 = '---' ]&&flag=1
            continue
        fi
        [ $lp -eq 0 ]&&{ isup $_4&&((++a))||((++b));lp=1;continue;}
        isup $_3&&((++c))||((++d));lp=0
    done < <(sqshell -c node info)
    echo "$a $b $c $d"
}

read act_lnode_up_cnt act_lnode_down_cnt act_pnode_up_cnt act_pnode_down_cnt <<<`parseNodeInfo`

### CONFIGURED DTMs (based on logical nodes configured)
let cfg_dtm_cnt=cfg_lnode_cnt
let num_dtms=0
while [[ $num_dtms -lt $cfg_dtm_cnt ]];
do
    dtm_name=`echo \\$TM$num_dtms`
    cfg_dtms[num_dtms]=$dtm_name
    let ++num_dtms
done
# Trace print
#echo ${cfg_dtms[*]}

### CONFIGURED Monitors
let cfg_monitor_cnt=cfg_lnode_cnt


### CONFIGURED RMSs 
if [[ $SQ_START_RMS == "1" ]]; then
    let cfg_sscp_cnt=cfg_lnode_cnt
    let cfg_ssmp_cnt=cfg_lnode_cnt
    let cfg_rms_cnt=$cfg_sscp_cnt+$cfg_ssmp_cnt
    let num_sscp=0
    let num_ssmp=0
    let num_rms=0
    while [[ $num_sscp -lt $cfg_lnode_cnt ]];
    do
        rms_name=`echo \\$ZSC$num_sscp`
        cfg_rms[num_rms]=$rms_name
        let ++num_sscp
        let ++num_rms
    done
    while [[ $num_ssmp -lt $cfg_lnode_cnt ]];
    do
        rms_name=`echo \\$ZSM$num_ssmp`
        cfg_rms[num_rms]=$rms_name
        let ++num_ssmp
        let ++num_rms
    done
else
    let cfg_rms_cnt=0
fi
# Trace print
#echo ${cfg_rms[*]}

if [ $json_output '==' 0 ]; then
    echo
    echo  "*** Checking Trafodion Environment ***"
    echo
    echo  "Checking if processes are up."
fi

declare -i pcmp_result
declare -i total_procs_result
let pcmp_result=0
let total_procs_result=0

getConnProcessInfo
while [ $chk_cnt_result '==' 1 ];
do 
  let ++num_checks
  let chk_cnt_result=(num_checks '<' max_checks)
  current_time_seconds=$(date +%s)
  let elapsed_seconds=current_time_seconds-begin_time_seconds

  if [ $json_output '==' 0 ]; then
    echo -en "\rChecking attempt: $num_checks; user specified max: $max_checks. Execution time in seconds: $elapsed_seconds."
  fi

  # Get the current process status (all processes)
  #Use the persist info to determine which DTM or RMS processes are down
  sqshell -c persist info > $tmp_persist 2>/dev/null
 
  if [ "$sqck_component" == "dtm" ]; then
     let gv_using_sqps=1
     sqshell -c persist info DTM > $tmp_ps 2>/dev/null
  else
     #Use the node check to process counts for DCS and mgblty processes
     PDSH_RCMD_TYPE=ssh edb_pdsh -a node_sqcheck > $tmp_ps 2>/dev/null
  fi

  if ( [ "$sqck_component" == "all" ] || [ "$sqck_component" == "fndn" ] ); then 
    getMonitorInfo
    #DTM
    getDtmInfo

    #HRegionServer
    getHRegionServerInfo
  fi
      
  #MXOSRVR
  if ( [ "$sqck_component" == "all" ] || [ "$sqck_component" == "fndn" ] || [ "$sqck_component" == "dcs" ] ); then 
    getDcsInfo
    let act_mxo_cnt=$(get_component_count mxosrvr)
    if ( [ "$cfg_mxo_cnt" '!=' "$act_mxo_cnt" ] ); then 
        let act_mxo_down_cnt=cfg_mxo_cnt-act_mxo_cnt
    else
        act_mxo_down_cnt=''
    fi 
  fi

  #TrafodionRestServer
  if ( [ "$sqck_component" == "all" ] || [ "$sqck_component" == "fndn" ] || [ "$sqck_component" == "rest" ] ); then 
      getRestInfo
  fi
  
  #MgbltyInfo
  if ( [ "$sqck_component" == "all" ] || [ "$sqck_component" == "fndn" ] || [ "$sqck_component" == "mgblty" ] ); then 
      getMgbltyInfo
  fi


  #RMS
  if ( [ "$sqck_component" == "all" ] || [ "$sqck_component" == "fndn" ] || [ "$sqck_component" == "rms" ] ); then 
      getRmsInfo
  fi

  #Cleanup all the tmp file
  cleanup_tmp_files

  if ( [ $sqck_component == "all" ] || [ "$sqck_component" == "fndn" ] ); then

      # Get nodes up count
      let cmp_result=(act_lnode_up_cnt '>' 0)
      if [ $debug_display '==' 1 ]; then
          echo
          echo "cmp_result=$cmp_result act_lnode_up_cnt=$act_lnode_up_cnt"
      fi

      if [ $cmp_result '==' 0 ]; then
          break
      fi

      # Check DTM
      let tmp_cfg_dtm=(act_lnode_up_cnt)
      if ( [ $act_dtm_cnt '!=' $cfg_dtm_cnt ] ); then
          let cmp_result=(cmp_result '&&' tmp_cfg_dtm '>' 0 '&&' act_dtm_cnt '==' tmp_cfg_dtm)
          let pcmp_result=(act_dtm_cnt '==' tmp_cfg_dtm '&&' cmp_result)
      else
          let cmp_result=(cmp_result '&&' act_dtm_cnt '==' cfg_dtm_cnt)
      fi
      if [ $debug_display '==' 1 ]; then
          echo "cmp_result=$cmp_result pcmp_result=$pcmp_result act_dtm_cnt=$act_dtm_cnt cfg_dtm_cnt=$cfg_dtm_cnt tmp_cfg_dtm=$tmp_cfg_dtm"
      fi

      # Check RMS
      if [[ $SQ_START_RMS == "1" ]]; then
          let tmp_cfg_rms=(act_lnode_up_cnt*2)
          if ( [ $act_rms_cnt '!=' $cfg_rms_cnt ] ); then
             let cmp_result=(cmp_result '&&' tmp_cfg_rms '>' 0 '&&' act_rms_cnt '==' tmp_cfg_rms)
             let pcmp_result=(cmp_result)
          else
             let cmp_result=(cmp_result '&&' act_rms_cnt '==' cfg_rms_cnt)
          fi
      fi

      if [[ "$sqck_component" == "all" ]]; then
	  
          #Check DCS
          if ( [ $actual_dcsmaster_cnt '!=' $cfg_dcsmaster_cnt ] ); then
             let pcmp_result=(actual_dcsmaster_cnt '!=' cfg_dcsmaster_cnt)
          fi
          if ( [ $actual_dcsserver_cnt '!=' $cfg_dcsserver_cnt ] ); then
             let pcmp_result=(actual_dcsserver_cnt '!=' cfg_dcsserver_cnt)
          fi
          if ( [ $act_mxo_cnt '!=' $cfg_mxo_cnt ] ); then
             let pcmp_result=(act_mxo_cnt '!=' cfg_mxo_cnt)
          fi
	  
          #Check REST
          if ( [ $actual_restserver_cnt '!=' $cfg_restserver_cnt ] ); then
             let pcmp_result=(actual_restserver_cnt '!=' cfg_restserver_cnt)
          fi

          #Check Mgblty
          if ( [ $actual_dbmgr_cnt '!=' $cfg_dbmgr_cnt ] ); then
             let pcmp_result=(actual_dbmgr_cnt '!=' cfg_dbmgr_cnt)
          fi
      fi

      if [ $debug_display '==' 1 ]; then
          echo "cmp_result=$cmp_result pcmp_result=$pcmp_result act_rms_cnt=$act_rms_cnt cfg_rms_cnt=$cfg_rms_cnt tmp_cfg_rms=$tmp_cfg_rms"
      fi

  elif [[ $sqck_component == "dtm" ]]; then
      let tmp_cfg_dtm=(cfg_lnode_cnt)
      if ( [ $act_dtm_cnt '!=' $cfg_dtm_cnt ] ); then
          let cmp_result=(tmp_cfg_dtm '>' 0)
          let pcmp_result=(cmp_result)
      else
          let cmp_result=(act_dtm_cnt '==' cfg_dtm_cnt)
      fi
  elif [[ $sqck_component == "rms" ]]; then
      let tmp_cfg_rms=(cfg_lnode_cnt*2)
      if ( [ $act_rms_cnt '!=' $tmp_cfg_rms ] ); then
          let cmp_result=(act_rms_cnt '>' 0)
          let pcmp_result=(cmp_result)
      else
          let cmp_result=(act_rms_cnt '==' tmp_cfg_rms)
      fi
      
  elif [[ $sqck_component == "dcs" ]]; then
       if ( [ $actual_dcsmaster_cnt '!=' $cfg_dcsmaster_cnt ] ); then
          let cmp_result=(actual_dcsmaster_cnt '>' 0)
          let pcmp_result=(actual_dcsmaster_cnt '!=' cfg_dcsmaster_cnt)
      else
          let cmp_result=(actual_dcsmaster_cnt '==' cfg_dcsmaster_cnt)
      fi
       if ( [ $actual_dcsserver_cnt '!=' $cfg_dcsserver_cnt ] ); then
          let cmp_result=(cmp_result '&&' actual_dcsserver_cnt '>' 0)
          let pcmp_result=(actual_dcsserver_cnt '!=' cfg_dcsserver_cnt)
      else
          let cmp_result=(actual_dcsserver_cnt '==' cfg_dcsserver_cnt)
      fi
      if ( [ $act_mxo_cnt '!=' $cfg_mxo_cnt ] ); then
          let cmp_result=(cmp_result '&&' act_mxo_cnt '>' 0)
          let pcmp_result=(act_mxo_cnt '!=' cfg_mxo_cnt)
      else
          let cmp_result=(act_mxo_cnt '==' cfg_mxo_cnt)
      fi
  elif [[ $sqck_component == "rest" ]]; then
      if ( [ $actual_restserver_cnt '!=' $cfg_restserver_cnt ] ); then
         let cmp_result=(actual_restserver_cnt '>' 0 )
         let pcmp_result=(actual_restserver_cnt '!=' cfg_restserver_cnt)
      else
         let cmp_result=(actual_restserver_cnt '==' cfg_restserver_cnt)
      fi
  elif [[ $sqck_component == "mgblty" ]]; then
      if ( [ $actual_dbmgr_cnt '!=' $cfg_dbmgr_cnt ] ); then
          let cmp_result=(actual_dbmgr_cnt '>' 0)
          let pcmp_result=(actual_dbmgr_cnt '!=' cfg_dbmgr_cnt)
      else
          let cmp_result=(actual_dbmgr_cnt '==' cfg_dbmgr_cnt)
      fi
  fi
  if [ $debug_display '==' 1 ]; then
      echo cmp_result=$cmp_result
      echo pcmp_result=$pcmp_result
  fi
  if [ $cmp_result '==' 1 ]; then
      let sq_up=1
      if [ $json_output '==' 0 ]; then
          if ( [ $sqck_component == "all" ] || [ "$sqck_component" == "fndn" ] ); then
              if ([ $act_lnode_up_cnt == $cfg_lnode_cnt ] ); then
                  echo
                  echo
                  echo "The Trafodion environment is up!"
              else
                  echo
                  echo
                  echo "The Trafodion environment is up! Node(s) are down and environment is in a degraded state."
                  echo
                  echo
                  sqshell -c node info
              fi
          fi
      fi
      break
  fi

  sleep $sleep_duration

done

let total_procs_result=($act_dtm_cnt+
                        $act_rms_cnt)

if [ $debug_display '==' 1 ]; then
    echo act_dtm_cnt=$act_dtm_cnt
    echo act_rms_cnt=$act_rms_cnt
    echo total_procs_result=$total_procs_result
fi

if [ $json_output '==' 0 ]; then
    echo

    if ( [ $sqck_component == "all" ] || [ "$sqck_component" == "fndn" ] ); then
        if [ $sq_up '==' 1 ]; then
            if [ $pcmp_result '==' 1 ]; then
                echo
                echo "The Trafodion environment is partially up and operational."
            fi
        else
            echo
            echo "The Trafodion environment is not up at all, or partially up and not operational. Check the logs."
        fi
    fi
fi

if [ $json_output '==' 1 ]; then
    if ( [ $sqck_component == "all" ] || [ "$sqck_component" == "fndn" ] ); then
        json_dtm=""\""PROCESS"\"":"\""Monitor"\"","\""CONFIGURED"\"":$cfg_monitor_cnt,"\""ACTUAL"\"":$actual_monitor_cnt,"\""DOWN"\"":\"${down_monitor_nodes[*]}\""
        json_dtm=""\""PROCESS"\"":"\""DTM"\"","\""CONFIGURED"\"":$cfg_dtm_cnt,"\""ACTUAL"\"":$act_dtm_cnt,"\""DOWN"\"":\"${down_dtms[*]}\""
        json_rms=""\""PROCESS"\"":"\""RMS"\"","\""CONFIGURED"\"":$cfg_rms_cnt,"\""ACTUAL"\"":$act_rms_cnt,"\""DOWN"\"":\"${down_rms[*]}\""
        json_dcsmaster=""\""PROCESS"\"":"\""DCSMASTER"\"","\""CONFIGURED"\"":$cfg_dcsmaster_cnt,"\""ACTUAL"\"":$actual_dcsmaster_cnt,"\""DOWN"\"":\"${down_dcsmaster_cnt}\""        
        json_dcsserver=""\""PROCESS"\"":"\""DCSSERVER"\"","\""CONFIGURED"\"":$cfg_dcsserver_cnt,"\""ACTUAL"\"":$actual_dcsserver_cnt,"\""DOWN"\"":\"${down_dcsserver_cnt}\""        
        json_mxosrvr=""\""PROCESS"\"":"\""MXOSRVR"\"","\""CONFIGURED"\"":$cfg_mxo_cnt,"\""ACTUAL"\"":$act_mxo_cnt,"\""DOWN"\"":\"${act_mxo_down_cnt}\""
        json_restserver=""\""PROCESS"\"":"\""RESTSERVER"\"","\""CONFIGURED"\"":$cfg_restserver_cnt,"\""ACTUAL"\"":$actual_restserver_cnt,"\""DOWN"\"":\"${down_restserver_cnt}\""
        json_dbmgr=""\""PROCESS"\"":"\""DBMGR"\"","\""CONFIGURED"\"":$cfg_dbmgr_cnt,"\""ACTUAL"\"":$actual_dbmgr_cnt,"\""DOWN"\"":\"${down_dbmgr_cnt}\""
        json_hregionsrv=""\""PROCESS"\"":"\""HREGIONSERVER"\"","\""CONFIGURED"\"":$cfg_hregionsrv_cnt,"\""ACTUAL"\"":$actual_hregionsrv_cnt,"\""DOWN"\"":\"${down_hregionsrv_cnt}\""
        echo "[{$json_dtm},{$json_rms},{$json_dcsmaster},{$json_dcsserver},{$json_mxosrvr}, {$json_restserver}, {$json_dbmgr}, {$json_hregionsrv}]"
    elif [[ $sqck_component == "dtm" ]]; then
        json_dtm=""\""PROCESS"\"":"\""DTM"\"","\""CONFIGURED"\"":$cfg_dtm_cnt,"\""ACTUAL"\"":$act_dtm_cnt,"\""DOWN"\"":\"${down_dtms[*]}\""
        echo "[{$json_dtm}]" 
    elif [[ $sqck_component == "rms" ]]; then
        json_rms=""\""PROCESS"\"":"\""RMS"\"","\""CONFIGURED"\"":$cfg_rms_cnt,"\""ACTUAL"\"":$act_rms_cnt,"\""DOWN"\"":\"${down_rms[*]}\""
        echo "[{$json_rms}]" 
    elif [[ $sqck_component == "dcs" ]]; then
        json_dcsmaster=""\""PROCESS"\"":"\""DCSMASTER"\"","\""CONFIGURED"\"":$cfg_dcsmaster_cnt,"\""ACTUAL"\"":$actual_dcsmaster_cnt,"\""DOWN"\"":\"${down_dcsmaster_cnt}\""        
        json_dcsserver=""\""PROCESS"\"":"\""DCSSERVER"\"","\""CONFIGURED"\"":$cfg_dcsserver_cnt,"\""ACTUAL"\"":$actual_dcsserver_cnt,"\""DOWN"\"":\"${down_dcsserver_cnt}\""        
        json_mxosrvr=""\""PROCESS"\"":"\""MXOSRVR"\"","\""CONFIGURED"\"":$cfg_mxo_cnt,"\""ACTUAL"\"":$act_mxo_cnt,"\""DOWN"\"":\"${act_mxo_down_cnt}\""
        echo "[{$json_dcsmaster},{$json_dcsserver},{$json_mxosrvr}]" 
    elif [[ $sqck_component == "rest" ]]; then
        json_restserver=""\""PROCESS"\"":"\""RESTSERVER"\"","\""CONFIGURED"\"":$cfg_restserver_cnt,"\""ACTUAL"\"":$actual_restserver_cnt,"\""DOWN"\"":\"${down_restserver_cnt}\""
        echo "[{$json_restserver}]"
    elif [[ $sqck_component == "mgblty" ]]; then
        json_dbmgr=""\""PROCESS"\"":"\""DBMGR"\"","\""CONFIGURED"\"":$cfg_dbmgr_cnt,"\""ACTUAL"\"":$actual_dbmgr_cnt,"\""DOWN"\"":\"${down_dbmgr_cnt}\""
        echo "[{$json_dbmgr}]"
    fi
else
    output=""
    function addRow(){
        tag=$1 cfg=$2 act=$3
        shift 3
        output+="|$tag|$cfg|$act|"
        case $tag in
        Monitor|DTM*|RMS)
            [ $sqc_verbose = 1 ]&&output+="$@"||{ x=$((cfg-act));[ $x = 0 ]||output+=$x;} ;;
        *)
            output+="$@";;
        esac
        output+="|\n"
    }
    addRow Process Configured Actual Down
    addRow ------- ---------- ------ ----
    case $sqck_component in
    all|fndn)
        addRow "Monitor"                $cfg_monitor_cnt    $actual_monitor_cnt    ${down_monitor_nodes[*]}
        [ $act_dtm_cnt = 0 ]&&\
        addRow "DTM"                    $cfg_dtm_cnt        $act_dtm_cnt           ${down_dtms[*]}||\
        addRow "DTM(leader,$ldtm_host)" $cfg_dtm_cnt        $act_dtm_cnt           ${down_dtms[*]}
        addRow "RMS"                    $cfg_rms_cnt        $act_rms_cnt           ${down_rms[*]}
        addRow "DcsMaster"              $cfg_dcsmaster_cnt  $actual_dcsmaster_cnt  $down_dcsmaster_cnt
        addRow "DcsServer"              $cfg_dcsserver_cnt  $actual_dcsserver_cnt  $down_dcsserver_cnt
        addRow "mxosrvr"                $cfg_mxo_cnt        $act_mxo_cnt           $act_mxo_down_cnt
        addRow "RestServer"             $cfg_restserver_cnt $actual_restserver_cnt $down_restserver_cnt
        addRow "DB Manager"             $cfg_dbmgr_cnt      $actual_dbmgr_cnt      $down_dbmgr_cnt
        addRow "HRegionServer"          $cfg_hregionsrv_cnt $actual_hregionsrv_cnt $down_hregionsrv_cnt ;;
    dtm)
        addRow "DTM"                    $cfg_dtm_cnt        $act_dtm_cnt           ${down_dtms[*]} ;;
    rms)
        addRow "RMS"                    $cfg_rms_cnt        $act_rms_cnt           ${down_rms[*]} ;;
    dcs)
        addRow "DcsMaster"              $cfg_dcsmaster_cnt  $actual_dcsmaster_cnt  $down_dcsmaster_nodes
        addRow "DcsServer"              $cfg_dcsserver_cnt  $actual_dcsserver_cnt  $down_dcsserver_nodes
        addRow "mxosrvr"                $cfg_mxo_cnt        $act_mxo_cnt           $act_mxo_down_cnt ;;
    rest)
        addRow "RestServer"             $cfg_restserver_cnt $actual_restserver_cnt $down_restserver_nodes ;;
    mgblty)
        addRow "DB Manager"             $cfg_dbmgr_cnt      $actual_dbmgr_cnt      $down_dbmgr_cnt ;;
    esac
    printf "$output"|column -t -s '|' -o '|'
fi
if [ $check_all '==' 1 ]; then
    echo -e "\n*** Checking Configuration Consistent ***\n"
    folder_cmp /etc/trafodion
    folder_cmp /etc/trafodion/conf
    folder_cmp /etc/trafodion/conf/dcs
    folder_cmp /etc/trafodion/conf/rest
    folder_cmp /etc/hbase/conf
    file_cmp_v /var/lib/trafodion/ms.env
    hdd_loc_cmp 
fi

if [ $sq_up '==' 1 ]; then
    if [ $pcmp_result '==' 1 ]; then
        exit 1;
    else
        exit 0;
    fi
elif ( [ $total_procs_result '==' 0 ] ); then
    if [ $json_output '==' 0 ]; then
        echo
        echo "The Trafodion environment is down."
    fi
    exit -1;
else
    exit 2;
fi
