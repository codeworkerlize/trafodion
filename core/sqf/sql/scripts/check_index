#!/bin/bash
# -----------------------------------------------
# check_index
# Usage: check_index --help
# Create by esgyn Liu Chong
# Update time 2020-10-23
# -----------------------------------------------

dbConn_address=''
dbConn_user='trafodion'
dbConn_password='traf123'

#compare index exclide table,values: n or y
is_excluteTable=n
exclute_tables='#chong#'

# Defining parameters, values: n or y
sqlci_limitParallel=y

compare_method='not in' #support Esgyndb2.6 and Qianbase
#compare_method='minus' #only support Qianbase
checkIndex_queryMethod=database
largeTable_rows=500000
maxTable_rows=20000000
checkIndexParallel=30
rebuilderIndexParallel=5
is_rebuild=noRebuild
option_object=rows
#progress bar
checkResultSleepTime=5
start_progress=0
process_format=''

# script version
function version()
    {
        echo '表和索引比对脚本, version 0.2 , update time 2020-10-23'
    }

# help function
function usage()
{
    cat <<EOF
     脚本运行在shell环境中，使用数据库用户运行
     使用: check_index 选项 参数
         
         -c, --compare             索引数据比对方式, 值: not in/minus
                                   默认值: ${compare_method}
         -e, --exclude             比对表的索引时排除的表 
                                   值: schema.tab1,schema.tab2
         -k, --kill                杀掉索引检查工具后台遗留的进程                                
         -l, --largeTable          检查大表的索引时，自动均衡到不同并发进程(仅检查索引数据内容时有效)
                                   默认值: ${largeTable_rows}  
         -M, --maxTable            检查的表最大行数，超过最大行数时不检查(仅检查索引数据内容时有效),当表行数超过${maxTable_rows}行并索引较多时，建议单独比对
                                   默认值: ${maxTable_rows}     
         -m, --method              索引行数检查使用的方式, 值: database/hbase --- 数据库查询方式/hbase count方式
                                   默认值: ${checkIndex_queryMethod}
         -o, --option              索引检查的类型. 值: rows/data  --- 比对索引和表的行数/比对索引和表的数据内容
                                   默认值: ${option_object}
         -P, --rebuildParallel     重建索引的并发数
                                   默认值: ${rebuilderIndexParallel}   
         -q, --queryParallel       检查索引的并发数
                                   默认值: ${checkIndexParallel}
         -t, --table               按表检查索引
                                   值: schema.tab1,schema.tab2
         -s, --schema              按schema检查索引
                                   值: schema1,schema2
         -r, --rebuild             当检查到索引和表不一致时，自动重建索引
         -h, --host                数据库的连接地址和端口号
                                   值：host01:23400,host02:23400
         -u, --username            数据库用户名
         -p, --password            数据库用户密码
         -H, --help                帮助
         -v, --version             版本信息    
EOF
}
    
function usage_en()
{
    cat <<EOF
     This script runs in the shell environment, using database user.
     Usage: check_index optstring parameters
            check_index [parameters] Parameter value
           
         -c, --compare             index data compare method, values:not in/minus
                                   default: ${compare_method}
         -e, --exclude             Excluded table names
                                   value: schema.tab1,schema.tab2
         -k, --kill                Kill background running process                               
         -l, --largeTable          Large table rows, Automatically balance when checking index data
                                   default: ${largeTable_rows}   
         -M, --maxTable            check table max rows
                                   default: ${maxTable_rows}         
         -m, --method              Method used to check index rows, values: database/hbase
                                   default: ${checkIndex_queryMethod}
         -o, --option              index check method. varlus: rows/data
                                   default: ${option_object}
         -p, --password            Database user password
         -P, --rebuildParallel     Index rebuild parallelism
                                   default: ${rebuilderIndexParallel}   
         -q, --queryParallel       Index check parallelism
                                   default: ${checkIndexParallel}
         -t, --table               Checked table
                                   value: schema.tab1,schema.tab2
         -s, --schema              Checked schema
                                   value: schema1,schema2
         -r, --rebuild             Automatically rebuild index when inconsistent
         -u, --username            Database user name
         -h, --host                Host Name/IP Address of the database      
         -H, --help                This small usage guide
         -v, --version             script version
                  
EOF
}
# make sure a parameter was specified
IS_PARAMETER=$1
if [ -z "$IS_PARAMETER" ]; then
         echo 'You must specify a paramter!'
   usage
   exit 1
fi

# parse command line arguments
args=$(getopt -o "c:e:o:kl:m:M:p:P:q:t:s:rh:Hu:v" -l "compare:,exclude:,option:,kill,largeTable:,method:,maxTable:,password:,queryParallel:,rebuildParallel:,table:,schema:,rebuild,host:,help,username:,version" -- "$@")

if [ $? != 0 ] ; then
        printf "\nARGS: $args\n"
        usage
        exit 1
fi

eval set -- "${args}"
while true; do
        case "$1" in
                -c|--compare) compare_method=$2; shift 2;;
                -e|--exclude) is_excluteTable=y; exclute_tables=$2; shift 2;;
                -o|--option) option_object=$2; shift 2;;
                -k|--kill) is_kill='y' ; shift  ;;
                -l|--largeTable) largeTable_rows=$2; shift 2;;
                -M|--maxTable) maxTable_rows=$2; shift 2;;
                -m|--method) checkIndex_queryMethod=$2; shift 2;;
                -p|--password) dbConn_password=$2; shift 2;;
                -q|--queryParallel)  checkIndexParallel=$2; shift 2 ;;
                -P|--rebuildParallel)  rebuilderIndexParallel=$2; shift 2 ;;
                -t|--table) check_balance_type='TABLE'; table_name=$2; shift 2;;
                -s|--schema) check_balance_type='SCHEMA'; schema_name=$2; shift 2;;
                -r|--rebuild) is_rebuild='rebuild' ; shift  ;;
                -h|--host)  dbConn_address=$2; shift 2 ;;
                -H|--help)   usage ; exit 1 ;;
                -u|--username)  dbConn_user=$2; shift 2 ;;
                -v|--version) version; exit 1 ;;
                --)            shift; break;;
                 *) printf "Input error value! " "\nbad param: $1\n" exit 1;;
        esac
       # shift
done

for arg in $@
    do
        echo 'You must specify a paramter!'
    usage
    exit 1
done

if [ "${is_kill}" == 'y' ];then
   read -p "Do you want to kill processes running in the background ? " is_values
   if [ "`echo ${is_values}|egrep -w 'y|Y|yes|YES'`" ];then
      running_pid=`offender -s active|grep -w "select '#chong#" |awk '{print "control query cancel qid "$4 ";"}'`
      if [ "${running_pid}" ];then
         echo "killed `echo "${running_pid}"|wc -l` background processes sql"
         echo -e "${running_pid}\nexit;"| sqlci
      else
         echo "No background processes are running sql"         
      fi   
      process_cnt=`ps -ef|grep -w $0|grep -v grep|wc -l`
      if [ "${process_cnt}" -gt 0 ];then
         echo "killed ${process_cnt} background processes"
         ps -ef|grep -w $0|grep -v 'grep'|awk '{print $2}'|xargs kill -9
      else
         echo "No background processes are running"
      fi   
   fi   
   exit 
fi

StartTime=`date +%s`
task_id=`date +%N`
if [ "$option_object" == 'rows' ];then
   EXC_OPTION='check_index'
elif [ "$option_object" == 'data' ];then
   EXC_OPTION='compare_index'
else
   EXC_OPTION=$option_object
fi   

if [ "${check_balance_type}" == 'TABLE' ];then
   if [ "`echo "${table_name}"|grep '\.'`" ];then
      V_SCHEMA=`echo $table_name | tr '[a-z]' '[A-Z]' `
   else
     usage
     exit
   fi   
elif [ "${check_balance_type}" == 'SCHEMA' ];then
   V_SCHEMA=`echo $schema_name | tr '[a-z]' '[A-Z]' `
else
   V_SCHEMA=
fi   

db_conn="trafci.sh -h ${dbConn_address} -u ${dbConn_user} -p ${dbConn_password}"

bin=`dirname "$0"`
bin=`cd "$bin">/dev/null; pwd`
bin=$(dirname "$bin") 

EXC_DIR=$(cd "$(dirname "$0")";pwd)/logs
#EXC_DIR=${bin}/logs
[ ! -d ${EXC_DIR} ] && mkdir -p ${EXC_DIR}
detail_log=${EXC_DIR}/detail_log
#detail_log=${EXC_DIR}/detail_log/db_tools
[ ! -d ${detail_log} ] && mkdir -p ${detail_log}

EXC_TIME=`date +"%F_%T"`
dbTools_log=${EXC_DIR}/${EXC_OPTION}_"$EXC_TIME".log
C_TAB_ROWS=${detail_log}/table_rows_exec_"$EXC_TIME"_${task_id}.out
TMEP_SQL_LIST=${detail_log}/temp_sql_list_${EXC_TIME}_${task_id}.list
S_TAB_ROWS=${detail_log}/table_rows_statis_"$EXC_TIME"_${task_id}.out
C_TAB_INFO=${detail_log}/table_${EXC_TIME}_${task_id}.list
get_rows_sql=${detail_log}/getrows_sql_${EXC_TIME}_${task_id}.list
rebuilder_index=${detail_log}/rebuilder_index_${EXC_TIME}_${task_id}.list
major_compact=${detail_log}/major_compact_${EXC_TIME}_${task_id}.list
flush_object=${detail_log}/flush_object_${EXC_TIME}_${task_id}.list
compare_data_sql=${detail_log}/compare_data_${EXC_TIME}_${task_id}.list
largeTable_compare_data_sql=${detail_log}/largeTable_compare_data_${EXC_TIME}_${task_id}.list
inconsistentIndex_detail_log=${detail_log}/inconsistentIndex_detail_${EXC_TIME}_${task_id}.log

function get_elapsed_time()
  {
    start_time=$1
    end_time=$2
    elapsed_time=$((${end_time}-${start_time}))
    if [ ${elapsed_time} -lt 3600 ];then
         elapsed_time=`echo ${elapsed_time} |awk '{print "00:"strftime("%M:%S",$1)}'`
    else
         elapsed_time=`echo ${elapsed_time} |awk '{print strftime("%H:%M:%S",$1)}'|awk -F":" '{$1=$1-8;OFS=":"}END{print $0}'`
    fi
  }

function excluteTable()
  {
    process_file=$1
    if [ "${is_excluteTable}" == 'y' ];then
       if [ -f ${process_file} ];then
          if [ "${exclute_tables}" ];then
             exclute_tables=`echo "${exclute_tables}"|sed 's/,/|/g'`
             exclute_tables_1=`echo "${exclute_tables}"|sed 's/\./"\."/g'|sed 's/,/"."/g'|sed 's/$/"/g'|sed 's/^/"/g'|sed 's/,/|/g'`             
             exclute_table_list=`cat ${process_file}|egrep -i -w -v ${exclute_tables}|egrep -v -i -w ${exclute_tables_1}`
             echo "${exclute_table_list}" > ${process_file}
          fi
       fi
    fi
  }

function ParallelExecute()
  {
    executeStartTime=`date +%s`
    executionType=$1
    sqlFile=$2
    largeTable_cnt=0

    # process exclute table
    excluteTable ${sqlFile}
    excluteTable ${largeTable_compare_data_sql}
    # compare index exclute table
    if [ "${executionType}" == 'compareIndex' ];then
       smallTable_SQL_CNT=`cat ${sqlFile}|wc -l`  
       largeTable_cnt=`cat ${largeTable_compare_data_sql}|wc -l`
       SQL_CNT=`expr ${largeTable_cnt} + ${smallTable_SQL_CNT}`     
    else
       SQL_CNT=`cat ${sqlFile} |wc -l`
    fi
       
    if [ "${SQL_CNT}" -eq 0 ];then
       echo "No tasks to process, program exits"
       exit 0
    fi
    if [ "${db_conn}" == 'sqlci' -a "${sqlci_limitParallel}" == 'y' ];then
        setParameter="set statistics on;"
        # Parallel number,default: logic core/2
        logic_core=`cat /proc/cpuinfo| grep "processor"| wc -l`
        if [ "${logic_core}" -gt $3 ];then
           parallel_num=$3
        else
           parallel_num=`expr ${logic_core} / 2`
        fi
    else
        setParameter="show remoteprocess;
set statistics on;"
        parallel_num=$3
    fi
    logFileName=${detail_log}/"${executionType}"_${EXC_TIME}
    
    # set cqd info
    if [ "${executionType}" == 'checkIndex' ];then
       cqdInfo="cqd attempt_esp_parallelism 'on';
set parserflags 1;
cqd nested_joins 'off';
cqd merge_joins 'off';
cqd hide_indexes 'all';"
       checkLogKeyword="as row_num from"
       checkProcessKeyword="check_index"
    elif [ "${executionType}" == 'compareIndex' ];then
       cqdInfo="cqd attempt_esp_parallelism 'on';
set parserflags 1;
cqd nested_joins 'off';
cqd merge_joins 'off';
cqd hide_indexes 'all';"
       checkLogKeyword="#chong#"  
       checkProcessKeyword="compare_index" 
    elif [ "${executionType}" == 'rebuilderIndex' ];then
       cqdInfo="cqd attempt_esp_parallelism 'on';
cqd traf_allow_disable_enable_indexes 'on';
set parserflags 131072;"
       checkLogKeyword="POPULATE INDEX"  
       checkProcessKeyword="check_index"       
    fi
    
    # Parallel update table statistics
    if [ "${SQL_CNT}" -gt "${parallel_num}" ];then
       executionThread=${parallel_num}
    else
       executionThread=${SQL_CNT}
    fi
    
    # Split execution of table    
    SPLIT_NAME=${ExecutionType}Split_${EXC_TIME}
    ROWS_CNT=`echo "scale=2;$SQL_CNT/$executionThread" | bc|awk -F '.' '($2>0)?a=$1+1:a=$1{print a}'` 
    # compare Index 
    if [ "${executionType}" != 'compareIndex' -o "${largeTable_cnt}" -eq 0 ];then
       split -l "${ROWS_CNT}" ${sqlFile} ${detail_log}/"${SPLIT_NAME}"
       SPLIT_NAMES=`ls ${detail_log}|grep ${SPLIT_NAME}`
       executionThread=`ls ${detail_log}|grep ${SPLIT_NAME}|wc -l`  
    else
       if [ "${smallTable_SQL_CNT}" -eq 0 ];then
          split -l "${ROWS_CNT}" ${largeTable_compare_data_sql} ${detail_log}/"${SPLIT_NAME}"
          SPLIT_NAMES=`ls ${detail_log}|grep ${SPLIT_NAME}`
          executionThread=`ls ${detail_log}|grep ${SPLIT_NAME}|wc -l`  
       else
          if [ "${smallTable_SQL_CNT}" -lt "${executionThread}" ];then
             if [ "${largeTable_cnt}" -lt "${executionThread}" -a "${largeTable_cnt}" -lt "${smallTable_SQL_CNT}" ];then
                less_cnt=`expr ${executionThread} - ${smallTable_SQL_CNT}`
                smallROWS_CNT=`echo "scale=2;$smallTable_SQL_CNT/$executionThread" | bc|awk -F '.' '($2>0)?a=$1+1:a=$1{print a}'`
             elif [ "${largeTable_cnt}" -lt "${executionThread}" -a "${largeTable_cnt}" -gt "${smallTable_SQL_CNT}" ];then
                less_cnt=`expr ${executionThread} - ${largeTable_cnt}`
                smallROWS_CNT=`echo "scale=2;$largeTable_cnt/$executionThread" | bc|awk -F '.' '($2>0)?a=$1+1:a=$1{print a}'`
             fi
             #add 'select 1 from dual;' into sqlfile
             for ((i=1;i<=${less_cnt};i++));do
                 echo "select 1 from dual;" >> ${sqlFile}
             done
          else
             smallROWS_CNT=`echo "scale=2;$smallTable_SQL_CNT/$executionThread" | bc|awk -F '.' '($2>0)?a=$1+1:a=$1{print a}'`
          fi
          # split sql file
          split -l "${smallROWS_CNT}" ${sqlFile} ${detail_log}/"${SPLIT_NAME}"  
          SPLIT_NAMES=`ls ${detail_log}|grep ${SPLIT_NAME}`
          executionThread=`ls ${detail_log}|grep ${SPLIT_NAME}|wc -l`         
          #Allocate large table SQL to different threads
          if [ "${largeTable_cnt}" -gt 0 ];then
             split_id=1
             largeTable_id=1
             for ((largeTable_id=1;largeTable_id<=${largeTable_cnt};largeTable_id++));do
                SPLIT_NAME=`echo "${SPLIT_NAMES}"|sed -n "${split_id}p"`
                sed -n "${largeTable_id}p" ${largeTable_compare_data_sql} >> ${detail_log}/${SPLIT_NAME}
                let split_id+=1
                if [ "${split_id}" -eq "${executionThread}" ];then
                  split_id=1
                fi
             done 
          fi
       fi           
    fi
    
    echo `date +%F_%T` -INFO- :" Execute with ${executionThread} processes (total: ${SQL_CNT} tasks. ${ROWS_CNT} tasks per process)"
    echo '____________________________'
    # Parallel execution query
    check_id=1
    for SQL_FNAME in ${SPLIT_NAMES};do
         threadExecuteStartTime=`date +%s`
         executionSql_cnt=`cat ${detail_log}/"$SQL_FNAME"|wc -l`
         if [ ${check_id} -lt 10 ];then
            thread_id=0$check_id
         else
            thread_id=$check_id
         fi 
         {
          if [ "${executionType}" == 'rebuilderIndex' ];then
             executionSql=$(echo -e "`cat ${detail_log}/"$SQL_FNAME"|sed 's/#LiuChong#/\n/g'`")
          else
             executionSql=`cat ${detail_log}/"$SQL_FNAME"|shuf`
          fi   
          #start execute task     
          if [ "${executionType}" == 'checkIndex' -a "${checkIndex_queryMethod}" == 'hbase' ];then 
              echo "${executionSql}" |hbase shell 2>/dev/null > ${logFileName}_${thread_id}.log
          else
             # add show errorcode
             if [ "${db_conn}" != 'sqlci' ];then
                executionSql=`echo "${executionSql}"|awk '{print $0"\nshow errorcode;"}'`
             fi     
         >${logFileName}_${thread_id}.log
${db_conn} <<EOF >> /dev/null
log ${logFileName}_${thread_id}.log;
${cqdInfo}
${setParameter}
${executionSql}
log off;
exit;
EOF
          fi
          rm -f ${detail_log}/"$SQL_FNAME"
          threadExecuteEndTime=`date +%s`
          get_elapsed_time ${threadExecuteStartTime} ${threadExecuteEndTime}
          threadExecuteTime=${elapsed_time}
          if [ "${executionType}" == 'checkIndex' -a "${checkIndex_queryMethod}" == 'hbase' ];then
             echo `date +%F_%T` -INFO- :" process ${thread_id} execution completed, executed `cat ${logFileName}_${thread_id}.log |egrep '^count' 2>/dev/null|wc -l` tasks (Elapsed time: ${threadExecuteTime})" >> ${logFileName}_${thread_id}.log
          else
             if [ "${db_conn}" != 'sqlci' ];then 
                if [ "${executionType}" == 'rebuilderIndex' ];then
                   total_task_list=`cat ${logFileName}_${thread_id}.log|grep -A 2 '>POPULATE INDEX'|grep '^--- SQL operation complete'`
                   total_task=`echo "${total_task_list}"|wc -l`
                   success_task=$((`cat ${logFileName}_${thread_id}.log|grep -w '^ERRORCODE 0$'|wc -l`/2))
                   error_task=`expr ${total_task} - ${success_task}`
                else
                   total_task_list=`cat ${logFileName}_${thread_id}.log|grep -w '^ERRORCODE'`
                   total_task=`echo "${total_task_list}"|wc -l`
                   success_task=`echo "${total_task_list}"|grep -w '^ERRORCODE 0$'|wc -l`
                   error_task=`expr ${total_task} - ${success_task}`                
                fi
             else
                if [ "${executionType}" == 'rebuilderIndex' ];then
                   total_task_list=`cat ${logFileName}_${thread_id}.log|grep -A 2 '>POPULATE INDEX'|grep '^--- SQL operation complete'`
                   total_task=`echo "${total_task_list}"|wc -l`
                   error_task=0
                else
                   total_task_list=`cat ${logFileName}_${thread_id}.log|egrep -w '^Execution Time'`
                   total_task=`echo "${total_task_list}"|wc -l`
                   error_task=0
                fi
             fi
                
             if [ "${error_task}" -gt 0 ];then
                task_result_info="${total_task} tasks. error task:${error_task}"   
             else
                task_result_info="${total_task} tasks"
             fi   
             echo `date +%F_%T` -INFO- :" process ${thread_id} execution completed, executed ${task_result_info} (Elapsed time: ${threadExecuteTime})" >> ${logFileName}_${thread_id}.log
          fi
          }&
          echo "$! ${executionSql_cnt} ${thread_id}" >>  ${detail_log}/.${executionType}_${task_id}.pid
          let check_id+=1
    done

    complete_thread=${detail_log}/.complete_thread_${executionType}_${task_id}.list
    > ${complete_thread}
    #while [ "`ps -ef|egrep -i ${checkProcessKeyword}|grep -v grep|wc -l`" -gt 3 ] ;do
    task_pid=`cat ${detail_log}/.${executionType}_${task_id}.pid |awk '{print $1}'`
    check_taskPid=`echo ${task_pid}|sed 's/ /|/g'`
    Counter_id=1
    while [ "`ps -ef|grep -v grep|egrep -w ${check_taskPid}`" ];do
         log_list=`ls ${detail_log}|grep '\.log'|grep ${executionType}|grep ${EXC_TIME}|sort -k 2 -n`         
         is_print=n
         for logfile in ${log_list};do
             check_thread_id=`echo ${logfile##*_}|cut -d'.' -f 1`
             if [ "${executionType}" == 'checkIndex' -a "${checkIndex_queryMethod}" == 'hbase' ];then
                check_result=`cat ${detail_log}/${logfile} |egrep 'SQL>|^count|>>select'|grep -v 'show errorcode'|tail -1`
             else
                check_result=`cat ${detail_log}/${logfile} |egrep 'SQL>|^count|>>select'|grep -v 'show errorcode'|tail -1|grep -i -w "${checkLogKeyword}"`             
             fi
             if [ "${check_result}" ];then
                is_print=y
                if [ "`echo "${check_result}"|grep "as tab_cnt from"`" ];then
                   check_result=$(echo ${check_result}|awk -F'as tab_cnt from' '{print "sql>select count(*) from"$2}')
                elif [ "`echo "${check_result}"|grep "as row_num from"`" ];then
                   check_result=$(echo ${check_result}|awk -F'as row_num from' '{print "sql>select count(*) from"$2}')   
                elif [ "`echo "${check_result}"|egrep 'SQL>select|>>select'`" ];then
                   check_result=$(echo ${check_result}|awk '{split($3,a,"-");if(a[2]~/table/) print "Comparing data for table "$4" and index "a[1]
                                                                             else print "Comparing data for index "a[1]" and table "$4}')
                elif [ "`echo "${check_result}"|grep '^count'`" ];then
                   check_result=$(echo "command> ${check_result}")
                fi
                #statistics processing tread id
                if [ "${executionType}" == 'checkIndex' -a "${checkIndex_queryMethod}" == 'hbase' ];then
                   ProcessingNo=`cat ${detail_log}/${logfile} |grep '^count'|wc -l`
                   ErrorCount=0
                else
                   if [ "${db_conn}" != 'sqlci' ];then
                      if [ "${executionType}" == 'rebuilderIndex' ];then                   
                         Processing_info=`cat ${detail_log}/${logfile}|grep -A 2 '>POPULATE INDEX'|grep '^--- SQL operation complete'`
                         ProcessingNo=`echo "${Processing_info}"|wc -l`
                         ErrorCount=$((`cat ${detail_log}/${logfile}|grep '^ERRORCODE'|grep -v -w '^ERRORCODE 0'|wc -l`/2))
                      else
                         Processing_info=`cat ${detail_log}/${logfile}|grep -w '^ERRORCODE'`
                         ProcessingNo=`echo "${Processing_info}"|wc -l`
                         ErrorCount=`echo "${Processing_info}"|grep '^ERRORCODE'|grep -v -w '^ERRORCODE 0'|wc -l`
                      fi   
                   else
                      if [ "${executionType}" == 'rebuilderIndex' ];then 
                         Processing_info=`cat ${detail_log}/${logfile}|grep -A 2 '>POPULATE INDEX'|grep '^--- SQL operation complete'`
                         ProcessingNo=`echo "${Processing_info}"|wc -l`
                         ErrorCount=0
                      else
                         Processing_info=`cat ${detail_log}/${logfile}|grep -w '^Execution Time'`
                         ProcessingNo=`echo "${Processing_info}"|wc -l`
                         ErrorCount=0
                      fi   
                   fi   
                fi  
                if [ "${ErrorCount}" -gt 0 ];then
                   echo "process ${check_thread_id} (total `cat ${detail_log}/.${executionType}_${task_id}.pid |grep -w "${check_thread_id}$"|awk '{print $2}'` processing to ${ProcessingNo}. Error task:${ErrorCount}): ${check_result}" >> ${dbTools_log}
                else
                   echo "process ${check_thread_id} (total `cat ${detail_log}/.${executionType}_${task_id}.pid |grep -w "${check_thread_id}$"|awk '{print $2}'` processing to ${ProcessingNo}): ${check_result}"  >> ${dbTools_log}
                fi
             else
                if [ -z "`grep -w ${check_thread_id} ${complete_thread}`" ];then
                   echo "${check_thread_id}" >> ${complete_thread}
                fi
             fi
         done
         if [ "${is_print}" == 'y' ];then
            echo "----------------------------"  >> ${dbTools_log}
            unset check_result
            unset is_print
         fi
         
         #print progress bar
         total_tasks=${SQL_CNT}
         if [ "${db_conn}" != 'sqlci' ];then
            if [ "${executionType}" == 'rebuilderIndex' ];then 
               processingNumber=`find ${detail_log} -name '*.log'|grep ${executionType}|grep ${EXC_TIME}|xargs cat |grep -A 2 '>POPULATE INDEX'|grep '^--- SQL operation complete'|wc -l`
            else
               processingNumber=`find ${detail_log} -name '*.log'|grep ${executionType}|grep ${EXC_TIME}|xargs cat |egrep -w '^count|^ERRORCODE'|wc -l`
            fi
         else
            if [ "${executionType}" == 'rebuilderIndex' ];then 
               processingNumber=`find ${detail_log} -name '*.log'|grep ${executionType}|grep ${EXC_TIME}|xargs cat |grep -A 2 '>POPULATE INDEX'|grep '^--- SQL operation complete'|wc -l`
            else
               processingNumber=`find ${detail_log} -name '*.log'|grep ${executionType}|grep ${EXC_TIME}|xargs cat |egrep -w '^count|^Execution Time'|wc -l`
            fi            
         fi
         start_progress=$((${processingNumber}*100/${total_tasks}))
         process_format=`seq -s '-' $((${start_progress}/2))|sed 's/[0-9]//g'|sed 's/^/-/g'`
         result="Total_progress-(${total_tasks}/${processingNumber}):"
         printf "%-27s[%-50s]%d%%\r" $result $process_format $start_progress
         echo -e "\n" >> ${dbTools_log}
         sleep ${checkResultSleepTime}
    done
    wait
    [ -f ${detail_log}/.${executionType}_${task_id}.pid ] && rm -f ${detail_log}/.${executionType}_${task_id}.pid
    [ -f ${complete_thread} ] && rm -f ${complete_thread}
    cat ${logFileName}_* > ${logFileName}.log
    rm -f ${logFileName}_*
    #echo "----------------------------"
    cat ${logFileName}.log|grep -w '\-INFO\- : process' |sort -k 5 -n   >> ${dbTools_log}
    echo "----------------------------"   >> ${dbTools_log}
    #statistics error number
    if [ "${db_conn}" !=  'sqlci' ];then
       total_error_task=`cat ${logFileName}.log|grep '^ERRORCODE'|grep -v -w '^ERRORCODE 0'|wc -l`  
    else
       total_error_task=0
    fi       
    executeEndTime=`date +%s`
    get_elapsed_time ${executeStartTime} ${executeEndTime}
    executeTime=${elapsed_time}
  }

function main()
  {
    if [ "$EXC_OPTION" == 'check_index' -o "$EXC_OPTION" == 'compare_index' ]; then
        #connection test
        test_result=`echo -e "select 'test_connection' from dual;\nexit;" |${db_conn}|grep -w test_connection`
        if [ -z "${test_result}" ];then
            if [ "${EXC_OPTION}" == 'compare_index' ];then 
               echo "Index data comparison must use trafci. Please configure trafci connection info"
               exit
            else
               db_conn=sqlci
               test_result=`echo -e "select 'test_connection' from dual;\nexit;" |${db_conn}|grep -w test_connection`
               if [ -z "${test_result}" ];then
                  echo "sqlci connection failed. Please Check database status"
                  exit
               else
                  echo "Trafci connection failed, use sqlci connection. The maximum number of processes is `cat /proc/cpuinfo| grep "processor"| wc -l` (cpu logic core / 2)"  
                  echo ""
               fi
            fi         
        fi

        # Execution operation type
        if [ "${EXC_OPTION}" == 'check_index' ];then
            query_log=${detail_log}/checkIndex_${EXC_TIME}.log
            if [ -z "${V_SCHEMA}" -o "${V_SCHEMA}" == 'ALL_SCHEMAS' ];then
                  schemas=`echo ${SCHEMA_LIST}|sed "s/ /','/g"`
            else
               if [ "`echo "${V_SCHEMA}"|grep '\.'`" ];then
                  schemas=`echo ${V_SCHEMA}|sed -e 's/,/\n/g'|cut -d '.' -f 1|sort|uniq|xargs|sed "s/ /','/g"`
                  tables=`echo ${V_SCHEMA}|sed 's/,/|/g'`
               else
                  schemas=`echo ${V_SCHEMA}|sed "s/,/','/g"`
               fi
             fi

            if [ "${checkIndex_queryMethod}" == 'hbase' ];then
               echo `date +%F_%T` -INFO- : "Start Compare index rows(hbase query)"
               get_idx_sql="WITH object_temp AS 
                 (SELECT t.text ,t.text_type,o.CATALOG_name,schema_name,object_name,object_uid  FROM \"_MD_\".objects o LEFT JOIN (SELECT * FROM \"_MD_\".TEXT WHERE text_type = '9')t ON o.object_uid = t.text_uid  
                 WHERE o.object_type IN('BT','IX') AND o.schema_name in ('${schemas}'))
                 SELECT t1.object_name,
                    (SELECT text||':'||CATALOG_name||'.'||schema_name||'.'||object_name FROM object_temp WHERE i.base_table_uid = object_uid )||','||(SELECT text||':'||CATALOG_name||'.'||schema_name||'.'||object_name FROM object_temp WHERE i.INDEX_UID = object_uid )||',#lch_chong#'
               FROM
               	\"_MD_\".INDEXES i LEFT JOIN object_temp t1
               	ON t1.object_uid = i.index_uid
               	order by 1;
               exit;" 
               object_list=`echo "${get_idx_sql}"|${db_conn} 2>/dev/null |grep '#lch_chong#' |awk '/TRAFODION/{print $2}'|sed -e 's/[ ]*$//g'|sed 's/^://g'|sed 's/,:/,/g'`
            else
               echo `date +%F_%T` -INFO- : "Start Compare index rows(database query)"
               get_idx_sql="SELECT
               	 (SELECT schema_name||'.'||object_name FROM \"_MD_\".objects WHERE i.base_table_uid = object_uid )||','||(SELECT schema_name||'.'||object_name FROM \"_MD_\".objects WHERE i.INDEX_UID = object_uid )||',#lch_chong#'
               FROM
               	\"_MD_\".INDEXES i LEFT JOIN \"_MD_\".objects o
               	ON o.object_uid = i.index_uid
               WHERE
               	o.schema_name in ('${schemas}')
               	AND o.object_type IN('BT', 'IX')
               	order by 1;
               exit;"
               object_list=`echo "${get_idx_sql}"|${db_conn} 2>/dev/null |grep '#lch_chong#' |sed -e 's/[ ]*$//g'`               
            fi   

            if [ -z "${object_list}" ];then
               echo "Table not found(schema name error) or database exception"
               exit 1
            else
               if [ "`echo "${V_SCHEMA}"|grep '\.'`" ];then
                  object_list=`echo "${object_list}"|egrep -w ${tables}`
               fi
            fi
            
            #Processing exclusion table
            exclute_tables=`echo "${exclute_tables}"|sed 's/,/|/g'`
            object_list=`echo "${object_list}"|egrep -i -w -v ${exclute_tables}`
            
            if [ "${checkIndex_queryMethod}" == 'hbase' ];then
               table_list=`echo "${object_list}"|grep '#lch_chong#' |sed 's/,#lch_chong#//g'|cut -d ',' -f 1| sed 's/,/\n/g'|sort -u|awk '{print "count '\''" $0 "'\'', INTERVAL => 100000" }'`
               index_list=`echo "${object_list}"|grep '#lch_chong#' |sed 's/,#lch_chong#//g'|cut -d ',' -f 2| sed 's/,/\n/g'|awk '{print "count '\''" $0 "'\'', INTERVAL => 100000" }'`
            else
               table_list=`echo "${object_list}"|grep '#lch_chong#' |sed 's/,#lch_chong#//g'|cut -d ',' -f 1| sed 's/,/\n/g'|sort -u|awk '{print "select '\''" $0 "'\'' ||'\'','\''||count(*) as row_num from",$0";"}'`
               index_list=`echo "${object_list}"|grep '#lch_chong#' |sed 's/,#lch_chong#//g'|cut -d ',' -f 2| sed 's/,/\n/g'|awk '{print "select '\''" $0 "'\'' ||'\'','\''||count(*) as row_num from table(index_table",$0");"}'`            
            fi
            if [ -z "${index_list}" ];then
               echo `date +%F_%T` -INFO- : "No indexes to process"
               exit 1
            fi
            
            echo -e "${table_list}\n${index_list}"|shuf > ${get_rows_sql}	

            #Parallel execution of info
            ParallelExecute checkIndex ${get_rows_sql} ${checkIndexParallel}
            #echo `date +%F_%T` -INFO- :" Complete check table statistics (Elapsed time: ${executeTime})"
            
            #
            if [ "${checkIndex_queryMethod}" == 'hbase' ];then
               obj_rows=`cat ${query_log} |grep -v -w '^Current count'|grep -w -A 1 '^count'|sed 's/, INTERVAL => 100000//g'|awk -F ' row' '{sub(/^count /,"");print $1}'|xargs|sed "s/'//g"|sed 's/ -- /\n/g'|sed 's/ /,/g'`
            else
               obj_rows=`cat ${query_log} | sed 's/=//g'|grep ',[0-9]'|cut -d';' -f 2|sed 's/"//g'|sort -n|sed "s/SQL>//g"`
            fi
            #sed -i 's/#lch_chong#/check/g' ${object_list} 
            object_list=`echo "${object_list}"|sed 's/#lch_chong#/error/g'`
            for info in `echo ${obj_rows}`;do 
               tab=${info%,*}; 
               object_list=`echo "${object_list}"|sed "s/${tab},/${info},/g"`
            done
            #echo "----------------------------------------------------------"     
            echo `date +%F_%T` -INFO- : "Compare index results(total index: `echo "${object_list}"|wc -l`):                 "
            echo "----------------------------------------------------------"
            check_results=`echo "${object_list}" |sed "s/^*TRAFODION.//g"|awk -F',' -v OFS=',' '{if($2!~/^[0-9]+$/) print $1,"error",$2,$3; else print $0}'|awk -F',' '{
                                                           if($2==$4)
                                                              if($2~/^error$/)
                                                                 print $1,$2,$3,$4,"error"
                                                              else if($4~/^error$/)
                                                                 print $1,$2,$3,$4,"error"  
                                                              else
                                                                 print $1,$2,$3,$4,"normal"
                                                           else
                                                              if($2~/^error$/)
                                                                 print $1,$2,$3,$4,"error"
                                                              else if($4~/^error$/)
                                                                 print $1,$2,$3,$4,"error"
                                                              else
                                                                 print $1,$2,$3,$4,"inconsistency" 
                                                           }'`	 
            echo -e "table_name table_rows index_name index_rows state\n---------- ---------- ---------- ---------- -----\n${check_results}"|column -t
                     
            # rows different table info
            diff_rows=`echo "${check_results}"|egrep -w 'error|inconsistency'`
            if [ "${diff_rows}" ];then
                check_values=`echo "${diff_rows}"|wc -l`
                check_state=1
                remark=`echo "${check_values} tables and indexes with different row numbers or query errors (Elapsed time: ${executeTime})"`
                echo "-----------------------------------------"
                echo `date +%F_%T` -WARN- : "${remark}"
                echo "-----------------------------------------"
                echo -e "table_name table_rows index_name index_rows state\n---------- ---------- ---------- ---------- -----\n${diff_rows}"|column -t
            else
               check_values=$(echo "Total_indexs:`echo "${check_results}"|wc -l`")
               check_state=0
               remark=`echo "All ${check_values} indexes is okay (Elapsed time: ${executeTime})"`
            fi
            echo "-----------------------------------------"
            EndTime=`date +%s`
            get_elapsed_time ${StartTime} ${EndTime}
            if [ "${total_error_task}" -gt 0 ];then
                  error_tasks="error taks:${total_error_task}. "
            fi
            echo `date +%F_%T` -INFO- :" Complete Compare index rows (total index: `echo "${object_list}"|wc -l`. ${error_tasks}Elapsed time: ${elapsed_time})"
            if [ "`echo "${diff_rows}"|head -1`" -a "${is_rebuild}" == 'rebuild' ];then
               echo `date +%F_%T` -INFO- :" Start rebuild index"
               diff_index_list=`echo "${check_results}"|awk -v OFS=',' '/inconsistency$/{split($3,a,".");print $1,a[2]}'`  
               echo "${diff_index_list}"|awk -F',' '{print "alter table",$1,"disable index",$2";#LiuChong#POPULATE INDEX",$2,"on",$1,"PURGEDATA;"}' >> ${rebuilder_index}
               # Execute rebuilder index
               ParallelExecute rebuilderIndex ${rebuilder_index} ${rebuilderIndexParallel}
               if [ "${total_error_task}" -gt 0 ];then
                  error_tasks="error taks:${total_error_task}. "
               fi
               echo `date +%F_%T` -INFO- :" Complete rebuild index (${error_tasks}Elapsed time: ${executeTime})          "
            fi
        elif [ "${EXC_OPTION}" == 'compare_index' ];then
            query_log=${detail_log}/compareIndex_${EXC_TIME}.log
            if [ -z "${V_SCHEMA}" -o "${V_SCHEMA}" == 'ALL_SCHEMAS' ];then
                  schemas=`echo ${SCHEMA_LIST}|sed "s/ /','/g"`
            else
               if [ "`echo "${V_SCHEMA}"|grep '\.'`" ];then
                  schemas=`echo ${V_SCHEMA}|sed -e 's/,/\n/g'|cut -d '.' -f 1|sort|uniq|xargs|sed "s/ /','/g"`
                  tables=`echo ${V_SCHEMA}|sed 's/,/|/g'`
               else
                  schemas=`echo ${V_SCHEMA}|sed "s/,/','/g"`
               fi
            fi
            if [ "${compare_method}" == 'minus' ];then
               compare_method_Sql="SELECT 	'select ''#chong# '||schema_name || '.' || index_name||'-table '||schema_name || '.' || table_name||' '','''||REPLACE(tab_columns,'||',',')||''', *  from (select ' ||tab_columns||' from '|| schema_name || '.' || table_name || ' T minus select '||idx_columns||' from table(index_table ' || schema_name || '.' || index_name || ') I);\nselect ''#chong# '||schema_name || '.' || index_name ||'-index '||schema_name || '.' ||table_name||' '','''||REPLACE(idx_columns,'||',',')||''', * from (select '||idx_columns ||' from table(index_table ' || schema_name || '.' || index_name || ') I minus select '||tab_columns||' from '||schema_name || '.' || table_name|| ' T);\n'"
            else 
               #compare_method_Sql="SELECT 	'select ''#chong# '||schema_name || '.' || index_name||'-table '||schema_name || '.' || table_name||' '','''||REPLACE(tab_columns,'||',',')||''',' ||REPLACE(tab_columns,'||',',')||' from ' || schema_name || '.' || table_name || ' T where '||tab_columns|| ' not in (select '||idx_columns||' from table(index_table ' || schema_name || '.' || index_name || ') I ) union select ''#chong# '||schema_name || '.' || index_name ||'-index '||schema_name || '.' || table_name||''','''||REPLACE(idx_columns,'||',',')||''','||REPLACE(idx_columns,'||',',')||' from table(index_table ' || schema_name || '.' || index_name || ') I where '||idx_columns|| ' not in (select '||tab_columns||' from '||schema_name || '.' || table_name|| ' T);'"  
            	 compare_method_Sql="SELECT 'select ''#chong# '||schema_name || '.' || index_name||'-table '||schema_name || '.' || table_name||' '','''||REPLACE(tab_columns,'||',',')||''',' ||REPLACE(tab_columns,'||',',')||' from ' || schema_name || '.' || table_name || ' T where '||tab_columns|| ' not in (select '||idx_columns||' from table(index_table ' || schema_name || '.' || index_name || ') I);\nselect ''#chong# '||schema_name || '.' || index_name ||'-index '||schema_name || '.' || table_name||' '','''||REPLACE(idx_columns,'||',',')||''','||REPLACE(idx_columns,'||',',')||' from table(index_table ' || schema_name || '.' || index_name || ') I where '||idx_columns|| ' not in (select '||tab_columns||' from '||schema_name || '.' || table_name|| ' T);\n'"          	
            fi	
            get_idx_sql="${compare_method_Sql}
            FROM(
            	SELECT schema_name, table_name, index_name, GROUP_CONCAT(TAB_COLUMN_NAME MAX LENGTH 5000 SEPARATOR '||') tab_columns, GROUP_CONCAT(IDX_COLUMN_NAME MAX LENGTH 5000 SEPARATOR '||') idx_columns
            		FROM(
            			SELECT t1.schema_name, t1.table_name, t1.index_name,
            				CASE
            					t2.SQL_DATA_TYPE
            					WHEN 'DATETIME' THEN 'to_char(T.\"' || REPLACE(t2.COLUMN_NAME, '@', '')|| '\")'
            					ELSE 'T.\"' || REPLACE(t2.COLUMN_NAME, '@', '')|| '\"'
            				END TAB_COLUMN_NAME
            				, CASE
            					t2.SQL_DATA_TYPE
            					WHEN 'DATETIME' THEN 'to_char(I.\"' || t2.COLUMN_NAME || '\")'
            					ELSE 'I.\"' || t2.COLUMN_NAME || '\"'
            				END IDX_COLUMN_NAME
            			FROM(
            				SELECT t.schema_name, a.object_name table_name, t.object_name index_name, a.index_uid index_uid FROM \"_MD_\".objects t
            				INNER JOIN (
            						SELECT a.object_name, b.index_uid FROM \"_MD_\".objects a
            						INNER JOIN \"_MD_\".indexes b
            							ON a.object_uid = b.BASE_TABLE_UID
            						WHERE 
            							a.schema_name in ('${schemas}') ) a
            					ON a.index_uid = t.object_uid ) t1
            			INNER JOIN \"_MD_\".columns t2
            				ON t1.index_uid = t2.OBJECT_UID
            			WHERE
            				SQL_DATA_TYPE <> 'DOUBLE')
            		GROUP BY 1, 2, 3 );
            		exit;"  
            echo `date +%F_%T` -INFO- : "Start Compare index data"
            
            e_rows_SCHEMA=`echo ${SCHEMA_LIST}|xargs`
            for E_SCHEMA in ${e_rows_SCHEMA}
              do
                 e_rows_SQL="SELECT
                               object_name, ROWCOUNT
                             FROM
                               (SELECT
                                               DISTINCT b.schema_name || '.' || b.object_name object_name
                                               , a.stats_time
                                               , a.ROWCOUNT
                                               , ROW_NUMBER() OVER(PARTITION BY object_name ORDER BY stats_time DESC ) AS rn
                                       FROM
                                               ${E_SCHEMA}.SB_HISTOGRAMS a
                                               , TRAFODION.\"_MD_\".OBJECTS b
                                       WHERE a.table_uid = b.object_uid)
                             WHERE rn = 1 ORDER BY 1;"
                 echo "${e_rows_SQL}" >> ${TMEP_SQL_LIST}
            done
            echo "exit;" >> ${TMEP_SQL_LIST}
            e_rows_RESULT=`cat "${TMEP_SQL_LIST}"|${db_conn}`
            e_rows_RES=`echo "${e_rows_RESULT}"|egrep -v "Welcome to |Esgyn Corporation|Host Name|User Name|Connected to|EsgynDB Advanced|SQL>|End of MXCI Session|UTIL_OUTPUT|--------|>>|----|ROWCOUNT|selected.|End of MXCI Session|Esgyn Corporation|(EXPR)|EsgynDB Advanced|ERROR\["|awk '{print $1,$2}'|awk '{if(length>1) print $0}' `
            if [ "${e_rows_RES}" ];then
                if [ "`echo "${V_SCHEMA}"|grep '\.'`" ];then
                    tables=`echo ${V_SCHEMA}|sed 's/,/|/g'`
                    echo "${e_rows_RES}"|egrep -i -w ${tables}>> ${S_TAB_ROWS}
                else
                    echo "${e_rows_RES}" >> ${S_TAB_ROWS}
                fi
            else
                echo "${TABLE_LIST}"|sed 's/"//g'|awk '{print $0,"0.00"}'  >> ${S_TAB_ROWS}
            fi
            largeTable_list=`cat ${S_TAB_ROWS}|awk '{if($2>'"${largeTable_rows}"') print $1}'|xargs|sed "s/ /|/g"`
            maxTable_list=`cat ${S_TAB_ROWS}|awk '{if($2>'"${maxTable_rows}"') print $1}'|xargs|sed "s/ /|/g"`
            
            #get compare data sql
            compareSql_list=`echo "${get_idx_sql}"|${db_conn} 2>/dev/null |grep '#chong#' |sed -e 's/[ ]*$//g'`
            if [ "`echo "${compareSql_list}"|head -1|awk '/[A-Z]\|[A-Z]/{print $0}'`" ];then
                compareSql_list=`echo -e "${compareSql_list}"|sed 's/|/||/g'|sed '/^$/d'`
            else
                compareSql_list=`echo -e "${compareSql_list}"|sed '/^$/d'`
            fi
            if [ -z "${compareSql_list}" ];then
               echo "index not found(schema name error) or database exception"
               exit 1
            else
               if [ "`echo "${V_SCHEMA}"|grep '\.'`" ];then
                  compareSql_list=`echo "${compareSql_list}"|egrep -i -w ${tables}`
               fi
            fi
            if [ "${largeTable_list}" ];then
               if [ "${maxTable_list}" ];then
                  echo "${compareSql_list}"|egrep -v -i -w ${maxTable_list}| egrep -v -i -w ${largeTable_list}| shuf > ${compare_data_sql}	
                  echo "${compareSql_list}"|egrep -v -i -w ${maxTable_list}| egrep -w -i ${largeTable_list} 2>/dev/null > ${largeTable_compare_data_sql}
               else
                  echo "${compareSql_list}"| egrep -v -i -w ${largeTable_list}| shuf > ${compare_data_sql}	
                  echo "${compareSql_list}"| egrep -w -i ${largeTable_list} 2>/dev/null > ${largeTable_compare_data_sql}               
               fi   
            else
               if [ "${maxTable_list}" ];then
                  echo "${compareSql_list}"|egrep -v -i -w ${maxTable_list}| shuf > ${compare_data_sql}	
               else
                  echo "${compareSql_list}"| shuf > ${compare_data_sql}	               
               fi
               >${largeTable_compare_data_sql}
            fi
            # Parallel execution of info
            ParallelExecute compareIndex ${compare_data_sql} ${checkIndexParallel}
            
            # statistics compare result
            cat ${query_log}|grep '^#chong#'|sed 's/#chong# //g'|awk '$1=$1'|sort > ${inconsistentIndex_detail_log}
            if [ -s ${inconsistentIndex_detail_log} ];then
               inconsistent_result=`cat ${inconsistentIndex_detail_log}|awk '{split($1,a,".");count[$2" "a[2]]++}END{for(i in count)print i,count[i]}'|sort -k 2`
               inconsistent_result=`echo "${inconsistent_result}"|awk '{split($2,a,"-");print $1,a[1],a[2],$3}'`
               echo `date +%F_%T` -ERRO- :" `echo "${inconsistent_result}"|awk '{print $2}'|sort|uniq|wc -l` indexes and tables are inconsistent (Elapsed time: ${executeTime})" 
               echo "-----------------------------------------"0
               echo -e "table_name index_name inconsistent_object inconsistent_number\n---------- ---------- ------------------- -------------------\n${inconsistent_result}"|column -t
               echo "-----------------------------------------"
               if [ "${total_error_task}" -gt 0 ];then
                  error_tasks="error taks:${total_error_task}."
               fi
               if [ "${maxTable_list}" ];then
                  maxTable_lists=`echo ${maxTable_list}|sed 's/|/,/g'`
                  echo `date +%F_%T` -WARN- :" `echo "${maxTable_lists}"|grep -o '\.'|wc -l` table more than ${maxTable_rows} rows, Do not run index comparison    "
                  echo "----------------------------"
                  echo "[${maxTable_lists}]"
                  echo "----------------------------"
               fi   
               echo `date +%F_%T` -INFO- :" Inconsistent data log in ${inconsistentIndex_detail_log}"
               echo `date +%F_%T` -INFO- :" Complete compare index data (total index:$(expr `cat ${query_log}|grep "SQL>select '#chong#"|wc -l ` / 2). ${error_tasks}Elapsed time: ${executeTime})"                
               # rebuild index
               if [ "${is_rebuild}" == 'rebuild' ];then
                  echo `date +%F_%T` -INFO- :" Start rebuild index"
                  echo "${inconsistent_result}"|awk '{print $1,$2}'|sort|uniq|awk '{print "alter table",$1,"disable index",$2";#LiuChong#POPULATE INDEX",$2,"on",$1,"PURGEDATA;"}' >> ${rebuilder_index}
                  # Execute rebuilder index
                  ParallelExecute rebuilderIndex ${rebuilder_index} ${rebuilderIndexParallel}
                  if [ "${total_error_task}" -gt 0 ];then
                     error_tasks="error taks:${total_error_task}. "
                  fi
                  echo `date +%F_%T` -INFO- :" Complete rebuild index (rebuild index:`cat ${rebuilder_index}|wc -l` ${error_tasks}lapsed time: ${executeTime})"
                  echo `date +%F_%T` -INFO- :" detail log in ${detail_log}/rebuilderIndex_${EXC_TIME}.log"
               fi
            else
               if [ "${maxTable_list}" ];then
                  maxTable_lists=`echo ${maxTable_list}|sed 's/|/,/g'`
                  echo `date +%F_%T` -WARN- :" `echo "${maxTable_lists}"|grep -o '\.'|wc -l` table more than ${maxTable_rows} rows, Do not run index comparison        "
                  echo "----------------------------"
                  echo "[${maxTable_lists}]"
                  echo "----------------------------"
               fi 
               echo `date +%F_%T` -INFO- :" 0 tables and indexes are inconsistent (Total index $((`cat ${compare_data_sql} ${largeTable_compare_data_sql}|wc -l`/2)). Elapsed time: ${executeTime})" 
               echo `date +%F_%T` -INFO- :" compare detail log in ${detail_log}/compareIndex_${EXC_TIME}.log"
            fi    
        fi
    else
        usage
    fi
    # Delete table info temp file
    [ -f ${C_TAB_ROWS} ] && rm ${C_TAB_ROWS}
    [ -f ${TMEP_SQL_LIST} ] && rm ${TMEP_SQL_LIST}
    [ -f ${S_TAB_ROWS} ] && rm ${S_TAB_ROWS}
    [ -f ${C_TAB_INFO} ] && rm ${C_TAB_INFO}
    [ -f ${get_rows_sql} ] && rm ${get_rows_sql}    
    [ -f ${rebuilder_index} ] && rm ${rebuilder_index}      
    [ -f ${major_compact} ] && rm ${major_compact} 
    [ -f ${flush_object} ] && rm ${flush_object}     
    [ -f ${compare_data_sql} ] && rm ${compare_data_sql}      
    [ -f ${largeTable_compare_data_sql} ] && rm ${largeTable_compare_data_sql}  
    [ -f ${inconsistentIndex_detail_log} ] && [ ! -s ${inconsistentIndex_detail_log} ] && rm ${inconsistentIndex_detail_log}   
    [ -f ${detail_log}/update_statis.list ] && rm ${detail_log}/update_statis.list 
  }

main |tee -a ${dbTools_log}
#main
# write check result
if [ "$EXC_OPTION" == check_index -o "$EXC_OPTION" == compare_index ]; then
   :
else
   [ -f ${dbTools_log} ] && rm ${dbTools_log}
fi
