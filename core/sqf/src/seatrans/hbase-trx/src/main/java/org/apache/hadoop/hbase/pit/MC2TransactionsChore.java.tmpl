/**
* @@@ START COPYRIGHT @@@
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*
* @@@ END COPYRIGHT @@@
**/

package org.apache.hadoop.hbase.pit;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
#ifdef HDP2.3 APACHE1.1 CDH5.5 CDH5.7 APACHE1.2 CDH5.16
import org.apache.hadoop.hbase.ScheduledChore;
#else
import org.apache.hadoop.hbase.Chore;
#endif
import org.apache.hadoop.hbase.Stoppable;

import org.apache.hadoop.hbase.pit.MutationCapture2;

/**
 * Cleans up committed transactions when they are no longer needed to verify
 * pending transactions.
 */
#ifdef HDP2.3 APACHE1.1 CDH5.5 CDH5.7 APACHE1.2 CDH5.16
public class MC2TransactionsChore extends ScheduledChore {
#else
public class MC2TransactionsChore extends Chore {
#endif
  private final MutationCapture2 trx_MC2;

  static final Log LOG = LogFactory.getLog(MC2TransactionsChore.class);

  /**
   * @param trx_MutationCapture2
   * @param timer        
   * @param stoppable    
   */
  public MC2TransactionsChore(final MutationCapture2 trx_MC2,
                                   final int timer,  
                                   final Stoppable stoppable) {
#ifdef HDP2.3 APACHE1.1 CDH5.5 CDH5.7 APACHE1.2 CDH5.16
    super("MC2TransactionsChore", stoppable, timer);
#else
    super("MC2TransactionsChore", timer, stoppable);
#endif
    this.trx_MC2 = trx_MC2;
  }
  /**
   * @param trx_MutationCapture2
   * @param timer
   * @param stoppable
   */
  public MC2TransactionsChore(String name,final MutationCapture2 trx_MC2,
                                   final int timer,
                                   final Stoppable stoppable) {
#ifdef HDP2.3 APACHE1.1 CDH5.5 CDH5.7 APACHE1.2 CDH5.16
    super("MC2TransactionsChore_"+name, stoppable, timer);
#else
    super("MC2TransactionsChore", timer, stoppable);
#endif
    this.trx_MC2 = trx_MC2;
  }
#ifndef CDH5.7 APACHE1.2 CDH5.16
  @Override
#endif
  public void chore() {

      if(LOG.isDebugEnabled()){
      LOG.debug("MC2TransactionsChore: region " + this.trx_MC2.regionInfo.getRegionNameAsString()+",mapsize="+MutationCapture2.mcMap.size());
      }
        
      trx_MC2.MC2_doChoreOperation();
  }
}
