// @@@ START COPYRIGHT @@@
//
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// @@@ END COPYRIGHT @@@

// This file contains protocol buffers that are used for TrxRegionProtocol.

package hbase.pb;

option java_package = "org.apache.hadoop.hbase.coprocessor.transactional.generated";

option java_outer_classname = "TrxRegionProtos";
option java_generic_services = true;
//option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "HBase.proto";
import "ClusterStatus.proto";
import "Client.proto";

message AbortTransactionRequest{
  required bytes regionName = 1;
  required int64 transactionId = 2;
  required int32 participantNum = 3;
  required bool dropTableRecorded = 4;
  optional bool ignoreUnknownTransactionException = 5;
}

message AbortTransactionResponse {
  optional string exception = 1;
  optional bool hasException = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
}


message GeneralBinlogCommandRequest{
  required int32 commandId = 1;
  required int64 transactionId = 2;
  required bytes args = 3;
  required int32 seqnum = 4;
}

message GeneralBinlogCommandResponse {
  required int32 retcode = 1;
  required bytes retmsg = 2;
}

message AbortTransactionMultipleRequest{
  repeated bytes regionName = 1;
  required int64 transactionId = 2;
  required int32 participantNum = 3;
}

message AbortTransactionMultipleResponse {
  repeated string exception = 1;
  optional bool hasException = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
}

message AbortSavepointRequest{
  required bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 savepointId = 3;
  required int64 pSavepointId = 4;
  required int32 participantNum = 5;
  optional bool ignoreUnknownTransactionException = 6;
}

message AbortSavepointResponse {
  required int32  result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message BeginTransactionRequest{
  required int64 transactionId = 1;
  required int64 startId = 2;
  required bytes regionName = 3;
}

message BeginTransactionResponse {
  optional string exception = 1;
  optional bool hasException = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
}

message CommitRequest{
  required bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 commitId = 3;
  required int32 participantNum = 4;
  required int32 tmTableCDCAttr = 5;
  optional bool ignoreUnknownTransactionException = 6;
  optional int32 totalNum = 7;
  optional int32 ddlNum = 8;
}

message CommitResponse {
  optional string exception = 1;
  optional bool hasException = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
  optional bool commitOk = 5;
  optional int64 currentWid = 6;
}

message CommitMultipleRequest{
  repeated bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 commitId = 3;
  required int32 participantNum = 4;
  repeated int32 tmTableCDCAttr = 5;
  optional bool ignoreUnknownTransactionException = 6;
}

message CommitMultipleResponse {
  repeated string exception = 1;
  optional bool hasException = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
}

message CommitRequestRequest{
  required bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 savepointId = 3;
  required int64 startEpoch = 4;
  required int32 participantNum = 5;
  required bool dropTableRecorded = 6;
  required bool skipConflictDetection = 7;
  optional bool ignoreUnknownTransactionException = 8;
  optional bytes queryContext = 9;
  optional int32 totalNum = 10;
  optional int32 ddlNum = 11;
}

message CommitRequestResponse {
  required int32 result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
  optional bytes regionName = 6;
  optional int64 currentWid = 7;
}

message CommitRequestMultipleRequest{
  repeated bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 startEpoch = 3;
  required int32 participantNum = 4;
  required bool skipConflictDetection = 5;
}

message CommitRequestMultipleResponse {
  repeated int32 result = 1;
  repeated string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message CommitIfPossibleRequest{
  required bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 startEpoch = 3;
  required int64 commitId = 4;
  required int32 participantNum = 5;
  required int32 tmTableCDCAttr = 6;
}

message CommitIfPossibleResponse {
  optional string exception = 1;
  optional bool hasException = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
}

message CommitSavepointRequest{
  required bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 savepointId = 3;
  required int64 pSavepointId = 4;
  required int32 participantNum = 5;
  optional bool ignoreUnknownTransactionException = 6;
}

message CommitSavepointResponse {
  required int32  result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message CheckAndDeleteRequest {
  required int64 transactionId = 1;
  required int64 savepointId = 2;
  required int64 pSavepointId = 3;
  required int64 startId = 4;
  required bytes regionName = 5;
  required bytes row = 6;
  required bytes family = 7;
  required bytes qualifier = 8;
  required bytes value = 9;
  required bool skipCheck = 10;
  required MutationProto delete = 11;
  optional bytes queryContext = 12;
}

message CheckAndDeleteResponse {
  required bool result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message CheckAndDeleteRegionTxRequest {
  required int64 tid = 1;
  required int64 commitId = 2;
  required bytes regionName = 3;
  required bytes row = 4;
  required bytes family = 5;
  required bytes qualifier = 6;
  required bytes value = 7;
  required MutationProto delete = 8;
  required bool autoCommit = 9;
  optional bytes queryContext = 10;
}

message CheckAndDeleteRegionTxResponse {
  required bool result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message CheckAndPutRequest {
  required int64 transactionId = 1;
  required int64 startId = 2;
  required int64 savepointId = 3;
  required int64 pSavepointId = 4;
  required bytes regionName = 5;
  required bytes row = 6;
  required bytes family = 7;
  required bytes qualifier = 8;
  required bytes value = 9;
  required bool skipCheck = 10;
  required MutationProto put = 11;
  required bytes capValue = 12;
  optional bytes queryContext = 13;
  optional bool keepOldRow = 14;
}

message CheckAndPutResponse {
  required bool result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message CheckAndPutRegionTxRequest {
  required int64 tid = 1;
  required int64 commitId = 2;
  required bytes regionName = 3;
  required bytes row = 4;
  required bytes family = 5;
  required bytes qualifier = 6;
  required bytes value = 7;
  required MutationProto put = 8;
  required bool autoCommit = 9;
  optional bytes queryContext = 10;
}

message CheckAndPutRegionTxResponse {
  required bool result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message CloseScannerRequest {
  required int64 transactionId = 1;
  required bytes regionName = 2;
  required int64 scannerId = 3;
}

message CloseScannerResponse {
  optional string exception = 1;
  optional bool hasException = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
}

message DeleteMultipleTransactionalRequest {
  required int64 transactionId = 1;
  required int64 savepointId = 2;
  required int64 pSavepointId = 3;
  required int64 startId = 4;
  required bytes regionName = 5;
  repeated MutationProto delete = 6;
  optional bool noConflictCheckForIndex = 7;
  optional bytes queryContext = 8;
  optional bool keepOldRow = 9;
}

message DeleteMultipleTransactionalResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message DeleteMultipleNonTransactionalRequest {
  required int64 nonTransactionId = 1;
  required int64 commitId = 2;
  required int64 flags = 3;
  repeated MutationProto delete = 4;
  required bytes regionName = 5;
  optional bytes queryContext = 6;
}

message DeleteMultipleNonTransactionalResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message DeleteRegionTxRequest {
  required int64 tid = 1;
  required int64 commitId = 2;
  required bytes regionName = 3;
  required MutationProto delete = 4;
  required bool autoCommit = 5;
  optional bytes queryContext = 6;
}

message DeleteRegionTxResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message DeleteTransactionalRequest {
  required int64 transactionId = 1;
  required int64 savepointId = 2;
  required int64 pSavepointId = 3;
  required int64 startId = 4;
  required bytes regionName = 5;
  required MutationProto delete = 6;
  optional bool noConflictCheckForIndex = 7;
  optional bytes queryContext = 8;
  optional bool keepOldRow = 9;
}

message DeleteTransactionalResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message GetTransactionalRequest {
  required int64 transactionId = 1;
  required int64 savepointId = 2;
  required int64 pSavepointId = 3;
  required int64 startId = 4;
  required bool  skipScanConflict = 5;
  required bytes regionName = 6;
  required Get get = 7;
  required int32 isolationLevel = 8;
  required bool waitOnSelectForUpdate = 9;
  required int32 lockMode = 10;
  optional bytes queryContext = 11;
}

message GetTransactionalResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message GetMultipleTransactionalRequest {
  required int64 transactionId = 1;
  required int64 savepointId = 2;
  required int64 pSavepointId = 3;
  required int64 startId = 4;
  required bool  skipScanConflict = 5;
  required bytes regionName = 6;
  required int32 isolationLevel = 7;
  required bool waitOnSelectForUpdate = 8;
  required int32 lockMode = 9;
  repeated Get get = 10;
  optional bytes queryContext = 11;
}

message GetMultipleTransactionalResponse {
  repeated Result result = 1;
  required int64  count = 2;
  optional string exception = 3;
  optional bool hasException = 4;
  optional int64 coproSTime = 5;
  optional int64 coproETime = 6;
}

message OpenScannerRequest {
  required int64 transactionId = 1;
  required int64 savepointId = 2;
  required int64 pSavepointId = 3;
  required int64 startId = 4;
  required bool  skipScanConflict = 5;
  required bytes regionName = 6;
  required Scan scan = 7;
  required int32 isolationLevel = 8;
  required int32 lockMode = 9;
  optional bytes queryContext = 10;
}

message OpenScannerResponse {
  required int64 scannerId = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message PerformScanRequest {
  required int64 transactionId = 1;
  required int64 savepointId = 2;
  required int64 pSavepointId = 3;
  required int64 startId = 4;
  required bytes regionName = 5;
  required int64 scannerId = 6;
  required int32 numberOfRows = 7;
  required Scan  scan = 8;
  required bool  closeScanner = 9;
  required bool  skipScanConflict = 10;
  required bool  autoOpen = 11;
  required int64 nextCallSeq = 12;
  required int32 isolationLevel = 13;
  required int32 lockMode = 14;
  optional bytes queryContext = 15;
}

message PerformScanResponse {
  repeated Result result = 1;
  required int64  count = 2;
  required int64  nextCallSeq = 3;
  required bool   hasMore = 4;
  required int64  scannerId = 5;
  required bool   scannerIsClosed = 6;
  optional string exception = 7;
  optional bool   hasException = 8;
  optional int64 coproSTime = 9;
  optional int64 coproETime = 10;
}

message PutRegionTxRequest {
  required int64 tid = 1;
  required int64 commitId = 2;
  required bytes regionName = 3;
  required MutationProto put = 4;
  required bool  autoCommit = 5;
  optional bytes queryContext = 6;
}

message PutRegionTxResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message PutTransactionalRequest {
  required int64 transactionId = 1;
  required int64 startId = 2;
  required int64 savepointId = 3;
  required int64 pSavepointId = 4;
  required bytes regionName = 5;
  required MutationProto put = 6;
  optional bool noConflictCheckForIndex = 7;
  optional bytes queryContext = 8;
  optional bool keepOldRow = 9;
}

message PutTransactionalResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message PutMultipleTransactionalRequest {
  required int64 transactionId = 1;
  required int64 savepointId = 2;
  required int64 pSavepointId = 3;
  required int64 startId = 4;
  required bytes regionName = 5;
  repeated MutationProto put = 6;
  optional bool noConflictCheckForIndex = 7;
  optional bytes queryContext = 8;
  optional bool keepOldRow = 9;
}

message PutMultipleTransactionalResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message PutMultipleNonTransactionalRequest {
  required int64 nonTransactionId = 1;
  required int64 commitId = 2;  
  required int64 flags = 3;
  repeated MutationProto put = 4;
  optional bytes regionName = 5;
  optional int32 totalNum = 6;
  optional bytes queryContext = 7;
}

message PutMultipleNonTransactionalResponse {
  optional Result result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message PushEpochRequest{
  required bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 epoch = 3;
}

message PushEpochResponse{
  optional string exception = 1;
  optional bool hasException = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
}

message RecoveryRequestRequest {
  required int64 transactionId = 1;
  required bytes regionName = 2;
  required int32 tmId = 3;
}

message RecoveryRequestResponse {
  repeated int64 result = 1;
  optional string exception = 2;
  optional bool hasException = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message TlogDeleteRequest{
  required bytes regionName = 1;
  required Scan scan = 2;
  required int64 auditSeqNum = 3;
  required bool ageCommitted = 4;
}

message TlogDeleteResponse {
  repeated Result result = 1;
  required int64  count = 2;
  optional bool hasException = 3;
  optional string exception = 4;
  optional int64 coproSTime = 5;
  optional int64 coproETime = 6;
}

message TlogWriteRequest{
  required bytes regionName = 1;
  required int64 transactionId = 2;
  required MutationProto put = 3;
  required bytes family = 4;
  required bytes qualifier = 5;
  required int64 commitId = 6;
  optional bool forced = 7;
}

message TlogWriteResponse {
  repeated int64 result = 1;
  optional bool  hasException = 2;
  optional string exception = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message TlogTransactionStatesFromIntervalRequest{
  required int64 clusterId = 1;
  required int64 auditSeqNum =2;
  required Scan scan = 3;
}

message TlogTransactionStatesFromIntervalResponse {
  repeated Result result = 1;
  required int64  count = 2;
  optional string exception = 3;
  optional bool hasException = 4;
  optional int64 coproSTime = 5;
  optional int64 coproETime = 6;
}

message BroadcastRequest {
  required int32 requestType = 1;
  required bool requestBool = 2;
}

message BroadcastResponse {
  required int32 result = 1;
  optional bool hasException = 2;
  optional string exception = 3;
  optional int64 coproSTime = 4;
  optional int64 coproETime = 5;
}

message TrafEstimateRowCountRequest {
  // numCols = 1 for aligned tables; = # columns for non-aligned tables
  required int32 numCols = 1;  
}

message TrafEstimateRowCountResponse {
  required int64 totalEntries = 1;
  required int64 totalSizeBytes = 2;
  // the next three values will be non-zero only for the first region,
  // and only when the format is non-aligned
  required int32 putKVsSampled = 3;
  required int32 nonPutKVsSampled = 4;
  required int32 missingKVsCount = 5;
  optional string exception = 6;
  optional bool hasException = 7;
  optional int64 coproSTime = 8;
  optional int64 coproETime = 9;
}

message TrafSetStoragePolicyRequest {
  required  string path = 1;
  required  string policy = 2;
}

message TrafSetStoragePolicyResponse {
  required bool status = 1;
  required string exception = 2;
  optional int64 coproSTime = 3;
  optional int64 coproETime = 4;
}

message TransactionalAggregateRequest {
  /** The request passed to the TransactionalAggregateService consists of three parts
   *  (1) the (canonical) classname of the ColumnInterpreter implementation
   *  (2) the Scan query
   *  (3) any bytes required to construct the ColumnInterpreter object
   *      properly
   */
  repeated bytes regionName = 1;
  required int64 transactionId = 2;
  required int64 savepointId = 3;
  required int64 pSavepointId = 4;
  required int64 startId = 5;
  required string interpreter_class_name = 6;
  required Scan scan = 7;
  optional bytes  interpreter_specific_bytes = 8;
  optional bytes queryContext = 9;
  required int32 isolationLevel = 10;
  required int32 lockMode = 11;
}

message TransactionalAggregateResponse {
  /**
   * The TransactionalAggregateService methods all have a response that either is a Pair
   * or a simple object. When it is a Pair both first_part and second_part
   * have defined values (and the second_part is not present in the response
   * when the response is not a pair). Refer to the TransactionalAggregateImplementation 
   * class for an overview of the TransactionalAggregateResponse object constructions. 
   */ 
  repeated bytes first_part = 3;
  optional bytes second_part = 4;
  optional bool hasException = 5;
  optional string exception = 6;
  optional int64 coproSTime = 7;
  optional int64 coproETime = 8;
}

message TransactionPersist {
  repeated int64 txById = 1;
  repeated int64 seqNoListSeq = 2;
  repeated int64 seqNoListTxn = 3;
  required int64 nextSeqId = 4;
  required int64 onlineEpoch = 5;
  required bool shieldFromRemote = 6;
}

message TransactionStateMsg {
  required int64 txId = 1;
  repeated MutationProto put = 2;
  repeated MutationProto delete = 3;
  repeated bool putOrDel = 4;
  repeated int64 savepointId = 5;
  repeated int64 pSavepointId = 6;
  repeated int64 txnsToCheck = 7;
  repeated bytes sr_start_row = 8;
  repeated bytes sr_end_row = 9;
  repeated int64 sr_svpt = 10;
  repeated int64 sr_psvpt = 11;
  required int64 startSeqNum = 12;
  required int64 seqNum = 13;
  required int64 logSeqId = 14;
  required bool reinstated = 15;
  required int32 status = 16;
  required int32 commitProgress = 17;
  optional string sel_for_upd_locks = 18;
}

message TransactionMutationMsg {
  required int64 txId = 1;
  required string tableName = 2;
  repeated MutationProto put = 3;
  repeated MutationProto delete = 4;
  repeated bool putOrDel = 5;
  required int64 startId = 6;
  required int64 commitId = 7;
  optional int32 tableCDCAttr = 8;
  optional bool isMsgComplete = 9 [default = true];
  optional int32 totalNum = 10;
  optional string clientInfo = 11;
  optional int64 splitSeq = 12;
  optional int32 ddlNum = 13;
}

message ImportLaunchRequest {
  required bytes snapshotName = 1;
  required bytes copyTo = 2;
  required bytes copyFrom = 3;
  required bytes mappers = 4;
  required bytes tag = 5;
}

message ImportLaunchResponse {
  required int32 result = 1;
  optional bool hasException = 2;
  optional string exception = 3;
}

message ImportStatusRequest {
  required bytes snapshotName = 1;
  required bytes tag = 2;
}

message ImportStatusResponse {
  required int32 result = 1;
  optional bool hasException = 2;
  optional string exception = 3;
}

message LockRequiredRequest {
  required int32 lockMode = 1;
  required int64 transactionId = 2;
  required int64 savepointId = 3;
  required int64 pSavepointId = 4;
  optional bytes regionName = 5;
  optional bytes queryContext = 6;
}

message LockRequiredResponse {
  optional Result result = 1;
  optional bool hasException = 2;
  optional string exception = 3;
}

message ReleaseLockRequest {
  repeated int64 transactionIds = 1;
  optional bytes regionName = 2;
}

message ReleaseLockResponse {
  optional Result result = 1;
  optional bool hasException = 2;
  optional string exception = 3;
}

service TrxRegionService {
  rpc generalBinlogCommand(GeneralBinlogCommandRequest)
    returns(GeneralBinlogCommandResponse
  rpc abortSavepoint(AbortSavepointRequest)
    returns(AbortSavepointResponse);
  rpc abortTransaction(AbortTransactionRequest)
    returns(AbortTransactionResponse);
  rpc abortTransactionMultiple (AbortTransactionMultipleRequest)
    returns(AbortTransactionMultipleResponse);
  rpc beginTransaction(BeginTransactionRequest)
    returns(BeginTransactionResponse);
  rpc broadcastRequest(BroadcastRequest) 
    returns (BroadcastResponse);
  rpc importLaunch(ImportLaunchRequest) 
    returns (ImportLaunchResponse);
  rpc importStatus(ImportStatusRequest) 
    returns (ImportStatusResponse);
  rpc checkAndDelete(CheckAndDeleteRequest)
    returns(CheckAndDeleteResponse);
  rpc checkAndDeleteRegionTx(CheckAndDeleteRegionTxRequest)
    returns(CheckAndDeleteRegionTxResponse);
  rpc checkAndPut(CheckAndPutRequest)
    returns(CheckAndPutResponse);
  rpc checkAndPutRegionTx(CheckAndPutRegionTxRequest)
    returns(CheckAndPutRegionTxResponse);
  rpc closeScanner(CloseScannerRequest)
    returns(CloseScannerResponse);
  rpc commit(CommitRequest)
    returns(CommitResponse);
  rpc commitIfPossible(CommitIfPossibleRequest)
    returns(CommitIfPossibleResponse);
  rpc commitRequestMultiple(CommitRequestMultipleRequest)
    returns(CommitRequestMultipleResponse);
  rpc commitMultiple(CommitMultipleRequest)
    returns(CommitMultipleResponse);
  rpc commitRequest(CommitRequestRequest)
    returns(CommitRequestResponse);
  rpc commitSavepoint(CommitSavepointRequest)
    returns(CommitSavepointResponse);
  rpc deleteRegionTx(DeleteRegionTxRequest)
    returns(DeleteRegionTxResponse);
  rpc delete(DeleteTransactionalRequest)
    returns(DeleteTransactionalResponse);
  rpc deleteMultiple(DeleteMultipleTransactionalRequest)
    returns(DeleteMultipleTransactionalResponse);
  rpc deleteMultipleNonTxn(DeleteMultipleNonTransactionalRequest)
    returns(DeleteMultipleNonTransactionalResponse);
  rpc get(GetTransactionalRequest)
    returns(GetTransactionalResponse);
  rpc getMultiple(GetMultipleTransactionalRequest)
    returns(GetMultipleTransactionalResponse);
  rpc performScan(PerformScanRequest)
    returns(PerformScanResponse);
  rpc openScanner(OpenScannerRequest)
    returns(OpenScannerResponse);
  rpc putRegionTx(PutRegionTxRequest)
    returns(PutRegionTxResponse);
  rpc put(PutTransactionalRequest)
    returns(PutTransactionalResponse);
  rpc putMultiple(PutMultipleTransactionalRequest)
    returns(PutMultipleTransactionalResponse);
  rpc putMultipleNonTxn(PutMultipleNonTransactionalRequest)
    returns(PutMultipleNonTransactionalResponse);
  rpc pushOnlineEpoch(PushEpochRequest)
    returns(PushEpochResponse);
  rpc recoveryRequest(RecoveryRequestRequest)
    returns(RecoveryRequestResponse);
  rpc deleteTlogEntries(TlogDeleteRequest)
    returns(TlogDeleteResponse);
  rpc putTlog(TlogWriteRequest)
    returns(TlogWriteResponse);
  rpc getTransactionStatesPriorToAsn(TlogTransactionStatesFromIntervalRequest)
    returns(TlogTransactionStatesFromIntervalResponse);
  rpc trafEstimateRowCount(TrafEstimateRowCountRequest)
    returns(TrafEstimateRowCountResponse);
  rpc GetMax (TransactionalAggregateRequest)
    returns (TransactionalAggregateResponse);
  rpc GetMin (TransactionalAggregateRequest) 
    returns (TransactionalAggregateResponse);
  rpc GetSum (TransactionalAggregateRequest) 
    returns (TransactionalAggregateResponse);
  rpc GetRowNum (TransactionalAggregateRequest) 
    returns (TransactionalAggregateResponse);
  rpc GetAvg (TransactionalAggregateRequest) 
    returns (TransactionalAggregateResponse);
  rpc GetStd (TransactionalAggregateRequest) 
    returns (TransactionalAggregateResponse);
  rpc GetMedian (TransactionalAggregateRequest) 
    returns (TransactionalAggregateResponse);
  rpc setStoragePolicy (TrafSetStoragePolicyRequest)
    returns (TrafSetStoragePolicyResponse);
  rpc lockRequired (LockRequiredRequest)
    returns (LockRequiredResponse);
  rpc releaseLock (ReleaseLockRequest)
    returns (ReleaseLockResponse);
}
