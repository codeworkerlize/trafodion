
This is a porting of parquet-cpp version 1.4.0 and partial porting of Arrow 0.9.0 (16 March 2018) 
to EsgynDB to evaluate the performance of C++ parquet reader running in single or multiple threads.

parquet-cpp was obtained from https://github.com/apache/parquet-cpp while arrow was obtained from 
https://github.com/apache/arrow.

Note that since parquet-cpp requires g++ 4.8 due to the use of many C11 features, this version of 
esgynDB (R2.5) has to be compiled under centos7 with the definition of the shell variable 
BUILD_PARQUET_READER (export BUILD_PARQUET_READER=1). On cenos6, esgynDB can still be built correctly
if variable BUILD_PARQUET_READER is not set.

Here are some notes regarding porting both packages to EsgynDB.

1. CMake makefiles in both packages are not used. Instead, a new make file (nskgmake/parquet/Makefile) 
   is added for the project;
2. Two target executables are built: arrow_reader and parquet_reader. The arrow_reader utilizes the 
   class array, chunkedArray, Column and Table classes in arrow to fulfill the task of scan all columns 
   of a parquet data file. The parquet_reader utilizes the classes in parquet-cpp for the same task. A
   noted differeence is that the arrow reader can deploy multiple threads to speed up the task; 
4. Whenever possible, the phase "esgyn port" is added in the source code to indicate a change necessary;
5. Pattern matching based on regular expressions does not work in g++ 4.8. As a result, the logic to 
   figure out the version identification (major, minor, build etc) of a parquet data file is replaced 
   by the strtok() method;
6. A full implementation of std::filesystem does not exist in g++4.8 yet.  fs::path, where
   fs=boost::filesystem, is replaced by std::string. See arrow/io/hdfs-internal.cc;
7. The boost library is only used to support thrift represention of the parquet data element layout. In 
   the rest of code, the dependency to boost is removed;
8. None of memory management functions have been altered to integrate with EsgynDB;
9. Make target arrow_reader_test buidls the test program arrow_reader, while target parquet_reader_test 
   builds the test program parquet_reader.

