-- ============================================================================
-- TEST145 - tests grant and revoke privileges native Hive tables (no Sentry)
--
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- ============================================================================

cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd HIVE_VIEWS 'ON';
sh rm $REGRRUNDIR/LOG145.hive.log;
sh regrhadoop.ksh fs -mkdir  /user/trafodion/hive/exttables;


obey TEST145(clean_up);
grant component privilege "SHOW" on sql_operations to "PUBLIC";
insert into "_MD_".defaults values ('CAT_ANSI_PRIVS_FOR_TENANT', 'ON', 'for testing', 0);
cqd CAT_ANSI_PRIVS_FOR_TENANT 'ON';

log LOG145 clear;
obey TEST145(create_db);
obey TEST145(set_up);
obey TEST145(ext_tbls);
obey TEST145(test_grants);
obey TEST145(test_revokes);
log;

obey TEST145(clean_up);

exit;

?section clean_up
-- =================================================================
-- remove tests
-- =================================================================

grant component privilege "SHOW" on sql_operations to "PUBLIC";
grant component privilege "CREATE_SCHEMA" on sql_operations to "PUBLIC";
revoke component privilege "SHOW" on sql_operations from sql_user6;
revoke component privilege "CREATE_SCHEMA" on sql_operations from t145_role3;
revoke role DB__HIVEROLE from sql_user5;
revoke role t145_role3 from sql_user5;
revoke role t145_role2 from sql_user6;

revoke insert, delete on hive.t145_sch.t145t1 from t145_role2;

unregister hive table hive.hive.customer;
unregister hive table hive.hive.customer_orc; 
unregister hive table hive.hive.date_dim;
unregister hive table hive.hive.store_sales_orc;
unregister hive table hive.hive.time_dim;
unregister hive table hive.hive.store;
drop external table store for hive.hive.store;
unregister hive table hive.hive.store_orc;
drop external table store_orc for hive.hive.store_orc;
unregister hive table hive.t145_sch.t145t1;
unregister hive table hive.t145_sch.t145t2;

drop role t145_role1;
drop role t145_role2;
drop role t145_role3;
sh regrhive.ksh -v -f $REGRTSTDIR/t145.drop.hive &>> $REGRRUNDIR/LOG145.hive.log;

revoke COMPONENT PRIVILEGE "SHOW" on sql_operations from "PUBLIC" by sql_user5;

delete from "_MD_".defaults where attribute = 'CAT_ANSI_PRIVS_FOR_TENANT';

?section create_db
-- =================================================================
-- add trafodion external tables, create native hive tables/views,
-- create roles
-- =================================================================

-- create hive tables that can be changed
sh regrhive.ksh -v -f $REGRTSTDIR/t145.create.hive &>> $REGRRUNDIR/LOG145.hive.log;
obey TEST145 (load_tbls);

-- create views on hive tables

create role t145_role1;
create role t145_role2;
create role t145_role3;

get tables in schema hive.t145_sch;

obey TEST145(show_cmds);

?section load_tbls;
-- =================================================================
-- load data into hive tables
-- =================================================================
insert overwrite table hive.t145_sch.t145t1 values
  (1,1,1), (2,2,2), (3,3,3), (4,4,4), (5,5,5), (6,6,6), (7,7,7), (8,8,8);
insert overwrite table hive.t145_sch.t145t2 values
  (1,1,1), (2,2,2), (3,3,3), (4,4,4), (5,5,5), (6,6,6), (7,7,7), (8,8,8);
select * from hive.t145_sch.t145t1;
select * from hive.t145_sch.t145t2;

?section show_cmds
-- =================================================================
-- show hive objects
-- =================================================================
showddl hive.hive.store;
showddl hive.hive.store_orc;
showddl hive.t145_sch.t145t1;
showddl hive.t145_sch.t145t2;

?section set_up
-- =================================================================
-- Perform any specific setup information
-- =================================================================
select grantor_id, component_uid, operation_code  
  from "_PRIVMGR_MD_".component_privileges where grantee_id = -1;

revoke component privilege "SHOW" on sql_operations from "PUBLIC";
select grantor_id, component_uid, operation_code  
  from "_PRIVMGR_MD_".component_privileges where grantee_id = -1;

revoke component privilege "CREATE_SCHEMA" on sql_operations from "PUBLIC";
select grantor_id, component_uid, operation_code  
  from "_PRIVMGR_MD_".component_privileges where grantee_id = -1;

get privileges on component sql_operations for "PUBLIC";

grant role DB__HIVEROLE to sql_user5;
grant role t145_role3 to sql_user5;
showddl role DB__HIVEROLE;

grant role t145_role2 to sql_user6;
grant component privilege "SHOW" on sql_operations to sql_user6;
grant component privilege "CREATE_SCHEMA" on sql_operations to t145_role3; 

?section ext_tbls
-- =================================================================
-- Verify external tables are created as designed
-- =================================================================

-- create an external table on hive.hive.store by a user with no privs
sh sqlci -i "TEST145(create_ext_table)" -u sql_user2;
-- create an external table by DB__ROOT
create external table store_orc for hive.hive.store_orc;
showddl hive.hive.store_orc;
-- create an external table by user with hive admin privs
sh sqlci -i "TEST145(create_ext_table)" -u sql_user5;

?section test_grants
-- =================================================================
-- this set of tests run basic grant tests for native Hive tables
-- =================================================================

-- grant a privilege where user has no grant privilege
sh sqlci -i "TEST145(grant_store)" -u sql_user3;

-- grant privileges for the hive admin user
sh sqlci -i "TEST145(grant_store)" -u sql_user5;

-- grant remaining privileges as DB__ROOT
grant insert, delete on hive.t145_sch.t145t1 to t145_role2;
grant all on hive.t145_sch.t145t1 to sql_user1 with grant option;
grant all on hive.t145_sch.t145t2 to sql_user1 with grant option;
grant select, insert on hive.t145_sch.t145t1 to sql_user2 by sql_user1;
grant select, delete on hive.t145_sch.t145t1 to sql_user4;
showddl hive.t145_sch.t145t1;
showddl hive.t145_sch.t145t2;

-- user1 can select and update all tables
sh sqlci -i "TEST145(perform_dml)" -u sql_user1;
sh sqlci -i "TEST145(perform_utils)" -u sql_user1;
obey TEST145(load_tbls);

--user2 can select, insert into t145t1
sh sqlci -i "TEST145(perform_dml)" -u sql_user2;

-- user3 can select and update statistics on store_orc
sh sqlci -i "TEST145(perform_dml)" -u sql_user3;
sh sqlci -i "TEST145(perform_utils)" -u sql_user3;

-- user4 can select, update stats, and trucate on t145t1
sh sqlci -i "TEST145(perform_dml)" -u sql_user4;
sh sqlci -i "TEST145(perform_utils)" -u sql_user4;
obey TEST145(load_tbls);

-- user5 can do everything as HIVE_ADMIN
sh sqlci -i "TEST145(perform_dml)" -u sql_user5;

-- user6 can do what t145_role2 has been granted (I,D on t145t1)
sh sqlci -i "TEST145(perform_dml)" -u sql_user6;


?section test_revokes
-- ============================================================================
-- verify that revoking privileges work as expected on native Hive tables
-- ============================================================================
set schema hive.t145_sch;

-- user4 can't do anything
revoke select, delete on hive.t145_sch.t145t1 from sql_user4;
sh sqlci -i "TEST145(perform_dml)" -u sql_user4;
sh sqlci -i "TEST145(perform_utils)" -u sql_user4;

--user2 can on only select from t145t1
revoke insert on hive.t145_sch.t145t1 from sql_user2 by sql_user1;
sh sqlci -i "TEST145(perform_dml)" -u sql_user2;

-- user6 can't do anything
revoke role t145_role2 from sql_user6;
sh sqlci -i "TEST145(perform_dml)" -u sql_user6;

?section create_ext_table
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd HIVE_VIEWS 'ON';
log LOG145;

values(user);
create external table store for hive.hive.store;
showddl hive.hive.store;

?section grant_store
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd HIVE_VIEWS 'ON';
log LOG145;

values(user);
grant all on hive.hive.store to t145_role1 by db__hiverole;
grant all on hive.hive.store_orc to t145_role1 by db__hiverole;
grant all on hive.hive.store to sql_user1 with grant option by db__hiverole;
grant all on hive.hive.store_orc to sql_user1 with grant option by db__hiverole;
grant select(s_store_sk, s_number_employees) on hive.hive.store to sql_user3 by db__hiverole;
grant select on hive.hive.store_orc to sql_user3 by db__hiverole;
showddl hive.hive.store;
showddl hive.hive.store_orc;

?section perform_dml
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd HIVE_VIEWS 'ON';
log LOG145;

values (user);
select count(*) from hive.hive.store;
select count(*) from hive.hive.store_orc;
select [first 3] s_store_sk, s_number_employees 
  from hive.hive.store order by s_store_sk;
select * from hive.t145_sch.t145t1 order by a;
select * from hive.t145_sch.t145t2 order by a;
insert into hive.t145_sch.t145t1 values (12,12,12);
insert into hive.t145_sch.t145t2 values (12,12,12);
delete from hive.t145_sch.t145t1 where a = 12;
update hive.t145_sch.t145t1 set a = 13 where a = 12;

?section perform_utils
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd HIVE_VIEWS 'ON';
log LOG145;

values (user);
update statistics for table hive.hive.store_orc on every column sample;
update statistics for table hive.hive.store on every column sample;
update statistics for table hive.t145_sch.t145t1 on every column sample;
update statistics for table hive.t145_sch.t145t2 on every column sample;
truncate table hive.t145_sch.t145t1;
truncate table hive.t145_sch.t145t2;


