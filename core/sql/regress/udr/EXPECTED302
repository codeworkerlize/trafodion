>>obey TEST302(setup);
>>
>>create table t1 (a varchar(100));

--- SQL operation complete.
>>create table t2 (a varchar(100));

--- SQL operation complete.
>>insert into t2 values (' abcdef ');

--- 1 row(s) inserted.
>>create table t3 (p int);

--- SQL operation complete.
>>create table t4 (a int);

--- SQL operation complete.
>>create table t5(a int);

--- SQL operation complete.
>>insert into t5 values(1);

--- 1 row(s) inserted.
>>create table t302_tab_test_cursor_with_params(a int, b varchar(10));

--- SQL operation complete.
>>insert into t302_tab_test_cursor_with_params values(1,'a');

--- 1 row(s) inserted.
>>insert into t302_tab_test_cursor_with_params values(2,'b');

--- 1 row(s) inserted.
>>create table T302_transaction(a int);

--- SQL operation complete.
>>create table table_test_execute_proc(a int);

--- SQL operation complete.
>>create table table_test_prepare_stmt(a varchar(10), b int);

--- SQL operation complete.
>>create table t6 (a varchar(100));

--- SQL operation complete.
>>insert into t6 values('test');

--- 1 row(s) inserted.
>>create table t302_table_test_for_cursor(a int);

--- SQL operation complete.
>>insert into t302_table_test_for_cursor values(1);

--- 1 row(s) inserted.
>>insert into t302_table_test_for_cursor values(2);

--- 1 row(s) inserted.
>>create table t302_table_test_for_cursor2(a int);

--- SQL operation complete.
>>insert into t302_table_test_for_cursor2 values(1);

--- 1 row(s) inserted.
>>insert into t302_table_test_for_cursor2 values(2);

--- 1 row(s) inserted.
>>insert into t302_table_test_for_cursor2 values(3);

--- 1 row(s) inserted.
>>create table t302_table_test_for_update(a int);

--- SQL operation complete.
>>insert into t302_table_test_for_update values(1);

--- 1 row(s) inserted.
>>create table t302_table_test_update_stmt_alias(a int);

--- SQL operation complete.
>>insert into t302_table_test_update_stmt_alias values(1);

--- 1 row(s) inserted.
>>create table t302_table_test_select_into_errmsg(a int);

--- SQL operation complete.
>>
>>obey TEST302(test);
>>
>>create or replace procedure test_interval() as //
begin
  print time '00:00:00.000000000' - interval 1 microsecond;
  print time '00:00:00.000000000' - interval 2000001 microsecond;
  print time '23:59:59.999999999' + interval 1 microsecond;
  print time '23:59:59.999999999' + interval 2000001 microsecond;

  print timestamp '2018-01-01 00:00:00.000000000' - interval 1 microsecond;
  print timestamp '2018-01-01 00:00:00.000000000' - interval 2000001 microsecond;
  print timestamp '2017-12-31 23:59:59.999999999' + interval 1 microsecond;
  print timestamp '2017-12-31 23:59:59.999999999' + interval 2000001 microsecond;
end//;

--- SQL operation complete.
>>
>>call test_interval();

(EXPR)         
---------------

23:59:59.999999

--- 1 row(s) selected.

(EXPR)         
---------------

23:59:57.999999

--- 1 row(s) selected.

(EXPR)         
---------------

00:00:00.000000

--- 1 row(s) selected.

(EXPR)         
---------------

00:00:02.000000

--- 1 row(s) selected.

(EXPR)                    
--------------------------

2017-12-31 23:59:59.999999

--- 1 row(s) selected.

(EXPR)                    
--------------------------

2017-12-31 23:59:57.999999

--- 1 row(s) selected.

(EXPR)                    
--------------------------

2018-01-01 00:00:00.000000

--- 1 row(s) selected.

(EXPR)                    
--------------------------

2018-01-01 00:00:02.000000

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create or replace package pkg as //
  i  INT := 6;
  j  NUMERIC(10,2) ;
  k  INT;
  t2row t2%ROWTYPE;
  t2a  t2.a%TYPE;
  t2cur CURSOR for select * from t2;
end//;

--- SQL operation complete.
>>
>>create or replace procedure test_pack_vars() as //
begin
  open pkg.t2cur;
  fetch pkg.t2cur into pkg.t2row;
  print pkg.t2row.a;
  close pkg.t2cur;
end//;

--- SQL operation complete.
>>
>>call test_pack_vars();

PKG.T2ROW.A
-----------

 abcdef    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create or replace procedure test_null() as //
begin
  null;
end//;

--- SQL operation complete.
>>
>>call test_null();

--- SQL operation complete.
>>
>>create or replace procedure greeting() as //
begin
  print 'Hello';
end greeting//;

--- SQL operation complete.
>>
>>create or replace  package body pkg as //
  procedure hello is
  begin
    print 'Hello';
  end hello;
end greeting//;

--- SQL operation complete.
>>
>>call greeting();

(EXPR)
------

Hello 

--- 1 row(s) selected.

--- SQL operation complete.
>>call pkg.hello();

(EXPR)
------

Hello 

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create or replace function decimal_func() return decimal(5,3) as //
begin
  return 12.3456;
end
//;

--- SQL operation complete.
>>
>>create or replace procedure test_decimal(a decimal(5,3)) as //
begin
  select a from dual;
  select decimal_func() from dual;
end//;

--- SQL operation complete.
>>
>>call test_decimal(12.3456);

(EXPR)      
------------

      12.345

--- 1 row(s) selected.

(EXPR) 
-------

 12.345

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create or replace procedure test_decimal() as //
declare
  d decimal(5,3);
  e decimal(5,2);
  f decimal(3,1);
begin
  select decimal_func() from dual;
  select decimal_func() into d from dual;
  select decimal_func() into e from dual;
  select decimal_func() into f from dual;
  print d;
  print e;
  print f;
end
//;

--- SQL operation complete.
>>
>>call test_decimal();

(EXPR) 
-------

 12.345

--- 1 row(s) selected.

D           
------------

      12.345

--- 1 row(s) selected.

E      
-------

  12.34

--- 1 row(s) selected.

F      
-------

   12.3

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>exec //
declare
  i number = 1.1;
  j number = 10.2;
begin
  delete from t3;
  for k in i..j loop
    insert into t3 values (k);
  end loop;
end;
//;

--- SQL operation complete.
>>
>>select * from t3;

P          
-----------

          1
          2
          3
          4
          5
          6
          7
          8
          9
         10

--- 10 row(s) selected.
>>
>>create or replace procedure print_sqlcode() as //
begin
  declare cnt int;
  declare continue handler for sqlexception
  begin
    print sqlcode;
    print sqlcode;
  end;

  select count(*) into cnt from dual;
  print activity_count;
  print cnt;
  print activity_count;

  select * from table_not_exist;
  print sqlcode;
  print sqlcode;
end//;

--- SQL operation complete.
>>
>>call print_sqlcode();

(EXPR)
------

     1

--- 1 row(s) selected.

CNT   
------

     1

--- 1 row(s) selected.

(EXPR)
------

     1

--- 1 row(s) selected.

SQLCODE    
-----------

      -4082

--- 1 row(s) selected.

SQLCODE    
-----------

      -4082

--- 1 row(s) selected.

SQLCODE    
-----------

      -4082

--- 1 row(s) selected.

SQLCODE    
-----------

      -4082

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create or replace procedure test_nullifzero() as //
declare
  n1 int = 5;
  n2 int = 0;
  m1 int = 1;
  m2 int = 1;
begin
  insert into t3 values (n1);
  insert into t3 values (n2);
  insert into t3 values (nullifzero(n1));
  insert into t3 values (nullifzero(n2));
  select nullifzero(n1) from dual;
  select nullifzero(n2) from dual;
  select nullifzero(n1) into m1 from dual;
  select nullifzero(n2) into m2 from dual;
  insert into t3 values (m1);
  insert into t3 values (m2);
end//;

--- SQL operation complete.
>>
>>delete from t3;

--- 10 row(s) deleted.
>>call test_nullifzero();

(EXPR)
------

     5

--- 1 row(s) selected.

(EXPR)
------

     ?

--- 1 row(s) selected.

--- SQL operation complete.
>>select * from t3;

P          
-----------

          5
          0
          5
          ?
          5
          ?

--- 6 row(s) selected.
>>
>>drop table if exists t302_datetime;

--- SQL operation complete.
>>create table t302_datetime (c1 time, c2 timestamp, c3 date);

--- SQL operation complete.
>>
>>create or replace procedure test_datetime() as //
declare
  a time := '21:57:33';
  b timestamp := '2018-07-10 21:57:33';
  c date := '2018-07-10';
  d int := 1;
  e varchar := '7';
begin
  insert into t302_datetime values (a, b, c);
  insert into t302_datetime values (a, add_months(b, 1), c);
  insert into t302_datetime values (a, add_months(b, 1), date_add(c, INTERVAL '7' DAY));
  insert into t302_datetime values (a, add_months(b, d), date_add(c, INTERVAL e DAY));

  select * from t302_datetime;
  select c1, add_months(c2, 1), c3 from t302_datetime;
  select c1, add_months(c2, 1), date_add(c3, INTERVAL '7' DAY) from t302_datetime;
  select c1, add_months(c2, 1), date_add(c3, INTERVAL e DAY) from t302_datetime;

  select extract(hour from a) from dual;
  select extract(minute from a) from dual;
  select extract(second from a) from dual;

  select extract(year from b) from dual;
  select extract(month from b) from dual;
  select extract(day from b) from dual;
  select extract(hour from b) from dual;
  select extract(minute from b) from dual;
  select extract(second from b) from dual;

  select extract(year from c) from dual;
  select extract(month from c) from dual;
  select extract(day from c) from dual;

  select extract(hour from c1) from t302_datetime;
  select extract(minute from c1) from t302_datetime;
  select extract(second from c1) from t302_datetime;

  select extract(year from c2) from t302_datetime;
  select extract(month from c2) from t302_datetime;
  select extract(day from c2) from t302_datetime;
  select extract(hour from c2) from t302_datetime;
  select extract(minute from c2) from t302_datetime;
  select extract(second from c2) from t302_datetime;

  select extract(year from c3) from t302_datetime;
  select extract(month from c3) from t302_datetime;
  select extract(day from c3) from t302_datetime;

  print extract(hour from a);
  print extract(minute from b);
  print extract(second from b);
  print extract(year from b);
  print extract(month from c);
  print extract(day from c);
end//;

--- SQL operation complete.
>>
>>call test_datetime();

C1        C2                          C3        
--------  --------------------------  ----------

21:57:33  2018-07-10 21:57:33.000000  2018-07-10
21:57:33  2018-08-10 21:57:33.000000  2018-07-10
21:57:33  2018-08-10 21:57:33.000000  2018-07-17
21:57:33  2018-08-10 21:57:33.000000  2018-07-17

--- 4 row(s) selected.

C1        (EXPR)                      C3        
--------  --------------------------  ----------

21:57:33  2018-08-10 21:57:33.000000  2018-07-10
21:57:33  2018-09-10 21:57:33.000000  2018-07-10
21:57:33  2018-09-10 21:57:33.000000  2018-07-17
21:57:33  2018-09-10 21:57:33.000000  2018-07-17

--- 4 row(s) selected.

C1        (EXPR)                      (EXPR)    
--------  --------------------------  ----------

21:57:33  2018-08-10 21:57:33.000000  2018-07-17
21:57:33  2018-09-10 21:57:33.000000  2018-07-17
21:57:33  2018-09-10 21:57:33.000000  2018-07-24
21:57:33  2018-09-10 21:57:33.000000  2018-07-24

--- 4 row(s) selected.

C1        (EXPR)                      (EXPR)    
--------  --------------------------  ----------

21:57:33  2018-08-10 21:57:33.000000  2018-07-17
21:57:33  2018-09-10 21:57:33.000000  2018-07-17
21:57:33  2018-09-10 21:57:33.000000  2018-07-24
21:57:33  2018-09-10 21:57:33.000000  2018-07-24

--- 4 row(s) selected.

(EXPR)
------

    21

--- 1 row(s) selected.

(EXPR)
------

    57

--- 1 row(s) selected.

(EXPR)
------

    33

--- 1 row(s) selected.

(EXPR)
------

  2018

--- 1 row(s) selected.

(EXPR)
------

     7

--- 1 row(s) selected.

(EXPR)
------

    10

--- 1 row(s) selected.

(EXPR)
------

    21

--- 1 row(s) selected.

(EXPR)
------

    57

--- 1 row(s) selected.

(EXPR)     
-----------

         33

--- 1 row(s) selected.

(EXPR)
------

  2018

--- 1 row(s) selected.

(EXPR)
------

     7

--- 1 row(s) selected.

(EXPR)
------

    10

--- 1 row(s) selected.

(EXPR)
------

    21
    21
    21
    21

--- 4 row(s) selected.

(EXPR)
------

    57
    57
    57
    57

--- 4 row(s) selected.

(EXPR)
------

    33
    33
    33
    33

--- 4 row(s) selected.

(EXPR)
------

  2018
  2018
  2018
  2018

--- 4 row(s) selected.

(EXPR)
------

     7
     8
     8
     8

--- 4 row(s) selected.

(EXPR)
------

    10
    10
    10
    10

--- 4 row(s) selected.

(EXPR)
------

    21
    21
    21
    21

--- 4 row(s) selected.

(EXPR)
------

    57
    57
    57
    57

--- 4 row(s) selected.

(EXPR)     
-----------

         33
         33
         33
         33

--- 4 row(s) selected.

(EXPR)
------

  2018
  2018
  2018
  2018

--- 4 row(s) selected.

(EXPR)
------

     7
     7
     7
     7

--- 4 row(s) selected.

(EXPR)
------

    10
    10
    17
    17

--- 4 row(s) selected.

(EXPR)
------

    21

--- 1 row(s) selected.

(EXPR)
------

    57

--- 1 row(s) selected.

(EXPR)
------

    33

--- 1 row(s) selected.

(EXPR)
------

  2018

--- 1 row(s) selected.

(EXPR)
------

     7

--- 1 row(s) selected.

(EXPR)
------

    10

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create or replace procedure test_position() as //
begin
  declare s varchar(100) = ' abcdef ';
  declare t char = 'a';
  select position(t in s) from dual;
  select position(t in a) from t2;
  insert into t3 values (position(t in s));
end//;

--- SQL operation complete.
>>
>>delete from t3;

--- 6 row(s) deleted.
>>call test_position();

(EXPR)    
----------

         2

--- 1 row(s) selected.

(EXPR)    
----------

         2

--- 1 row(s) selected.

--- SQL operation complete.
>>select * from t3;

P          
-----------

          2

--- 1 row(s) selected.
>>
>>create or replace procedure test_substr() as //
begin
  declare s varchar(100) = ' abcdef ';
  declare i int = 3;
  declare j int = 3;
  declare k int = 0;
  declare l int = 1;
  select substr(' abcdef ', 3, 3) from dual;
  select substr(' abcdef ' from 3 for 3) from dual;
  select substring(' abcdef ', 3, 3) from dual;
  select substring(' abcdef ' from 3 for 3) from dual;

  select substr(s, i, j) from dual;
  select substr(s from i for j) from dual;
  select substring(s, i, j) from dual;
  select substring(s from i for j) from dual;

  select substr(a, i, j) from t2;
  select substr(a from i for j) from t2;
  select substring(a, i, j) from t2;
  select substring(a from i for j) from t2;

  insert into t1 values (substr(s, 3, 3));
  insert into t1 values (substr(s from 3 for 3));
  insert into t1 values (substring(s, 3, 3));
  insert into t1 values (substring(s from 3 for 3));

  insert into t1 values (substr(s, i, j));
  insert into t1 values (substr(s from i for j));
  insert into t1 values (substring(s, i, j));
  insert into t1 values (substring(s from i for j));
end//;

--- SQL operation complete.
>>
>>call test_substr();

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

(EXPR)
------

bcd   

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>select * from t1;

A
----------------------------------------------------------------------------------------------------

bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 

--- 8 row(s) selected.
>>
>>create or replace procedure test_trim() as //
begin
  declare s varchar(100) = ' abcdef ';
  select trim(s) from dual;
  select trim(a) from t2;
  select concat(trim(a), ' ABCD') from t2;
  select trim(a) || ' ABCD' from t2;
  select trim(concat (a, ' ABCD')) from t2;
  select trim(a || ' ABCD') from t2;
  insert into t1 values (trim(s));
end//;

--- SQL operation complete.
>>
>>call test_trim();

(EXPR)  
--------

abcdef  

--- 1 row(s) selected.

(EXPR)
----------------------------------------------------------------------------------------------------

abcdef                                                                                              

--- 1 row(s) selected.

(EXPR)
---------------------------------------------------------------------------------------------------------

abcdef ABCD                                                                                              

--- 1 row(s) selected.

(EXPR)
---------------------------------------------------------------------------------------------------------

abcdef ABCD                                                                                              

--- 1 row(s) selected.

(EXPR)
---------------------------------------------------------------------------------------------------------

abcdef  ABCD                                                                                             

--- 1 row(s) selected.

(EXPR)
---------------------------------------------------------------------------------------------------------

abcdef  ABCD                                                                                             

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>select * from t1;

A
----------------------------------------------------------------------------------------------------

bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
bcd                                                                                                 
abcdef                                                                                              

--- 9 row(s) selected.
>>
>>create or replace procedure create_temporary_table() as //
begin
  create temporary table tmp1 (a int);
  insert into tmp1 values (1),(2),(3);
  select * from tmp1;
end//;

--- SQL operation complete.
>>
>>call create_temporary_table();

A          
-----------

          1
          2
          3

--- 3 row(s) selected.

--- SQL operation complete.
>>
>>create procedure test_select_into() as//
BEGIN 
  DECLARE id int;
  SELECT a INTO id FROM t4 LIMIT 2;
  print('id = '||id);
END//;

--- SQL operation complete.
>>truncate table t4;

--- SQL operation complete.
>>insert into t4 values (1);

--- 1 row(s) inserted.
>>insert into t4 values (2);

--- 1 row(s) inserted.
>>call test_select_into();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: more than one row was returned

--- SQL operation failed with errors.
>>truncate table t4;

--- SQL operation complete.
>>insert into t4 values (1);

--- 1 row(s) inserted.
>>call test_select_into();

(EXPR)
------

id = 1

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create procedure test_datatype_error() as//
DECLARE 
  empno numeri(6);
BEGIN
  null;
EXCEPTION
  WHEN OTHERS THEN
    PRINT 'ERROR';
END//;

--- SQL operation complete.
>>call test_datatype_error();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: The 'numeri' data type is unknown

--- SQL operation failed with errors.
>>
>>CREATE PROCEDURE t_p() AS//    
BEGIN
	print ('aa');
	nvl(null,null);
END//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  select * from no_exist_table;
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  insert into no_exist_table values(1);
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  update no_exist_table set a = 1;
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  delete from no_exist_table where a = 1;
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() NO TRANSACTION REQUIRED AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  create table no_exist_table(a int);
  create table no_exist_table(a int);
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() NO TRANSACTION REQUIRED AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  create schema sch;
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() NO TRANSACTION REQUIRED AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  CREATE VOLATILE TABLE no_exist_table(a int);
  CREATE VOLATILE TABLE no_exist_table(a int);
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  desc no_exist_table1;
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  drop VOLATILE TABLE no_exist_table1;
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  truncate TABLE no_exist_table1;
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare cursor cur for select * from no_exist_table1;
  declare continue handler for sqlexception
    print 'sqlexception';
  open cur;
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  exec 'select * from no_exist_table1';
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
begin
  declare continue handler for sqlexception
    print 'sqlexception';
  MERGE INTO t USING
    (SELECT * FROM t1) on a = z.a
    WHEN MATCHED THEN UPDATE SET b = z.b
    WHEN NOT MATCHED THEN INSERT VALUES (z.a, z.b);
  print ('aa');
  nvl(null,null);
end//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)      
------------

sqlexception

--- 1 row(s) selected.

(EXPR)
------

aa    

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE t_p() AS//
BEGIN
   DECLARE id INT;
   DECLARE t_row t5%ROWTYPE;;
   DECLARE CURSOR cur FOR SELECT * FROM t5;
   PRINT('open cursor now!');
   OPEN cur;
   FETCH cur INTO t_row;
   LOOP
     SET id = t_row.a;
     print id;
     FETCH cur INTO t_row;
     EXIT WHEN cur%NOTFOUND;
   END LOOP;
   CLOSE cur;
END//;

--- SQL operation complete.
>>CALL t_p();

(EXPR)          
----------------

open cursor now!

--- 1 row(s) selected.

ID    
------

     1

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create or replace procedure test_cursor_with_params() as//
begin
  declare v1 int;
  declare v2 varchar(10);
  declare c(i int,j varchar) cursor is select * from t302_tab_test_cursor_with_params where a = i and b = j;
  open c(1, 'a');
  fetch c into v1,v2;
  print v1;
  print v2;
  close c;
  /* close cursor and open */
  open c(2, 'b');
  fetch c into v1,v2;
  print v1;
  print v2;
  close c;
end//;

--- SQL operation complete.
>>call test_cursor_with_params();

V1    
------

     1

--- 1 row(s) selected.

V2
--

a 

--- 1 row(s) selected.

V1    
------

     2

--- 1 row(s) selected.

V2
--

b 

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>create or replace procedure test_cursor_with_params() as//
begin
  declare v1 int;
  declare v2 varchar(10);
  declare c(i int,j varchar) cursor is select * from t302_tab_test_cursor_with_params where a = i and b = j;
  open c(1, 'a');
  fetch c into v1,v2;
  print v1;
  print v2;
  /* don't close cursor and open */
  open c(2, 'b');
  fetch c into v1,v2;
  print v1;
  print v2;
  close c;
end//;

--- SQL operation complete.
>>call test_cursor_with_params();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: cursor c already open

--- SQL operation failed with errors.
>>create or replace procedure test_outparam_isnull(out r int) as //begin set r = null; end//;

--- SQL operation complete.
>>
>>call test_outparam_isnull(?);

R          
-----------

          ?

--- SQL operation complete.
>>
>>create or replace procedure test_outparam_isnull(out r int) as //begin null; end//;

--- SQL operation complete.
>>
>>call test_outparam_isnull(?);

R          
-----------

          ?

--- SQL operation complete.
>>
>>create procedure test_mod() as//
begin
 print mod(15,4);
 print mod(15,0);
 print mod(11.6,2);
 print mod(11.6,2.1);
 print mod(15,2.1);
 print mod(-15,4);
 print mod(-15,0);
 print 15%4;
 print 15%0;
 print 11.6%2;
 print 11.6%2.1;
 print 15%2.1;
 print -15%4;
 print -15%0;
end//;

--- SQL operation complete.
>>call test_mod();

(EXPR)
------

     3

--- 1 row(s) selected.

(EXPR)
------

    15

--- 1 row(s) selected.

(EXPR)
------

   1.6

--- 1 row(s) selected.

(EXPR)
------

   1.1

--- 1 row(s) selected.

(EXPR)
------

    .3

--- 1 row(s) selected.

(EXPR)
------

    -3

--- 1 row(s) selected.

(EXPR)
------

   -15

--- 1 row(s) selected.

(EXPR)
------

     3

--- 1 row(s) selected.

(EXPR)
------

    15

--- 1 row(s) selected.

(EXPR)
------

   1.6

--- 1 row(s) selected.

(EXPR)
------

   1.1

--- 1 row(s) selected.

(EXPR)
------

    .3

--- 1 row(s) selected.

(EXPR)
------

    -3

--- 1 row(s) selected.

(EXPR)
------

   -15

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>truncate table T302_transaction;

--- SQL operation complete.
>>create or replace procedure test_transaction() no transaction required as//
begin
  begin work;
  insert into T302_transaction values(1);
  commit;
  select * from T302_transaction;
end//;

--- SQL operation complete.
>>call test_transaction();

A          
-----------

          1

--- 1 row(s) selected.

--- SQL operation complete.
>>select * from T302_transaction;

A          
-----------

          1

--- 1 row(s) selected.
>>
>>truncate table T302_transaction;

--- SQL operation complete.
>>create or replace procedure test_transaction() no transaction required as//
begin
  begin work;
  insert into T302_transaction values(1);
  commit work;
  select * from T302_transaction;
end//;

--- SQL operation complete.
>>call test_transaction();

A          
-----------

          1

--- 1 row(s) selected.

--- SQL operation complete.
>>select * from T302_transaction;

A          
-----------

          1

--- 1 row(s) selected.
>>
>>truncate table T302_transaction;

--- SQL operation complete.
>>create or replace procedure test_transaction() no transaction required as//
begin
  begin transaction;
  insert into T302_transaction values(1);
  commit;
  select * from T302_transaction;
end//;

--- SQL operation complete.
>>call test_transaction();

A          
-----------

          1

--- 1 row(s) selected.

--- SQL operation complete.
>>select * from T302_transaction;

A          
-----------

          1

--- 1 row(s) selected.
>>
>>truncate table T302_transaction;

--- SQL operation complete.
>>create or replace procedure test_transaction() no transaction required as//
begin
  begin transaction;
  insert into T302_transaction values(1);
  commit work;
  select * from T302_transaction;
end//;

--- SQL operation complete.
>>call test_transaction();

A          
-----------

          1

--- 1 row(s) selected.

--- SQL operation complete.
>>select * from T302_transaction;

A          
-----------

          1

--- 1 row(s) selected.
>>
>>truncate table T302_transaction;

--- SQL operation complete.
>>create or replace procedure test_transaction() no transaction required as//
begin
  begin transaction;
  insert into T302_transaction values(1);
  rollback;
  select * from T302_transaction;
end//;

--- SQL operation complete.
>>call test_transaction();

--- 0 row(s) selected.

--- SQL operation complete.
>>select * from T302_transaction;

--- 0 row(s) selected.
>>
>>truncate table T302_transaction;

--- SQL operation complete.
>>create or replace procedure test_transaction() no transaction required as//
begin
  begin transaction;
  insert into T302_transaction values(1);
  rollback work;
  select * from T302_transaction;
end//;

--- SQL operation complete.
>>call test_transaction();

--- 0 row(s) selected.

--- SQL operation complete.
>>select * from T302_transaction;

--- 0 row(s) selected.
>>
>>truncate table T302_transaction;

--- SQL operation complete.
>>create or replace procedure test_transaction() no transaction required as//
begin
  begin transaction;
  insert into T302_transaction values(1);
  rollback work;
  /* arise error*/
  select * from T302_transaction_not_exists;
end//;

--- SQL operation complete.
>>call test_transaction();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of -4082 and SQLSTATE of 42000. Details: java.sql.SQLException: *** ERROR[4082] Object TRAFODION.SCH.T302_TRANSACTION_NOT_EXISTS does not exist or is inaccessible.

*** ERROR[11224] The Java virtual machine raised an exception. Details: java.sql.SQLException: *** ERROR[8822] The statement was not prepared.

--- SQL operation failed with errors.
>>select * from T302_transaction;

--- 0 row(s) selected.
>>
>>truncate table T302_transaction;

--- SQL operation complete.
>>create or replace procedure test_transaction() no transaction required as//
begin
  begin transaction;
  insert into T302_transaction values(1);
  commit;
  /* arise error*/
  select * from T302_transaction_not_exists;
end//;

--- SQL operation complete.
>>call test_transaction();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of -4082 and SQLSTATE of 42000. Details: java.sql.SQLException: *** ERROR[4082] Object TRAFODION.SCH.T302_TRANSACTION_NOT_EXISTS does not exist or is inaccessible.

*** ERROR[11224] The Java virtual machine raised an exception. Details: java.sql.SQLException: *** ERROR[8822] The statement was not prepared.

--- SQL operation failed with errors.
>>select * from T302_transaction;

A          
-----------

          1

--- 1 row(s) selected.
>>
>>begin;

--- SQL operation complete.
>>
>>begin ;

*** ERROR[8603] Trying to begin a transaction that has already been started.

--- SQL operation failed with errors.
>>
>>begin n;

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: line 1:33 no viable alternative at input '<EOF>'
SET SCHEMA TRAFODION.SCH;begin n;?

--- SQL operation failed with errors.
>>
>>begin transaction;

*** ERROR[15001] A syntax error occurred at or before: 
begin transaction;
                ^ (17 characters from start of SQL statement)

*** ERROR[8822] The statement was not prepared.

>>
>>commit work;

--- SQL operation complete.
>>
>>create procedure test_exec_stmt() as//
begin
    execute 'select ''a.b'', ''c.d'' from dual;';
end//;

--- SQL operation complete.
>>call test_exec_stmt();

--- SQL operation complete.
>>
>>create or replace procedure test_execute_proc() as//
begin
  insert into table_test_execute_proc values(1);
end//;

--- SQL operation complete.
>>
>>truncate table table_test_execute_proc;

--- SQL operation complete.
>>create or replace procedure test_execute_proc1() as//
begin
 test_execute_proc;
end//;

--- SQL operation complete.
>>call test_execute_proc1();

--- SQL operation complete.
>>select * from table_test_execute_proc;

--- 0 row(s) selected.
>>
>>truncate table table_test_execute_proc;

--- SQL operation complete.
>>create or replace procedure test_execute_proc1() as//
begin
 test_execute_proc();
end//;

--- SQL operation complete.
>>call test_execute_proc1();

--- SQL operation complete.
>>select * from table_test_execute_proc;

A          
-----------

          1

--- 1 row(s) selected.
>>create or replace procedure test_prepare_stmt() as//
begin
  prepare a from 'insert into table_test_prepare_stmt values(?,?)';
  execute a using 'aa', 1;

  declare a1 string := 'aa';
  declare a2 int := 2;
  execute a using a1, a2;

  prepare b from 'insert into table_test_prepare_stmt values(?,3)';
  declare b1 string := 'bb';
  execute b using b1;

  prepare c from 'insert into table_test_prepare_stmt values(?,4)';
  declare c1 string := 'cc';
  execute c using c1;

  close prepare a;
  /* 
    don't close prepare b and c
    test close all connections of prepare 
  */
end//;

--- SQL operation complete.
>>call test_prepare_stmt();

--- SQL operation complete.
>>select * from table_test_prepare_stmt;

A           B          
----------  -----------

aa                    1
aa                    2
bb                    3
cc                    4

--- 4 row(s) selected.
>>
>>create or replace procedure test_prepare_stmt() as//
begin
  prepare c from 'select * from table_test_prepare_stmt where b = 2';
  execute c;
  execute c;
end//;

--- SQL operation complete.
>>call test_prepare_stmt();

--- SQL operation complete.
>>
>>create or replace procedure test_prepare_stmt() as//
begin
  /* error */
  prepare a from 'insert into table_test_prepare_stmt values(?,?)';
  execute a using 'aa';
end//;

--- SQL operation complete.
>>call test_prepare_stmt();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of -1 and SQLSTATE of HY000. Details: java.sql.SQLException: The message id: parameter_not_set With parameters: 2,1

--- SQL operation failed with errors.
>>
>>create or replace procedure test_prepare_stmt() as//
begin
  /* error */
  prepare a from 'insert into table_test_prepare_stmt values(?)';
  execute a using 'aa',1;
end//;

--- SQL operation complete.
>>call test_prepare_stmt();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of -4023 and SQLSTATE of 42000. Details: java.sql.SQLException: *** ERROR[4023] The degree of each row value constructor (1) must equal the degree of the target table column list (2).

*** ERROR[11224] The Java virtual machine raised an exception. Details: java.sql.SQLException: *** ERROR[8822] The statement was not prepared.

--- SQL operation failed with errors.
>>
>>CREATE OR REPLACE FUNCTION get1(CODE VARCHAR2(40)) RETURN (f VARCHAR2(40)) AS//
   TMPVAR VARCHAR2(10);
BEGIN
  DECLARE CONTINUE HANDLER FOR NOT FOUND
    RETURN '00080000';
  TMPVAR := '';
  IF TRIM(CODE) = '' THEN
    RETURN '00080000';
  ELSE
   RETURN TRIM(CODE);
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN '0000';
END//;

--- SQL operation complete.
>>
>>SELECT get1('ASFDE') FROM DUAL;

F                                       
----------------------------------------

ASFDE                                   

--- 1 row(s) selected.
>>SELECT get1('     ') FROM DUAL;

F                                       
----------------------------------------

00080000                                

--- 1 row(s) selected.
>>create procedure test_activity_count() as//
begin
  DECLARE b varchar(100);
  select a into b from t6;
  INSERT INTO t6 VALUES('ACTIVITY_COUNT IS ' || ACTIVITY_COUNT || ' SQLCODE IS ' || sqlcode || ' ERRORCODE IS ' || errorcode || ' SQLSTATE IS ' || sqlstate);
  select * from t6 order by a;
END//;

--- SQL operation complete.
>>call test_activity_count();

A
----------------------------------------------------------------------------------------------------

ACTIVITY_COUNT IS 1 SQLCODE IS 0 ERRORCODE IS 0 SQLSTATE IS 00000                                   
test                                                                                                

--- 2 row(s) selected.

--- SQL operation complete.
>>create or replace procedure t302test_md() as//
begin
  select CATALOG_NAME, SCHEMA_NAME from "_MD_".objects where OBJECT_NAME='CREATESPSQL';
end//;

--- SQL operation complete.
>>call t302test_md();

CATALOG_NAME                                                                                                                                                                                                                                                      SCHEMA_NAME




--- 1 row(s) selected.

--- SQL operation complete.
>>-- for range
>>CREATE OR REPLACE PROCEDURE test_for_range() AS//
BEGIN
  FOR i IN 1..10 LOOP
    EXIT WHEN i > 5;
    PRINT(i);
  END LOOP;
  PRINT('TEST DONE');
END//;

--- SQL operation complete.
>>CALL test_for_range();

(EXPR)
------

     1

--- 1 row(s) selected.

(EXPR)
------

     2

--- 1 row(s) selected.

(EXPR)
------

     3

--- 1 row(s) selected.

(EXPR)
------

     4

--- 1 row(s) selected.

(EXPR)
------

     5

--- 1 row(s) selected.

(EXPR)   
---------

TEST DONE

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_for_range() AS//
BEGIN
  <<label>>
  FOR i IN 1..10 LOOP
    IF i > 5 THEN
      EXIT label;
    END IF;
    PRINT(i);
  END LOOP;
  PRINT('TEST DONE');
END//;

--- SQL operation complete.
>>CALL test_for_range();

(EXPR)
------

     1

--- 1 row(s) selected.

(EXPR)
------

     2

--- 1 row(s) selected.

(EXPR)
------

     3

--- 1 row(s) selected.

(EXPR)
------

     4

--- 1 row(s) selected.

(EXPR)
------

     5

--- 1 row(s) selected.

(EXPR)   
---------

TEST DONE

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>-- for cursor
>>CREATE OR REPLACE PROCEDURE test_for_cursor() AS//
BEGIN
   FOR i IN (select a from t302_table_test_for_cursor) LOOP
     EXIT WHEN i.a = 2;
     PRINT(i.a);
   END LOOP;
   PRINT('test done'); 
END//;

--- SQL operation complete.
>>CALL test_for_cursor();

(EXPR)
------

     1

--- 1 row(s) selected.

(EXPR)   
---------

test done

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_for_cursor() AS//
BEGIN
   <<label>>
   FOR i IN (select a from t302_table_test_for_cursor) LOOP
     IF i.a = 2 THEN
       EXIT label;
     END IF;
     PRINT(i.a);
   END LOOP;
   PRINT('test done');
END//;

--- SQL operation complete.
>>CALL test_for_cursor();

(EXPR)
------

     1

--- 1 row(s) selected.

(EXPR)   
---------

test done

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_for_cursor2() AS//
BEGIN
  DECLARE CURSOR c1 (maxnum NUMBER(8,2)) IS 
    SELECT * FROM t302_table_test_for_cursor2 where a > maxnum;
  FOR c IN c1(1.1)
  LOOP
    PRINT (c.a);
  END LOOP;
END//;

--- SQL operation complete.
>>CALL test_for_cursor2();

(EXPR)
------

     2

--- 1 row(s) selected.

(EXPR)
------

     3

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_for_cursor2() AS//
BEGIN
  DECLARE CURSOR c1 (maxnum NUMBER(8,2) DEFAULT 2) IS
    SELECT * FROM t302_table_test_for_cursor2 where a > maxnum;
  FOR c IN c1(1.1)
  LOOP
    PRINT (c.a);
  END LOOP;

  FOR c IN c1
  LOOP
    PRINT (c.a);
  END LOOP;
END//;

--- SQL operation complete.
>>CALL test_for_cursor2();

(EXPR)
------

     2

--- 1 row(s) selected.

(EXPR)
------

     3

--- 1 row(s) selected.

(EXPR)
------

     3

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_for_cursor2() AS//
BEGIN
  DECLARE CURSOR c1 (minnum int, maxnum NUMBER(8,2) DEFAULT 2) IS
    SELECT * FROM t302_table_test_for_cursor2 where a > minnum AND a < maxnum;
  FOR c IN c1(0)
  LOOP
    PRINT (c.a);
  END LOOP;

  FOR c IN c1(0, 3)
  LOOP
    PRINT (c.a);
  END LOOP;
END//;

--- SQL operation complete.
>>CALL test_for_cursor2();

(EXPR)
------

     1

--- 1 row(s) selected.

(EXPR)
------

     1

--- 1 row(s) selected.

(EXPR)
------

     2

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_for_cursor2() AS//
BEGIN
  DECLARE CURSOR c1 (minnum int, maxnum NUMBER(8,2) DEFAULT 2) IS
    SELECT * FROM t302_table_test_for_cursor2 where a > minnum AND a < maxnum;
  FOR c IN c1
  LOOP
    PRINT (c.a);
  END LOOP;
END//;

--- SQL operation complete.
>>CALL test_for_cursor2();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: wrong number of arguments in call to 'c1'

--- SQL operation failed with errors.
>>
>>CREATE OR REPLACE PROCEDURE test_for_cursor2() AS//
BEGIN
  DECLARE CURSOR c1 (minnum int, maxnum NUMBER(8,2) DEFAULT 2) IS
    SELECT * FROM t302_table_test_for_cursor2 where a > minnum AND a < maxnum;
  FOR c IN c1(0,1,2)
  LOOP
    PRINT (c.a);
  END LOOP;
END//;

--- SQL operation complete.
>>CALL test_for_cursor2();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: wrong number of arguments in call to 'c1'

--- SQL operation failed with errors.
>>
>>CREATE OR REPLACE PROCEDURE test_for_cursor2() AS//
BEGIN
  DECLARE CURSOR c1 (maxnum NUMBER(8,2)) IS
    SELECT * FROM t302_table_test_for_cursor2 where a > maxnum;

  open c1(1.1);
  FOR c IN c1(1.1)
  LOOP
    PRINT (c.a);
  END LOOP;
END//;

--- SQL operation complete.
>>CALL test_for_cursor2();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: cursor c already open

--- SQL operation failed with errors.
>>
>>CREATE OR REPLACE PROCEDURE test_for_cursor2() AS//
BEGIN
  DECLARE CURSOR c1 IS
    SELECT * FROM t302_table_test_for_cursor2 where a > 1;

  FOR c IN c1
  LOOP
    PRINT (c.a);
  END LOOP;
END//;

--- SQL operation complete.
>>CALL test_for_cursor2();

(EXPR)
------

     2

--- 1 row(s) selected.

(EXPR)
------

     3

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_assignment_operator() AS//
BEGIN
  DECLARE i INT:=1;
  i:=2;
  PRINT i;
END//;

--- SQL operation complete.
>>CALL test_assignment_operator();

I     
------

     2

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_for_update() AS//
BEGIN
  SELECT * FROM t302_table_test_for_update FOR UPDATE;
END//;

--- SQL operation complete.
>>CALL test_for_update();

A          
-----------

          1

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_update_stmt_alias() AS//
BEGIN
  SELECT * FROM t302_table_test_update_stmt_alias;
  UPDATE t302_table_test_update_stmt_alias update_stmt_alias set a = 2 where update_stmt_alias.a = 1;
  SELECT * FROM t302_table_test_update_stmt_alias;
END//;

--- SQL operation complete.
>>CALL test_update_stmt_alias();

A          
-----------

          1

--- 1 row(s) selected.

A          
-----------

          2

--- 1 row(s) selected.

--- SQL operation complete.
>>CREATE OR REPLACE PROCEDURE test_select_into_errmsg() AS//
BEGIN
  DECLARE i INT;
  SELECT a into i from t302_table_test_select_into_errmsg;
EXCEPTION
WHEN OTHERS THEN
  DECLARE errmsg VARCHAR(50);
  GET DIAGNOSTICS EXCEPTION 1 errmsg = MESSAGE_TEXT;
  print errmsg;
END//;

--- SQL operation complete.
>>CALL test_select_into_errmsg();

ERRMSG                               
-------------------------------------

select into statement not found data.

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>CREATE OR REPLACE PROCEDURE test_same_variable_name() AS//
DECLARE
  i INT;
  i NUMBER;
BEGIN
  NULL;
END//;

--- SQL operation complete.
>>CALL test_same_variable_name();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: at most one declaration for 'I' is permitted.

--- SQL operation failed with errors.
>>
>>CREATE OR REPLACE PROCEDURE test_date_type() AS//
DECLARE 
  CURSOR c (k int) is select * from t where a > k;
BEGIN
  open c('a');
  declare i int;
  fetch c into i;
  print i;
  close c;
END//;

--- SQL operation complete.
>>CALL test_date_type();

*** ERROR[11220] A Java method completed with an uncaught java.sql.SQLException with invalid SQLSTATE. The uncaught exception had a SQLCODE of 0 and SQLSTATE of . Details: java.sql.SQLException: The supplied type for input value 0 of c was STRING which is not compatible with the expected type INT.

--- SQL operation failed with errors.
>>
>>CREATE OR REPLACE PROCEDURE test_with_stmt() AS//
BEGIN
 WITH tmp AS (select
    to_char(TIMESTAMP '2019-06-24 00:00:00.000000', 'yyyy') as yyyy
    from dual)
select
   CASE 'yyyy' 
   WHEN 'yyyy' THEN yyyy
   ELSE 'date format ' || coalesce('yyyymmdd', '  ') || ' not recognized.' END
 from tmp;
END//;

--- SQL operation complete.
>>CALL test_with_stmt();

(EXPR)                              
------------------------------------

2019                                

--- 1 row(s) selected.

--- SQL operation complete.
>>
>>log;
