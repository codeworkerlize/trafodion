-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
-- not support nchar and nchar varying now
-- if test Chinese, need use t4 and set utf8, so not add in this test case

obey TEST303(clean);
log LOG303 clear;

--register user sql_user1 as sql_user1;
--sh sqlci -i"TEST303(test_ordinary_user)" -u sql_user1;
obey TEST303(test_ordinary_user);

obey TEST303(triggertest);
obey TEST303(trigger_rows_test);
obey TEST303(statement_trigger_test);

obey TEST303(mantis10976);

obey TEST303(mantis11340);

obey TEST303(mantis11481);

obey TEST303(mantis11432);

obey TEST303(mantis11434);

obey TEST303(mantis11418);

obey TEST303(mantis11554);

obey TEST303(mantis11414);

obey TEST303(mantis11420);

obey TEST303(mantis13136);
obey TEST303(mantis13535);
obey TEST303(mantis12649);
obey TEST303(mantis12704);
obey TEST303(mantis11659);
obey TEST303(mantis11431);
obey TEST303(mantis11688);
obey TEST303(mantis11690);
obey TEST303(mantis12050);
obey TEST303(mantis11955);
obey TEST303(mantis11880);
obey TEST303(mantis11937);
obey TEST303(mantis11962);
obey TEST303(mantis11689);
obey TEST303(mantis12133);
obey TEST303(mantis12008);
obey TEST303(mantis12172);
obey TEST303(mantis12295);
obey TEST303(mantis12640);
obey TEST303(mantis13027);
obey TEST303(mantis11754);
obey TEST303(mantis10967);
obey TEST303(mantis13396);
obey TEST303(mantis10788);
obey TEST303(mantis13674);
obey TEST303(mantis15865);
log;

obey TEST303(clean);
exit;

?section test_ordinary_user

create schema if not exists test_ordinary_trigger;
set schema test_ordinary_trigger;
drop table if exists t1;
create table t1(c1 int);
drop table if exists t2;
create table t2(c1 int);
create or replace trigger t1_trigger
before insert
on t1
for each row
as //
begin
  insert into t2 values(:new.c1);
end;//;
get triggers;
drop trigger t1_trigger;


?section triggertest

create schema if not exists test_trigger;
set schema test_trigger;

drop table if exists t1_int;
create table t1_int(c1 int);
drop table if exists t2_int;
create table t2_int(c1 int);
create or replace trigger t1_trigger
after insert
on t1_int 
for each row
as //
begin insert into t2_int values(100);
end//;

insert into t1_int values(1);
create or replace trigger t1_trigger
before insert
on t1_int
for each row
as //
begin insert into t2_int values(100);
end//;

select * from t2_int order by c1;;
insert into t1_int values(2),(3);
select * from t2_int order by c1;

create or replace trigger t1_trigger
before insert
on t1_int
for each row
as //
begin insert into t2_int values(new.c1);
end//;

insert into t1_int values(4);

create or replace trigger t1_trigger
after update or delete
on t1_int
for each row
as //
begin
  if updating
    then insert into t2_int values(1);
  elsif deleting
    then insert into t2_int values(2);
  end if;
end//;

get triggers;
showddl trigger t1_trigger;

drop table if exists t3;
create table t3(c1 BIGINT NULL,
                c2 BIGINT SIGNED NULL,
		c3 CHAR(100) NULL,
		c4 DOUBLE PRECISION NULL,
		c5 FLOAT NULL,
		c6 INTEGER NULL,
		c7 INTEGER SIGNED NULL,
		c8 INTEGER UNSIGNED NULL,
		c9 NCHAR NULL,
		c10 NCHAR VARYING(100) NULL,
		c11 SMALLINT NULL,
		c12 SMALLINT SIGNED NULL,
		c13 SMALLINT UNSIGNED NULL,
		c14 TINYINT NULL,
		c15 VARCHAR(100) NULL
		);

drop table if exists t4;
create table t4 like t3;
create or replace trigger t3_trigger
after insert or update or delete
on t3
for each row
as //
begin
  insert into t4 values(new.c1,new.c2,new.c3,new.c4,new.c5,new.c6,new.c7,new.c8,new.c9,new.c10,new.c11,new.c12,new.c13,new.c14,new.c15);
end//;

create or replace trigger t3_trigger
after insert or update or delete
on t3
for each row
as //
begin
  insert into t4 values(:new.c1,:new.c2,:new.c3,:new.c4,:new.c5,:new.c6,:new.c7,:new.c8,:new.c9,:new.c10,:new.c11,:new.c12,:new.c13,:new.c14,:new.c15);
end//;

insert into t3 values(1,2,'hello',3.12,4.12,6,7,8,'a','world',11,12,13,14,'liul');
create or replace trigger t3_trigger
after insert or update
on t3
for each row
as //
  begin insert into t4 values(old.c1,old.c2,old.c3,new.c4,new.c5,new.c6,new.c7,new.c8,new.c9,new.c10,new.c11,new.c12,new.c13,new.c14,old.c15);
end//;
update t3 set c1=2, c15='lei' where c2=2;

drop table if exists t5;
create table t5(c1 NUMERIC(19,2),
                c2 NUMERIC(22,2),
		c3 INTEGER not null,
		c4 NUMERIC(2),
		c5 NUMERIC(10,2));
create table t5_1 like t5;
create or replace trigger t5_trigger_1
after insert
on t5
for each row
as //
begin
  insert into t2_int values(1);
end//;

create or replace trigger t5_trigger_2
after insert or update
on t5
for each row
as //
begin
  insert into t5_1 values(new.c1,new.c2,new.c3,new.c4,new.c5);
end//;

insert into t5 values(1,2.3,4,5,6.7890);

get triggers;

drop table if exists t6;
create table t6(c1 date,
                c2 time,
		c3 int,
		c4 char(10),
		c5 timestamp);
insert into t6 values ('2019-03-20', '12:12:00',  3, 'hello', '2019-03-20 12:12:20.12345');
create table t6_1 like  t6;
create or replace trigger t6_trigger
after insert
on t6
for each row
as //
begin
  insert into t6_1 values(new.c1, new.c2, new.c3, new.c4, new.c5);
end//;

drop table if exists t7;
create table t7(c1 numeric(19,5));
create table t7_1(c1 numeric(19,5));
create or replace trigger t7_trigger
before insert
on t7
for each row
as //
begin
  insert into t7_1 values(new.c1);
end//;
insert into t7 values(12345678.8765);

drop table if exists t_dec cascade;
create table t_dec(c1 int,
                   c2 decimal(10,3),
		   c3 char(60),
		   c4 VARCHAR(60));
create table t_dec_1 like t_dec;
create or replace trigger t_dec_trigger 
before insert
on t_dec
for each row
as //
begin
  insert into t_dec_1 values(:new.c1, :new.c2, :new.c3, :new.c4);
end //;
insert into t_dec values(1000, 1234, 'test string', 'test string');

drop table if exists tb_after_insert cascade;
create table if not exists tb_after_insert
(
c_bigint bigint ,
c_bigint_s bigint signed ,
c_int integer ,
c_int_s integer signed ,
c_int_us integer unsigned ,
c_smallint smallint ,
c_smallint_s smallint signed ,
c_smallint_us smallint unsigned ,
c_tinyint tinyint ,
c_dp double precision ,
c_float float ,
c_dec decimal(10,3),
c_char char(60),
c_varchar varchar(60)
);

drop table if exists tb_after_insert_log cascade;
create table if not exists tb_after_insert_log
(
ins_timestap timestamp,
col_name varchar(80) character set utf8,
col_value varchar(80) character set utf8
);

create or replace trigger test_trig_after_insert
after insert
on tb_after_insert
for each row
as//
begin
  insert into tb_after_insert_log
  values
  (sysdate,'c_bigint',cast(:new.c_bigint as varchar(80))),
  (sysdate,'c_bigint_s',cast(:new.c_bigint_s as varchar(80))),
  (sysdate,'c_int',cast(:new.c_int as varchar(80))),
  (sysdate,'c_int_s',cast(:new.c_int_s as varchar(80))),
  (sysdate,'c_int_us',cast(:new.c_int_us as varchar(80))),
  (sysdate,'c_smallint',cast(:new.c_smallint as varchar(80))),
  (sysdate,'c_smallint_s',cast(:new.c_smallint_s as varchar(80))),
  (sysdate,'c_smallint_us',cast(:new.c_smallint_us as varchar(80))),
  (sysdate,'c_tinyint',cast(:new.c_tinyint as varchar(80))),
  (sysdate,'c_dp',cast(:new.c_dp as varchar(80))),
  (sysdate,'c_float',cast(:new.c_float as varchar(80))),
  (sysdate,'c_dec',cast(:new.c_dec as varchar(80))),
  (sysdate,'c_char',:new.c_char),
  (sysdate,'c_varchar',:new.c_varchar);
end//;

insert into tb_after_insert
values
(
2000,
2000,
1000,
1000,
1000,
100,
100,
100,
10,
1.5,
2.5,
1234,
'test string',
'test string1'
);

insert into tb_after_insert
values
(
2000,
2000,
1000,
1000,
1000,
100,
100,
100,
10,
1.5,
2.5,
1234,
'test string',
'test string!'
);

insert into tb_after_insert
values
(
2000,
2000,
1000,
1000,
1000,
100,
100,
100,
10,
1.5,
2.5,
1234,
'test string',
'test string1'
),
(
2000,
2000,
1000,
1000,
1000,
100,
100,
100,
10,
1.5,
2.5,
1234,
'test string',
'test string111'
);

drop table if exists t_arsm_dataprocsql cascade;
create table t_arsm_dataprocsql
(
  busidatakey varchar2(128) not null,
  crttype varchar2(2) not null,
  opertype varchar2(2) not null,
  sqlstr varchar2(2048),
  infocols varchar2(1024),
  dbinfocols varchar2(1024),
  condcols varchar2(1024),
  dbcondcols varchar2(1024),
  proctablename varchar2(128),
  busidatadesc varchar2(256),
  ordercols varchar2(64)
)
primary key (busidatakey);

drop table if exists tp_cip_cache cascade;
create table tp_cip_cache
(
  id varchar2(32) not null,
  versionnum varchar2(20),
  cachesql varchar2(512) not null,
  ischeck varchar2(1) not null
)
primary key (id);

insert into tp_cip_cache
values
(
't_arsm_dataprocsql',
'test string',
'test string',
'a'
),
(
't_arsm_datasqltype',
'test string',
'test string',
'a'
),
(
'test string',
'test string',
'test string',
'a'
);

create or replace trigger t_arsm_dataprocsql_trig
after insert or update or delete
on t_arsm_dataprocsql
for each row
as//
begin
update tp_cip_cache set versionnum =to_char(systimestamp,'yyyymmddhh24miss') where id = 't_arsm_dataprocsql';
update tp_cip_cache set versionnum =to_char(systimestamp,'yyyymmddhh24miss') where id = 't_arsm_datasqltype';
end//;

select * from tp_cip_cache order by id;--3 row selected.versionnum :3 test string

insert into t_arsm_dataprocsql
values
('1','1','1','1','1','1','1','1','1','1','1');-- 1 row inserted
select * from t_arsm_dataprocsql;--1 row selected
select * from tp_cip_cache order by id;--3 row selected.versionnum :1 test string, 2 current timestamp

insert into t_arsm_dataprocsql
values
('2','2','2','2','2','2','2','2','2','2','2'),
('3','3','3','3','3','3','3','3','3','3','3');-- 2 row inserted
select * from t_arsm_dataprocsql order by busidatakey;--3 row selected
select * from tp_cip_cache order by id;--3 row selected.versionnum :1 test string, 2 current timestamp

update t_arsm_dataprocsql
set ordercols = '2'
where busidatakey = '1';--1 row updated
select * from t_arsm_dataprocsql order by busidatakey;--3 row selected
select * from tp_cip_cache order by id;--3 row selected.versionnum :1 test string, 2 current timestamp

update t_arsm_dataprocsql
set ordercols = '4'
where busidatakey in ('2','3');--2 row updated
select * from t_arsm_dataprocsql order by busidatakey;--3 row selected
select * from tp_cip_cache order by id;--3 row selected.versionnum :1 test string, 2 current timestamp

delete from t_arsm_dataprocsql
where busidatakey = '1';--1 row deleted
select * from t_arsm_dataprocsql order by busidatakey;--2 row selected
select * from tp_cip_cache order by id;--3 row selected.versionnum :1 test string, 2 current timestamp

delete from t_arsm_dataprocsql
where busidatakey in ('2','3');--2 row deleted
select * from t_arsm_dataprocsql order by busidatakey;--0 row selected
select * from tp_cip_cache order by id;--3 row selected.versionnum :1 test string, 2 current timestamp

drop table if exists t1_drop cascade;
create table if not exists  t1_drop(c1 int, c2 int);
drop table if exists t1_drop_log cascade;
create table if not exists  t1_drop_log(c1 int, c2 int);

create or replace trigger t1_drop_trigger
before delete
on t1_drop
for each row
as //
begin
insert into t1_drop_log values(:old.c1, old.c2);
end; //;
insert into t1_drop values(1,2);
select * from t1_drop_log order by c1;
select * from t1_drop order by c1;
delete from t1_drop;

drop trigger t1_drop_trigger;
alter table t1_drop add primary key(c1);
create or replace trigger t1_drop_trigger
before delete
on t1_drop
for each row
as //
begin
insert into t1_drop_log values(:old.c1, old.c2);
end; //;
insert into t1_drop values(1,2);
select * from t1_drop_log order by c1;
select * from t1_drop order by c1;
delete from t1_drop;

?section trigger_rows_test

set schema test_trigger;
drop table if exists test1_drop cascade;
create table if not exists  test1_drop(c1 int, c2 int);
drop table if exists test1_drop_log cascade;
create table if not exists  test1_drop_log(c1 int, c2 int);
create or replace trigger test1_drop_trigger
before delete
on test1_drop
for each row
as //
begin
insert into test1_drop_log values(:old.c1, old.c2);
end; //;
insert into test1_drop values(1,2),(2,3),(3,4);
insert into test1_drop values(3,4);
select * from test1_drop_log order by c1;
select * from test1_drop order by c1;
delete from test1_drop;
select * from test1_drop_log order by c1;

drop table if exists test1_insert cascade;
create table test1_insert(c1 int, c2 char(20), c3 varchar(20));
drop table if exists test1_insert_log cascade;
create table test1_insert_log like test1_insert;
select * from test1_insert;
select * from test1_insert_log;
create or replace trigger test1_insert_trigger
after insert
on test1_insert
for each row
as//
begin
  insert into test1_insert_log values(new.c1, new.c2, :new.c3);
end;//;
drop table if exists test1_insert_bak cascade;
create table test1_insert_bak like test1_insert;
insert into test1_insert_bak values(1, 'hello', 'world'), (2, 'go', 'to'), (3, 'where', 'he');
insert into test1_insert select * from test1_insert_bak;
select * from test1_insert_log order by c1;

?section statement_trigger_test
set schema test_trigger;
drop table if exists test1_statement cascade;
create table test1_statement(c1 int);
drop table if exists test1_statement_log cascade;
create table test1_statement_log(c1 int);
create or replace trigger test1_statement_trigger
after insert
on test1_statement
for statement
as//
begin
  insert into test1_statement_log values(new.c1);
end;//;
insert into test1_statement values(1), (2), (3), (4);
create or replace trigger test1_statement_trigger
after insert
on test1_statement
for statement
as//
begin
  insert into test1_statement_log values(100);
end;//;
select * from test1_statement order by c1;
select * from test1_statement_log order by c1;
insert into test1_statement values(1), (2), (3), (4);
select * from test1_statement order by c1;
select * from test1_statement_log order by c1;

create or replace trigger test1_statement_trigger
before insert
on test1_statement
for each statement
as//
begin
  insert into test1_statement_log values(200);
end;//;
insert into test1_statement values(1), (2), (3), (4);
select * from test1_statement order by c1;
select * from test1_statement_log order by c1;

drop table if exists test2_statement cascade;
create table test2_statement(c1 int);
drop table if exists test2_statement_log cascade;
create table test2_statement_log(c1 int);
insert into test2_statement values(1), (2), (3), (4);
create or replace trigger test2_statement_trigger
after delete 
on test2_statement
for each statement
as//
begin
  insert into test2_statement_log values(100);
end;//;
delete from test2_statement;
select * from test2_statement_log order by c1;
insert into test2_statement values(1), (2), (3), (4);
select * from test2_statement_log order by c1;

create or replace trigger test2_statement_trigger
before delete 
on test2_statement
for each statement
as//
begin
  insert into test2_statement_log values(200);
end;//;
delete from test2_statement;
select * from test2_statement_log order by c1;
insert into test2_statement values(1), (2), (3), (4);
select * from test2_statement_log order by c1;

drop table if exists test3_statement cascade;
create table test3_statement(c1 int, c2 int);
drop table if exists test3_statement_log cascade;
create table test3_statement_log(c1 int);
insert into test3_statement values(1, 1), (2, 1), (3, 1), (4, 1);
create or replace trigger test3_statement_trigger
after update
on test3_statement
for each statement
as//
begin
  insert into test3_statement_log values(new.c1);
end;//;
update test3_statement set c1=2 where c2=1;
select * from test3_statement_log order by c1;
create or replace trigger test3_statement_trigger
after update
on test3_statement
for statement
as//
begin
  insert into test3_statement_log values(100);
end;//;
update test3_statement set c1=3 where c2=1;
select * from test3_statement_log order by c1;

create or replace trigger test3_statement_trigger
before update
on test3_statement
for each statement
as//
begin
  insert into test3_statement_log values(200);
end;//;
update test3_statement set c1=3 where c2=1;
select * from test3_statement_log order by c1;
update test3_statement set c1=3 where c2=2;
select * from test3_statement_log order by c1;

?section mantis10967
drop table if exists tb_numeric;
create table if not exists tb_numeric
(
id int,
insert_timestamp timestamp,
c_numeric_ps_min numeric(1,1),
c_numeric_ps_s_min numeric(1,1) signed,
c_numeric_ps_us_min numeric(1,1) unsigned,
c_numeric_ps_max numeric(128,128),
c_numeric_ps_s_max numeric(128,128) signed,
c_numeric_ps_us_max numeric(128,128) unsigned,
c_numeric_p_min numeric(1),
c_numeric_p_s_min numeric(1) signed,
c_numeric_p_us_min numeric(1) unsigned,
c_numeric_p_max numeric(128),
c_numeric_p_s_max numeric(128) signed,
c_numeric_p_us_max numeric(128) unsigned,
c_numeric_ps_m numeric(10,5),
c_numeric_ps_s_m numeric(10,5) signed,
c_numeric_ps_us_m numeric(10,5) unsigned,
c_numeric_p_m numeric(10),
c_numeric_p_s_m numeric(10) signed,
c_numeric_p_us_m numeric(10) unsigned
);
drop table if exists tb_numeric_1 cascade;
create table if not exists tb_numeric_1 like tb_numeric;

create or replace trigger trig_numeric_be_insert
before insert or update or delete
on tb_numeric
for each row
as //
begin
if inserting or updating then
  insert into tb_numeric_1
  values
  (
  :new.id ,
  :new.insert_timestamp ,
  :new.c_numeric_ps_min ,
  :new.c_numeric_ps_s_min ,
  :new.c_numeric_ps_us_min ,
  :new.c_numeric_ps_max ,
  :new.c_numeric_ps_s_max ,
  :new.c_numeric_ps_us_max ,
  :new.c_numeric_p_min ,
  :new.c_numeric_p_s_min ,
  :new.c_numeric_p_us_min ,
  :new.c_numeric_p_max ,
  :new.c_numeric_p_s_max ,
  :new.c_numeric_p_us_max ,
  :new.c_numeric_ps_m ,
  :new.c_numeric_ps_s_m ,
  :new.c_numeric_ps_us_m ,
  :new.c_numeric_p_m ,
  :new.c_numeric_p_s_m ,
  :new.c_numeric_p_us_m
  );
elsif deleting then
 insert into tb_numeric_1
 values
 (
 :old.id ,
 :old.insert_timestamp ,
 :old.c_numeric_ps_min ,
 :old.c_numeric_ps_s_min ,
 :old.c_numeric_ps_us_min ,
 :old.c_numeric_ps_max ,
 :old.c_numeric_ps_s_max ,
 :old.c_numeric_ps_us_max ,
 :old.c_numeric_p_min ,
 :old.c_numeric_p_s_min ,
 :old.c_numeric_p_us_min ,
 :old.c_numeric_p_max ,
 :old.c_numeric_p_s_max ,
 :old.c_numeric_p_us_max ,
 :old.c_numeric_ps_m ,
 :old.c_numeric_ps_s_m ,
 :old.c_numeric_ps_us_m ,
 :old.c_numeric_p_m ,
 :old.c_numeric_p_s_m ,
 :old.c_numeric_p_us_m
 );
end if;
end;//;

insert into tb_numeric
values
(
4,
current_timestamp,
0.8,
0.8,
0.8,
-0.8,
-0.8,
0.8,
8,
8,
8,
888888,
888888,
8,
888.88888,
88.88888,
8,
888,
88888,
8
);

insert into tb_numeric
values
(
1,
current_timestamp,
+0.9,
+0.9,
0.9,
+0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
+0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
+9,
+9,
9,
+99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
+99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
+99999.99999,
+99999.99999,
99999.99999,
+9999999999,
+9999999999,
9999999999
),
(
2,
current_timestamp,
-0.9,
-0.9,
0,
-0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
-0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
0,
-9,
-9,
0,
-99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
-99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
0,
-99999.99999,
-99999.99999,
0,
-9999999999,
-9999999999,
0
),
(
3,
current_timestamp,
+0.6,
+0.6,
0.6,
+0.66666,
+0.6666,
0.6,
+6,
+6,
6,
+666666,
+66666,
6,
+66.66666,
+666.66666,
6,
+6666,
+66666,
6
);

select count(*) from tb_numeric_1;
update tb_numeric set c_numeric_ps_min = 0.1;
select count(*) from tb_numeric_1;
delete from tb_numeric;
select count(*) from tb_numeric_1;
select count(*) from tb_numeric;

drop table if exists tb_decimal cascade;
create table if not exists tb_decimal
(
id int,
insert_timestamp timestamp,
c_dec_ps_min decimal(1,1),
c_dec_ps_s_min decimal(1,1) signed,
c_dec_ps_us_min decimal(1,1) unsigned,
c_dec_ps_max decimal(18,18),
c_dec_ps_s_max decimal(18,18) signed,
c_dec_ps_us_max decimal(9,9) unsigned,
c_dec_p_min decimal(1,0),
c_dec_p_s_min decimal(1,0) signed,
c_dec_p_us_min decimal(1,0) unsigned,
c_dec_p_max decimal(18,0),
c_dec_p_s_max decimal(18,0) signed,
c_dec_p_us_max decimal(9,0) unsigned,
c_dec_ps_m decimal(8,5),
c_dec_ps_s_m decimal(8,5) signed,
c_dec_ps_us_m decimal(8,5) unsigned,
c_dec_p_m decimal(8,0),
c_dec_p_s_m decimal(8,0) signed,
c_dec_p_us_m decimal(8,0) unsigned
);
drop table if exists tb_decimal_1 cascade;
create table if not exists tb_decimal_1 like tb_decimal;

create or replace trigger trig_decimal_be_insert
before insert or update or delete
on tb_decimal
for each row as //
begin
 if inserting or updating then
   insert into tb_decimal_1
   values
   (
   :new.id ,
   :new.insert_timestamp ,
   :new.c_dec_ps_min ,
   :new.c_dec_ps_s_min ,
   :new.c_dec_ps_us_min ,
   :new.c_dec_ps_max ,
   :new.c_dec_ps_s_max ,
   :new.c_dec_ps_us_max ,
   :new.c_dec_p_min ,
   :new.c_dec_p_s_min ,
   :new.c_dec_p_us_min ,
   :new.c_dec_p_max ,
   :new.c_dec_p_s_max ,
   :new.c_dec_p_us_max ,
   :new.c_dec_ps_m ,
   :new.c_dec_ps_s_m ,
   :new.c_dec_ps_us_m ,
   :new.c_dec_p_m ,
   :new.c_dec_p_s_m ,
   :new.c_dec_p_us_m
   );
 elsif deleting then
   insert into tb_decimal_1
   values
   (
   :old.id ,
   :old.insert_timestamp ,
   :old.c_dec_ps_min ,
   :old.c_dec_ps_s_min ,
   :old.c_dec_ps_us_min ,
   :old.c_dec_ps_max ,
   :old.c_dec_ps_s_max ,
   :old.c_dec_ps_us_max ,
   :old.c_dec_p_min ,
   :old.c_dec_p_s_min ,
   :old.c_dec_p_us_min ,
   :old.c_dec_p_max ,
   :old.c_dec_p_s_max ,
   :old.c_dec_p_us_max ,
   :old.c_dec_ps_m ,
   :old.c_dec_ps_s_m ,
   :old.c_dec_ps_us_m ,
   :old.c_dec_p_m ,
   :old.c_dec_p_s_m ,
   :old.c_dec_p_us_m
   );
  end if;
end;//;

select count(*) from tb_decimal_1;
insert into tb_decimal
values
(
5,
current_timestamp,
0.6,
0.6,
0.6,
-0.6,
-0.6,
0.6,
6,
6,
6,
666666,
666666,
6,
666.66666,
66.66666,
6,
666,
66666,
6
);
update tb_decimal set c_dec_ps_min = 0.1;
delete from tb_decimal;

drop table if exists tb_numeric;
drop table if exists tb_numeric_1 cascade;
drop table if exists tb_decimal cascade;
drop table if exists tb_decimal_1 cascade;


?section mantis11689
create schema if not exists test_trigger;
set schema test_trigger;
drop table if exists test_tran_tb_unique;
create table if not exists test_tran_tb_unique
(
c1 int primary key,
c2 char(20) check (c2 <> ''),
c3 decimal(10,2) unique,
c4 numeric(10,2)
);
drop table if exists test_tran_tb_unique_log;
create table if not exists test_tran_tb_unique_log
(
c0 timestamp,
op_desc varchar(40),
c1 int,
c2 char(20),
c3 decimal(10,2),
c4 numeric(10,2)
);

create or replace trigger test_tran_tb_unique_trig
after insert or update or delete
on test_tran_tb_unique
for each row
as//
begin
  if inserting then
    insert into test_tran_tb_unique_log values (systimestamp,'insert new values',:new.c1,:new.c2,:new.c3,:new.c4);
  elsif updating then
    insert into test_tran_tb_unique_log values (systimestamp,'update old values',:old.c1,:old.c2,:old.c3,:old.c4);
    insert into test_tran_tb_unique_log values (systimestamp,'update new values',:new.c1,:new.c2,:new.c3,:new.c4);
  elsif deleting then
    insert into test_tran_tb_unique_log values (systimestamp,'delete old values',:old.c1,:old.c2,:old.c3,:old.c4);
  else
    insert into test_tran_tb_unique_log values (systimestamp,'not delete or update or insert', 4,'4',4.5,4.5);
  end if;
end;//;

select * from test_tran_tb_unique order by c1;
select * from test_tran_tb_unique_log order by c1, op_desc, c0;
insert into test_tran_tb_unique values (1,'a',1.5,1.5),(2,'a',2.5,1.5);
insert into test_tran_tb_unique values (3,'a',3.5,1.5);
select * from test_tran_tb_unique order by c1;
select * from test_tran_tb_unique_log order by c1, op_desc, c0;
update test_tran_tb_unique set c4 = c4*10 where c3 = 1.5;
select * from test_tran_tb_unique order by c1;
select * from test_tran_tb_unique_log order by c1, op_desc, c0;
update test_tran_tb_unique set c4 = c4*10 where c3 > 1.5;
select * from test_tran_tb_unique order by c1;
select * from test_tran_tb_unique_log order by c1, op_desc, c0;
delete from test_tran_tb_unique where c1 = 1;
select * from test_tran_tb_unique order by c1;
select * from test_tran_tb_unique_log order by c1, op_desc, c0;
delete from test_tran_tb_unique where c1 > 1;
select * from test_tran_tb_unique order by c1;
select * from test_tran_tb_unique_log order by c1, op_desc, c0;

drop table if exists test_tran_tb_unique;
drop table if exists test_tran_tb_unique_log;


?section mantis12172
set schema test_trigger;
drop table if exists tb_1;
drop table if exists tb_1_log;
drop table if exists tb_2_log;
create table tb_1 (c1 int);
create table tb_1_log (c1 int);
create table tb_2_log (c1 int);
--before insert row trigger
create or replace trigger tb_trig_1
before insert
on tb_1
for each row
as//
begin
 insert into tb_1_log values (1);
end;//;

create or replace trigger tb_trig_2
before insert
on tb_1
for each row
as//
begin
 insert into tb_2_log values (1);
end;//;

insert into tb_1 values (2);
select * from tb_1;
select * from tb_1_log;
select * from tb_2_log;
delete from tb_1;
delete from tb_1_log;
delete from tb_2_log;

--after insert row trigger
create or replace trigger tb_trig_1
after insert
on tb_1
for each row
as//
begin
 insert into tb_1_log values (1);
end;//;

create or replace trigger tb_trig_2
after insert
on tb_1
for each row
as//
begin
 insert into tb_2_log values (1);
end;//;

select * from tb_1;
select * from tb_1_log;
select * from tb_2_log;
insert into tb_1 values (2);
select * from tb_1;
select * from tb_1_log;
select * from tb_2_log;
delete from tb_1;
delete from tb_1_log;
delete from tb_2_log;

--after update statement trigger
insert into tb_1 values (1);
create or replace trigger tb_trig_1
after update
on tb_1
for each statement
as//
begin
 insert into tb_1_log values (1);
end;//;

create or replace trigger tb_trig_2
after update
on tb_1
for each statement
as//
begin
 insert into tb_2_log values (1);
end;//;

update tb_1 set c1 =2 ;
select * from tb_1;
select * from tb_1_log;
select * from tb_2_log;

--before delete statement trigger
create or replace trigger tb_trig_1
before delete
on tb_1
for each statement
as//
begin
 insert into tb_1_log values (1);
end;//;

create or replace trigger tb_trig_2
before delete
on tb_1
for each statement
as//
begin
 insert into tb_2_log values (1);
end;//;

select * from tb_1;
select * from tb_1_log;
select * from tb_2_log;
delete from tb_1;
select * from tb_1_log;
select * from tb_2_log;
drop table if exists tb_1;
drop table if exists tb_1_log;
drop table if exists tb_2_log;
drop trigger tb_trig_1;
drop trigger tb_trig_2;


?section mantis10976
set schema test_trigger;
drop table if exists test_tb cascade;
drop table if exists test_log cascade;
create table test_tb(id int);
create table test_log(c1 timestamp,c2 int);
create or replace trigger test_trig
before insert
on test_tb
for each row
as//
begin
  if :new.id = 1 then
    insert into test_log values (current_timestamp,:new.id);
  elsif :new.id <= 1 then
    insert into test_log values (current_timestamp,:new.id);
  elsif :new.id >= 1 then
    insert into test_log values (current_timestamp,:new.id);
  else
    null;
  end if;
end//;
insert into test_tb values (1);
select * from test_tb;
select * from test_log order by c2, c1;
insert into test_tb values (0),(3);
create or replace trigger test_trig
before insert
on test_tb
for each row
as//
begin
  if :new.id < 1 then
    insert into test_log values (current_timestamp,:new.id);
  elsif :new.id > 1 then
    insert into test_log values (current_timestamp,:new.id);
  else
    null;
  end if;
end//;
insert into test_tb values (1);
insert into test_tb values (0),(3);
select * from test_tb order by id;
select * from test_log order by c2, c1;
create or replace trigger test_trig
before insert
on test_tb
for each row
as//
begin
  if :new.id != 1 then
    insert into test_log values (current_timestamp,:new.id);
  else
    null;
  end if;
end//;
insert into test_tb values (1);
select * from test_tb order by id;
select * from test_log order by c2, c1;
insert into test_tb values (0),(3);
select * from test_log order by c2, c1;
create or replace trigger test_trig
before insert
on test_tb
for each row
as//
begin
  if :new.id <> 1 then
    insert into test_log values (current_timestamp,:new.id);
  else
    null;
  end if;
end//;
insert into test_tb values (1);
select * from test_tb order by id;
select * from test_log order by c2, c1;
insert into test_tb values (0),(3);
select * from test_tb order by id;
select * from test_log order by c2, c1;

?section mantis11340
set schema test_trigger;
drop table if exists tp_cip_systemadm cascade;
create table tp_cip_systemadm
(
  sysid    varchar2(32) not null,
  syscode  varchar2(32),
  sysname  varchar2(100),
  systype  varchar2(32),
  filenode varchar2(32)
)
primary key (sysid);

drop table if exists tp_cip_cache cascade;
create table tp_cip_cache
(
  id         varchar2(32) not null,
  versionnum varchar2(20),
  cachesql   varchar2(512) not null,
  ischeck    varchar2(1) not null
)
primary key (id);

insert into tp_cip_cache 
values
(
'tp_cip_systemadm',
'test string',
'test string',
'a'
),
(
'test string',
'test string',
'test string',
'a'
);

drop table if exists te_info_cache cascade;
create table te_info_cache
(
  id         varchar2(32) not null,
  versionnum varchar2(20),
  cachesql   varchar2(1024)
)
primary key (id);

insert into te_info_cache
values
(
'systeminfo',
'test string',
'test string'
),
(
'systeminfo1',
'test string',
'test string'
),
(
'test string',
'test string',
'test string'
);

create or replace trigger tp_cip_systemadm_trig
after insert or update or delete
on tp_cip_systemadm
for each row
as//
begin
update tp_cip_cache set versionnum =to_char(systimestamp,'yyyymmddhh24miss')  where id in ('tp_cip_systemadm');
update te_info_cache set versionnum =to_char(systimestamp,'yyyymmddhh24miss')  where id in ('systeminfo');
update te_info_cache set versionnum =to_char(systimestamp,'yyyymmddhh24miss')  where id in ('systeminfo1');
end//;

select * from tp_cip_cache order by id;--2 row selected,versionnum: 2 test string
select * from te_info_cache order by id;--3 row selected,versionnum: 3 test string

insert into tp_cip_systemadm
values
('1','1','1','1','1');--1 row inserted
select * from tp_cip_systemadm order by sysid;--1 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 1 test string,1 current timestamp
select * from te_info_cache order by id;--3 row selected,versionnum: 1 test string,2 current timestamp
insert into tp_cip_systemadm
values
('2','2','2','2','2'),
('3','3','3','3','3');--1 row inserted
select * from tp_cip_systemadm order by sysid;--3 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 1 test string,1 current timestamp
select * from te_info_cache order by id;--3 row selected,versionnum: 1 test string,2 current timestamp

update tp_cip_systemadm
set filenode = '2'
where sysid = '1';--1 row updated
select * from tp_cip_systemadm order by sysid;--3 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 1 test string,1 current timestamp
select * from te_info_cache order by id;--3 row selected,versionnum: 1 test string,2 current timestamp

update tp_cip_systemadm
set filenode = '4'
where sysid in('2', '3');--3 row updated
select * from tp_cip_systemadm order by sysid;--3 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 1 test string,1 current timestamp
select * from te_info_cache order by id;--3 row selected,versionnum: 1 test string,2 current timestamp

delete from tp_cip_systemadm
where sysid = '1';--1 row deleted
select * from tp_cip_systemadm order by sysid;--2 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 1 test string,1 current timestamp
select * from te_info_cache order by id;--3 row selected,versionnum: 1 test string,2 current timestamp

delete from tp_cip_systemadm
where sysid in('2', '3');--2 row deleted
select * from tp_cip_systemadm order by sysid;--0 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 1 test string,1 current timestamp
select * from te_info_cache order by id;--3 row selected,versionnum: 1 test string,2 current timestamp

--insert,update or delete fail,trigger won't fire
delete from tp_cip_systemadm;--0 row deleted

update tp_cip_cache
set versionnum = 'test string';--2 row updated

update te_info_cache
set versionnum = 'test string';--1 row updated

select * from tp_cip_systemadm order by sysid;--0 row selected
select * from tp_cip_cache order by id;--3 row selected,versionnum: 3 test string

insert into tp_cip_systemadm
values
('1','1','1','1','1','1');--insert fail
select * from tp_cip_systemadm order by sysid;--0 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 2 test string
select * from te_info_cache order by id;--3 row selected,versionnum: 3 test string

update tp_cip_systemadm
set filenode = '4'
where notexists in('2', '3');--update fail
select * from tp_cip_systemadm order by sysid;--0 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 2 test string
select * from te_info_cache order by id;--3 row selected,versionnum: 3 test string

delete from tp_cip_systemadm
where notexists = '1';--delete fail
select * from tp_cip_systemadm order by sysid;--0 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 2 test string
select * from te_info_cache order by id;--3 row selected,versionnum: 3 test string

update tp_cip_systemadm
set filenode = '4'
where sysid in('5');--0 row updated
select * from tp_cip_systemadm order by sysid;--0 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 2 test string
select * from te_info_cache order by id;--3 row selected,versionnum: 3 test string

delete from tp_cip_systemadm
where sysid = '5';--0 row deleted
select * from tp_cip_systemadm order by sysid;--0 row selected
select * from tp_cip_cache order by id;--2 row selected,versionnum: 2 test string
select * from te_info_cache order by id;--3 row selected,versionnum: 3 test string

--view trigger
get triggers;
showddl trigger tp_cip_systemadm_trig;
drop trigger tp_cip_systemadm_trig;

drop table if exists tp_cip_systemadm cascade;
drop table if exists tp_cip_cache cascade;
drop table if exists te_info_cache cascade;


?section mantis11481
set schema test_trigger;
--interval day to hour :
drop table if exists tb_interval_2 cascade;
create table if not exists tb_interval_2
(
c_interval_daytohour interval day to hour
);

insert into tb_interval_2 values
(
interval '2 12' day to hour
);--1 row inserted

select * from tb_interval_2 order by c_interval_daytohour;--1 row

drop table if exists tb_interval_log cascade;
create table tb_interval_log
(
alter_time timestamp,
alter_desc varchar(40),
old_val varchar(40) ,
new_val varchar(40)
);
create or replace trigger test_interval_trig_2
before insert or update or delete
on tb_interval_2
for each row
as //
begin
  if inserting then
      insert into tb_interval_log values
      (systimestamp,'insert',null,cast(:new.c_interval_daytohour as varchar(40)));
  elsif updating then
      insert into tb_interval_log values
      (systimestamp,'update',cast(:old.c_interval_daytohour as varchar(40)),cast(:new.c_interval_year as varchar(40)) );
  elsif deleting then
      insert into tb_interval_log values
      (systimestamp,'delete',cast(:old.c_interval_daytohour as varchar(40)),null );
  else
      null;
  end if;
end;//;

insert into tb_interval_2 values
(
interval '2 12' day to hour
);--1 row inserted
select * from tb_interval_log order by alter_time;

--interval day to minute:
drop table if exists tb_interval_3 cascade;
create table if not exists tb_interval_3
(
c_interval_daytominute interval day to minute
);

insert into tb_interval_3 values
(
interval '2 12:23' day to minute
);--1 row inserted

select * from tb_interval_3 order by c_interval_daytominute;--1 row

drop table if exists tb_interval_log cascade;
create table tb_interval_log
(
alter_time timestamp,
alter_desc varchar(40),
old_val varchar(40) ,
new_val varchar(40)
);
create or replace trigger test_interval_trig_3
before insert or update or delete
on tb_interval_3
for each row
as //
begin
  if inserting then
      insert into tb_interval_log values
      (systimestamp,'insert',null,cast(:new.c_interval_daytominute as varchar(40)) );
  elsif updating then
      insert into tb_interval_log values
      (systimestamp,'update',cast(:old.c_interval_daytominute as varchar(40)),cast(:new.c_interval_year as varchar(40)) );
  elsif deleting then
      insert into tb_interval_log values
      (systimestamp,'delete',cast(:old.c_interval_daytominute as varchar(40)),null );
  else
      null;
  end if;
end;//;

insert into tb_interval_3 values
(
interval '2 12:23' day to minute
);--1 row inserted
select * from tb_interval_log order by alter_time;

--interval day to second:
drop table if exists tb_interval_4 cascade;
create table if not exists tb_interval_4
(
c_interval_daytosecond interval day to second
);

insert into tb_interval_4 values
(
interval '2 12:23:23' day to second
);--1 row inserted

select * from tb_interval_4 order by c_interval_daytosecond;--1 row

drop table if exists tb_interval_log cascade;
create table tb_interval_log like tb_interval_4;

create or replace trigger test_interval_trig_4
before insert or update or delete
on tb_interval_4
for each row
as //
begin
  if inserting then
      insert into tb_interval_log values
      (:new.c_interval_daytosecond );
  elsif updating then
      insert into tb_interval_log values
      (:old.c_interval_daytosecond );
  elsif deleting then
      insert into tb_interval_log values
      (:old.c_interval_daytosecond );
  else
      null;
  end if;
end;//;
insert into tb_interval_4 values
(
interval '2 12:23:23' day to second
);--1 row inserted
select * from tb_interval_log order by c_interval_daytosecond;

--interval minute to second:
drop table if exists tb_interval_5 cascade;
create table if not exists tb_interval_5
(
c_interval_minutetosecond interval minute to second
);
drop table if exists tb_interval_log cascade;
create table tb_interval_log like tb_interval_5;
insert into tb_interval_5 values
(
interval '23:23' minute to second
);--1 row inserted

select * from tb_interval_5 order by c_interval_minutetosecond;--1 row

create or replace trigger test_interval_trig_5
before insert or update or delete
on tb_interval_5
for each row
as //
begin
  if inserting then
      insert into tb_interval_log values
      (:new.c_interval_minutetosecond );
  elsif updating then
      insert into tb_interval_log values
      (:old.c_interval_minutetosecond );
  elsif deleting then
      insert into tb_interval_log values
      (:old.c_interval_minutetosecond );
  else
      null;
  end if;
end;//;
insert into tb_interval_5 values
(
interval '23:23' minute to second
);--1 row inserted

select * from tb_interval_log order by c_interval_minutetosecond;

--interval to mouth
drop table if exists tb_interval_1 cascade;
create table if not exists tb_interval_1
(
c_interval_yeartomonth interval year to month
);

drop table if exists tb_interval_log cascade;
create table tb_interval_log
(
alter_time timestamp,
alter_desc varchar(40),
old_val varchar(40) ,
new_val varchar(40)
);

create or replace trigger test_interval_trig_1
before insert or update or delete
on tb_interval_1
for each row
as//
begin
  if inserting then
      insert into tb_interval_log values
      (systimestamp,'insert',null,cast(:new.c_interval_yeartomonth as varchar(40)) );
  elsif updating then
      insert into tb_interval_log values
      (systimestamp,'update',cast(:old.c_interval_yeartomonth as varchar(40)),cast(:new.c_interval_year as varchar(40)) );
  elsif deleting then
      insert into tb_interval_log values
      (systimestamp,'delete',cast(:old.c_interval_yeartomonth as varchar(40)),null );
  else
      null;
  end if;
end;//;
insert into tb_interval_1 values
(
interval '2-11' year to month
);--1 row inserted
select * from tb_interval_1 order by c_interval_yeartomonth;--1 row
select * from tb_interval_log order by alter_time;--1 row
drop table if exists tb_interval_2 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_2;
drop table if exists tb_interval_3 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_3;
drop table if exists tb_interval_4 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_4;
drop table if exists tb_interval_5 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_5;
drop table if exists tb_interval_1 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_1;

?section mantis11432
set schema test_trigger;
drop table if exists test_notnull cascade;
create table test_notnull(c1 int);
create or replace trigger test_notnull_trig after insert on test_notnull for each row as//
begin
  if new.c1 is null then
     insert into test_notnull_log values (0);
  else
     insert into test_notnull_log values (1);
  end if;
end//;
create table test_notnull_log like test_notnull;
insert into test_notnull values (null);
select * from test_notnull_log;
select * from test_notnull;
drop table if exists test_notnull cascade;
drop table if exists test_notnull_log cascade;
drop trigger test_notnull_trig;

?section mantis11434
set schema test_trigger;
drop table if exists tb_int cascade;
create table if not exists tb_int
(
id int,
insert_timestamp timestamp,
c_int int,
c_int_s int signed,
c_int_us int unsigned
);
drop table if exists tb_int_1 cascade;
create table if not exists tb_int_1 like tb_int;
create or replace trigger trig_int_be_insert
before insert
on tb_int
for each row as //
begin
  insert into tb_int_1
  values(:new.id,
         :new.insert_timestamp,
	 :new.c_int,
	 :new.c_int_s,
	 :new.c_int_us);
end//;
insert into tb_int
values
(
4,
current_timestamp,
+888888,
-888888,
888888
);
select * from tb_int_1;
insert into tb_int
values
(
5,
current_timestamp,
+2147483647,
+2147483646,
4294967294
);
select * from tb_int_1 order by id;
drop table if exists tb_int cascade;
drop table if exists tb_int_1 cascade;
drop trigger trig_int_be_insert;

?section mantis11418
set schema test_trigger;
drop table if exists tb_time cascade;
create table if not exists tb_time
(
c_time time,
c_time_0 time(0),
c_time_1 time(1),
c_time_2 time(2),
c_time_3 time(3),
c_time_4 time(4),
c_time_5 time(5),
c_time_6 time(6)
);

drop table if exists tb_time_log cascade;
create table tb_time_log
(
alter_time timestamp,
alter_col varchar(40),
alter_desc varchar(40),
old_val time(6),
new_val time(6)
);

insert into tb_time values
(
time '11:30:00',
time '11:30:00',
time '11:30:00.1',
time '11:30:00.12',
time '11:30:00.123',
time '11:30:00.1234',
time '11:30:00.12345',
time '11:30:00.123456'
);
create or replace trigger test_time_trig
before insert or update or delete
on tb_time
for each row
as//
begin
  if inserting then
      insert into tb_time_log values
        (systimestamp,'insert','c_time',null,:new.c_time),
	(systimestamp,'insert','c_time_0',null,:new.c_time_0),
	(systimestamp,'insert','c_time_1',null,:new.c_time_1),
	(systimestamp,'insert','c_time_2',null,:new.c_time_2),
	(systimestamp,'insert','c_time_3',null,:new.c_time_3),
	(systimestamp,'insert','c_time_4',null,:new.c_time_4),
	(systimestamp,'insert','c_time_5',null,:new.c_time_5),
	(systimestamp,'insert','c_time_6',null,:new.c_time_6);
  elsif updating then
      insert into tb_time_log values
        (systimestamp,'update','c_time',old.c_time,:new.c_time),
        (systimestamp,'update','c_time_0',old.c_time_0,:new.c_time_0),
        (systimestamp,'update','c_time_1',old.c_time_1,:new.c_time_1),
        (systimestamp,'update','c_time_2',old.c_time_2,:new.c_time_2),
        (systimestamp,'update','c_time_3',old.c_time_3,:new.c_time_3),
        (systimestamp,'update','c_time_4',old.c_time_4,:new.c_time_4),
        (systimestamp,'update','c_time_5',old.c_time_5,:new.c_time_5),
        (systimestamp,'update','c_time_6',old.c_time_6,:new.c_time_6);
  elsif deleting then
      insert into tb_time_log values
        (systimestamp,'delete','c_time',old.c_time,null),
        (systimestamp,'delete','c_time_0',old.c_time_0,null),
        (systimestamp,'delete','c_time_1',old.c_time_1,null),
        (systimestamp,'delete','c_time_2',old.c_time_2,null),
        (systimestamp,'delete','c_time_3',old.c_time_3,null),
        (systimestamp,'delete','c_time_4',old.c_time_4,null),
        (systimestamp,'delete','c_time_5',old.c_time_5,null),
        (systimestamp,'delete','c_time_6',old.c_time_6,null);
  else
      null;
  end if;
end//;

insert into tb_time values
(
time '11:30:00',
time '11:30:00',
time '11:30:00.1',
time '11:30:00.12',
time '11:30:00.123',
time '11:30:00.1234',
time '11:30:00.12345',
time '11:30:00.123456'
);

update tb_time
set c_time = time '14:30:00' ,
c_time_0 = time '14:30:00' ,
c_time_1 = time '14:30:00.1' ,
c_time_2 = time '14:30:00.12' ,
c_time_3 = time '14:30:00.123' ,
c_time_4 = time '14:30:00.1234' ,
c_time_5 = time '14:30:00.12345' ,
c_time_6 = time '14:30:00.123456'
where c_time = time '11:30:00';

delete from tb_time where c_time = time '11:30:00';

drop table if exists tb_timestamp cascade;
create table if not exists tb_timestamp
(
c_timestamp timestamp,
c_timestamp_0 timestamp(0),
c_timestamp_1 timestamp(1),
c_timestamp_2 timestamp(2),
c_timestamp_3 timestamp(3),
c_timestamp_4 timestamp(4),
c_timestamp_5 timestamp(5),
c_timestamp_6 timestamp(6)
);

drop table if exists tb_timestamp_log cascade;
create table tb_timestamp_log
(
alter_timestamp timestamp,
alter_col varchar(40),
alter_desc varchar(40),
old_val timestamp(6),
new_val timestamp(6)
);

create or replace trigger test_timestamp_trig
before insert or update or delete
on tb_timestamp
for each row
as//
begin
  if inserting then
      insert into tb_timestamp_log values
        (systimestamp,'insert','c_timestamp',null,:new.c_timestamp),
        (systimestamp,'insert','c_timestamp_0',null,:new.c_timestamp_0),
        (systimestamp,'insert','c_timestamp_1',null,:new.c_timestamp_1),
        (systimestamp,'insert','c_timestamp_2',null,:new.c_timestamp_2),
        (systimestamp,'insert','c_timestamp_3',null,:new.c_timestamp_3),
        (systimestamp,'insert','c_timestamp_4',null,:new.c_timestamp_4),
        (systimestamp,'insert','c_timestamp_5',null,:new.c_timestamp_5),
        (systimestamp,'insert','c_timestamp_6',null,:new.c_timestamp_6);
  elsif updating then
      insert into tb_timestamp_log values
        (systimestamp,'update','c_timestamp',old.c_timestamp,:new.c_timestamp),
        (systimestamp,'update','c_timestamp_0',old.c_timestamp_0,:new.c_timestamp_0),
        (systimestamp,'update','c_timestamp_1',old.c_timestamp_1,:new.c_timestamp_1),
        (systimestamp,'update','c_timestamp_2',old.c_timestamp_2,:new.c_timestamp_2),
        (systimestamp,'update','c_timestamp_3',old.c_timestamp_3,:new.c_timestamp_3),
        (systimestamp,'update','c_timestamp_4',old.c_timestamp_4,:new.c_timestamp_4),
        (systimestamp,'update','c_timestamp_5',old.c_timestamp_5,:new.c_timestamp_5),
        (systimestamp,'update','c_timestamp_6',old.c_timestamp_6,:new.c_timestamp_6);
  elsif deleting then
      insert into tb_timestamp_log values
        (systimestamp,'delete','c_timestamp',old.c_timestamp,null),
        (systimestamp,'delete','c_timestamp_0',old.c_timestamp_0,null),
        (systimestamp,'delete','c_timestamp_1',old.c_timestamp_1,null),
        (systimestamp,'delete','c_timestamp_2',old.c_timestamp_2,null),
        (systimestamp,'delete','c_timestamp_3',old.c_timestamp_3,null),
        (systimestamp,'delete','c_timestamp_4',old.c_timestamp_4,null),
        (systimestamp,'delete','c_timestamp_5',old.c_timestamp_5,null),
        (systimestamp,'delete','c_timestamp_6',old.c_timestamp_6,null);
  else
      null;
  end if;
end//;
insert into tb_timestamp values
(
timestamp '2019-06-11 11:30:00.123456',
timestamp '2019-06-11 11:30:00',
timestamp '2019-06-11 11:30:00.1',
timestamp '2019-06-11 11:30:00.12',
timestamp '2019-06-11 11:30:00.123',
timestamp '2019-06-11 11:30:00.1234',
timestamp '2019-06-11 11:30:00.12345',
timestamp '2019-06-11 11:30:00.123456'
);--1 row inserted
select * from tb_timestamp;--1 row
select * from tb_timestamp_log order by alter_timestamp;--8 row

drop table if exists tb_time cascade;
drop table if exists tb_time_log cascade;
drop trigger test_time_trig;
drop table if exists tb_timestamp cascade;
drop table if exists tb_timestamp_log cascade;
drop trigger test_timestamp_trig;


?section mantis11554
set schema test_trigger;
drop table if exists tb_date cascade;
create table if not exists tb_date
(
c_date date
);
drop table if exists tb_date_log cascade;
create table tb_date_log
(
alter_time timestamp,
alter_desc varchar(40),
old_val date,
new_val date
);
create or replace trigger test_date_trig
after insert or update or delete
on tb_date
for each row
as //
begin
  if inserting then
    insert into tb_date_log values (systimestamp,'insert',null,:new.c_date);
  elsif updating then
    insert into tb_date_log values (systimestamp,'update',:old.c_date,:new.c_date);
  elsif deleting then
    insert into tb_date_log values (systimestamp,'delete',:old.c_date,null);
  else
    null;
  end if;
end;//;
    
insert into tb_date values (DATE '2016-02-29');
update tb_date set c_date = DATE '2016-03-29';
delete from tb_date;
select * from tb_date_log order by alter_desc, alter_time;

drop table if exists tb_date cascade;
drop table if exists tb_date_log cascade;
drop trigger test_date_trig;


?section mantis11414
set schema test_trigger;
drop table if exists test_tb cascade;
create table if not exists test_tb
(
c1 int,
c2 char(20),
c3 decimal(10,2),
c4 numeric(10,2)
);

drop table if exists test_tb_log cascade;
create table if not exists test_tb_log
(
c1 timestamp,
c2 varchar(40)
);

create or replace trigger test_tb_trig
after insert or update or delete
on test_tb
for each row
as//
begin
  if inserting then
    insert into test_tb_log values (systimestamp,'inserted one new row');
  elsif updating then
    insert into test_tb_log values (systimestamp,'update one row');
  elsif deleting then
    insert into test_tb_log values (systimestamp,'delete one row');
  else
    null;
  end if;
end;//;

showddl trigger test_tb_trig;
drop table test_tb_log;
insert into test_tb values (1,'a',1.5,1.5); -- get error, and data shoule nor insert.
select * from test_tb order by c1;
insert into test_tb values (2,'a',1.5,1.5),(3,'a',1.5,1.5); --get error, and data shoule nor insert.
select * from test_tb order by c1;
update test_tb set c3 = c3*10 ,c4 = c4*100 where c1 = 1;
select * from test_tb order by c1;
update test_tb set c3 = c3*10 ,c4 = c4*100 where c1 in (2,3);
select * from test_tb order by c1;
delete from test_tb where c1 = 1;
select * from test_tb order by c1;
delete from test_tb where c1 in (2,3);
select * from test_tb order by c1;
drop table if exists test_tb cascade;
drop table if exists test_tb_log cascade;
drop trigger test_tb_trig;


?section mantis11420
set schema test_trigger;
drop table if exists test_tb3_1 cascade;
create table test_tb3_1(c1 TINYINT unsigned);
drop table if exists test_tb3_1_log cascade;
create table test_tb3_1_log like test_tb3_1;
create or replace trigger test_tb3_1_trigger
after insert on test_tb3_1
for each row
as//
begin
  insert into test_tb3_1_log values(new.c1);
end;//;
insert into test_tb3_1 values (130);
select * from test_tb3_1;
select * from test_tb3_1_log;

drop table if exists test_tb3_2 cascade;
create table test_tb3_2(c1 numeric(2,1) unsigned);
drop table if exists test_tb3_2_log cascade;
create table test_tb3_2_log like test_tb3_2;
create or replace trigger test_tb3_2_trigger
after insert on test_tb3_2
for each row
as//
begin
  insert into test_tb3_2_log values(new.c1);
end;//;
insert into test_tb3_2 values (3.1);
select * from test_tb3_2;
select * from test_tb3_2_log;
drop table if exists test_tb3_1 cascade;
drop table if exists test_tb3_1_log cascade;
drop trigger test_tb3_1_trigger;
drop table if exists test_tb3_2 cascade;
drop table if exists test_tb3_2_log cascade;
drop trigger test_tb3_2_trigger;

drop table if exists tb_numeric cascade;
create table if not exists tb_numeric
(
c_numeric_ps_us_min numeric(1,1) unsigned,
c_numeric_ps_us_max numeric(128,128) unsigned,
c_numeric_p_us_min numeric(1) unsigned,
c_numeric_p_us_max numeric(128) unsigned
);
drop table if exists tb_numeric_1 cascade;
create table tb_numeric_1 like tb_numeric;
create trigger trig_numeric_be_insert
before insert
on tb_numeric
for each row
as //
begin
 insert into tb_numeric_1
 values
 (
 :new.c_numeric_ps_us_min ,
 :new.c_numeric_ps_us_max ,
 :new.c_numeric_p_us_min ,
 :new.c_numeric_p_us_max
 );
end;//;
insert into tb_numeric
values
(
0.9,
0.9999,
9,
99
);
select * from tb_numeric_1 order by c_numeric_ps_us_min;
drop table if exists tb_numeric cascade;
create table if not exists tb_numeric
(
c_numeric_ps_us_m numeric(10,5) unsigned
);
drop table if exists tb_numeric_1 cascade;
create table tb_numeric_1 like tb_numeric;
create or replace trigger trig_numeric_be_insert
before insert
on tb_numeric
for each row
as //
begin
 insert into tb_numeric_1
 values
 (
 :new.c_numeric_ps_us_m
 );
end;//;
insert into tb_numeric
values
(
10.5
);

drop table if exists tb_numeric cascade;
create table if not exists tb_numeric
(
c_numeric_p_us_m numeric(10) unsigned
);
drop table if exists tb_numeric_1 cascade;
create table tb_numeric_1 like tb_numeric;
create trigger trig_numeric_be_insert
before insert
on tb_numeric
for each row
as //
begin
 insert into tb_numeric_1
 values
 (
 :new.c_numeric_p_us_m
 );
end;//;
insert into tb_numeric values(10);
select * from tb_numeric;
select * from tb_numeric_1;

drop table if exists tb_numeric cascade;
drop table if exists tb_numeric_1 cascade;
drop trigger trig_numeric_be_insert;


?section mantis13136
set schema test_trigger;
drop table if exists T_BUET_BUSINESSEVENTs;
CREATE TABLE T_BUET_BUSINESSEVENTs
(
WORKDATE                         VARCHAR(8 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, AGENTSERIALNO                    VARCHAR(12 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, WORKTIME                         VARCHAR(6 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT _ISO88591'000000' NOT SERIALIZED
, MBFLAG                           VARCHAR(1 BYTE) CHARACTER SET UTF8 COLLATE
DEFAULT DEFAULT NULL NOT SERIALIZED
, PAYFLAG                          VARCHAR(2 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PRODUCTCODE                      VARCHAR(10 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, CHANNELCODE                      VARCHAR(10 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, BUSICHANNELCODE                  VARCHAR(10 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CHANNELDATE                      VARCHAR(8 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, CHANNELTIME                      VARCHAR(6 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT _ISO88591'000000' NOT SERIALIZED
, CHANNELSERNO                     VARCHAR(50 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, TRADESTEP                        VARCHAR(3 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, TRADEBUSISTEP                    VARCHAR(3 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, TRADESTATUS                      VARCHAR(1 BYTE) CHARACTER SET UTF8 COLLATE
DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, VLDBUSISTEP                      VARCHAR(3 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, EVENTTYPE                        VARCHAR(1 BYTE) CHARACTER SET UTF8 COLLATE
DEFAULT DEFAULT NULL NOT SERIALIZED
, BRNO                             VARCHAR(12 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, PXYBRNO                          VARCHAR(12 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, ZONENO                           VARCHAR(12 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, TELLERNO                         VARCHAR(20 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, AUTHTELLERNO                     VARCHAR(20 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, TEMPLATECODE                     VARCHAR(30 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, TRANSCODE                        VARCHAR(10 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, BUSITYPE                         VARCHAR(8 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, BUSIKIND                         VARCHAR(200 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CORPTRADETYPE                    VARCHAR(100 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CORPBUSITYPE                     VARCHAR(100 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CORPBUSIKIND                     VARCHAR(200 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, ENTRUSTDATE                      VARCHAR(8 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, MSGID                            VARCHAR(100 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, DEALCODE                         VARCHAR(20 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, DEALMSG                          VARCHAR(500 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CENTERSTATUS                     VARCHAR(10 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CENTERDEALCODE                   VARCHAR(20 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CENTERDEALMSG                    VARCHAR(200 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, SERVICECODE                      VARCHAR(20 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CHANNELTRANSCODE                 VARCHAR(30 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, VOUCHERSTATUS                    VARCHAR(1 BYTE) CHARACTER SET UTF8 COLLATE
DEFAULT DEFAULT _ISO88591'0' NOT SERIALIZED
, VOUCHERPRTNUM                    VARCHAR(8 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT _ISO88591'0' NOT SERIALIZED
, POSTSCRIPT                       VARCHAR(1000 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, GLOSNO                           VARCHAR(40 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, AMOUNT                           VARCHAR(22 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, SENDBANK                         VARCHAR(14 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, SENDBANKNAME                     VARCHAR(280 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, SENDCLEARBANK                    VARCHAR(14 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, SENDCLEARBANKNAME                VARCHAR(280 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, RECVBANK                         VARCHAR(14 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, RECVBANKNAME                     VARCHAR(280 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, RECVCLEARBANK                    VARCHAR(14 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, RECVCLEARBANKNAME                VARCHAR(280 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PAYERACC                         VARCHAR(32 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PAYERNAME                        VARCHAR(280 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PAYEEACC                         VARCHAR(32 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PAYEENAME                        VARCHAR(280 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, CRTDATETIME                      VARCHAR(20 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT NO DEFAULT NOT NULL NOT DROPPABLE NOT SERIALIZED
, ALTDATETIME                      VARCHAR(20 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PRDUATTRIBUTE1                   VARCHAR(5 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PRDUATTRIBUTE2                   VARCHAR(10 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PRDUATTRIBUTE3                   VARCHAR(150 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PRDUATTRIBUTE4                   VARCHAR(200 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, PRDUATTRIBUTE5                   VARCHAR(200 BYTES) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED
, TRANSTIMETYPE                    VARCHAR(3 CHARS) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED /*added_col*/
, CASHCANCELFLAG                   VARCHAR(3 CHARS) CHARACTER SET UTF8
COLLATE DEFAULT DEFAULT NULL NOT SERIALIZED /*added_col*/
, PRIMARY KEY (WORKDATE ASC, AGENTSERIALNO ASC)
);
CREATE OR REPLACE TRIGGER TR_PUB_REW_ENTERCOUNTs AFTER UPDATE ON
T_BUET_BUSINESSEVENTs FOR EACH ROW AS//
begin
  print("1");
END;//;
insert into T_BUET_BUSINESSEVENTs values( '20191113', '05486641', '3', '4', '5', '6',
'7', '8', '9', '10', '11', '12', '13', 'a', '15', 'b', '17', '18', '19', '20', '21',
'22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36',
'37', 'c', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51',
'52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63');
update t_buet_businessevents set tradebusistep='21',tradestatus='1' where workdate='20191113' and agentserialno='05486641';
drop table if exists T_BUET_BUSINESSEVENTs;
drop trigger TR_PUB_REW_ENTERCOUNTS;


?section mantis13535
set schema test_trigger;
drop table if exists tb_test cascade;
create table if not exists tb_test
(
id int,
c_bigint_s bigint signed
);
drop table if exists tb_test_dml_log cascade;
create table if not exists tb_test_dml_log
(
c_timestamp timestamp,
dml_name varchar(80),
pk_old_val int,
pk_new_val int
);
create or replace trigger test_trig_after_insert_log
after insert
on tb_test
for each row
as//
declare
  dml_name varchar(60);
begin
  set dml_name = 'id';
  insert into tb_test_dml_log values (current_timestamp,dml_name,null,:new.id);
  set dml_name = 'c_bigint_s';
  insert into tb_test_dml_log values (current_timestamp,dml_name,null,:new.c_bigint_s);
end;//;
SELECT * from tb_test_dml_log order by c_timestamp;
INSERT INTO tb_test VALUES (1,NULL);
SELECT * from tb_test_dml_log order by c_timestamp;
INSERT INTO tb_test VALUES (NULL,2);
SELECT * from tb_test_dml_log order by c_timestamp;
select count(*) from tb_test;
drop table if exists tb_test cascade;
drop table if exists tb_test_dml_log cascade;


?section mantis12649
set schema test_trigger;
drop table if exists tb_before_update cascade;
create table tb_before_update
(
c_bigint bigint ,
c_bigint_s bigint signed ,
c_int integer ,
c_int_s integer signed ,
c_int_us integer unsigned ,
c_smallint smallint ,
c_smallint_s smallint signed ,
c_smallint_us smallint unsigned ,
c_tinyint tinyint ,
c_dp double precision ,
c_float float ,
c_dec decimal(10,3),
c_char char(60) character set iso88591
);

drop table if exists tb_before_update_log cascade;
create table tb_before_update_log
(
c_date date,
col_name varchar(80),
old_col_value varchar(200) character set ucs2,
new_col_value varchar(200) character set ucs2
);

create or replace trigger test_trig_before_update
before insert or update or delete
on tb_before_update
for each row
as//
begin
if inserting then
insert into tb_before_update_log
values
(sysdate,'c_bigint',cast(:new.c_bigint as varchar(80)),cast(:new.c_bigint as varchar(80))),
(sysdate,'c_bigint_s',cast(:new.c_bigint_s as varchar(80)),cast(:new.c_bigint_s as varchar(80))),
(sysdate,'c_int',cast(:new.c_int as varchar(80)),cast(:new.c_int as varchar(80))),
(sysdate,'c_int_s',cast(:new.c_int_s as varchar(80)),cast(:new.c_int_s as varchar(80))),
(sysdate,'c_int_us',cast(:new.c_int_us as varchar(80)),cast(:new.c_int_us as varchar(80))),
(sysdate,'c_smallint',cast(:new.c_smallint as varchar(80)),cast(:new.c_smallint as varchar(80))),
(sysdate,'c_smallint_s',cast(:new.c_smallint_s as varchar(80)),cast(:new.c_smallint_s as varchar(80))),
(sysdate,'c_smallint_us',cast(:new.c_smallint_us as varchar(80)),cast(:new.c_smallint_us as varchar(80))),
(sysdate,'c_tinyint',cast(:new.c_tinyint as varchar(80)),cast(:new.c_tinyint as varchar(80))),
(sysdate,'c_dp',cast(:new.c_dp as varchar(80)),cast(:new.c_dp as varchar(80))),
(sysdate,'c_float',cast(:new.c_float as varchar(80)),cast(:new.c_float as varchar(80))),
(sysdate,'c_dec',cast(:new.c_dec as varchar(80)),cast(:new.c_dec as varchar(80))),
(sysdate,'c_char',:new.c_char,:new.c_char);
elsif updating then
insert into tb_before_update_log
values
(sysdate,'c_bigint',cast(:old.c_bigint as varchar(80)),cast(:old.c_bigint as varchar(80))),
(sysdate,'c_bigint_s',cast(:old.c_bigint_s as varchar(80)),cast(:old.c_bigint_s as varchar(80))),
(sysdate,'c_int',cast(:old.c_int as varchar(80)),cast(:old.c_int as varchar(80))),
(sysdate,'c_int_s',cast(:old.c_int_s as varchar(80)),cast(:old.c_int_s as varchar(80))),
(sysdate,'c_int_us',cast(:old.c_int_us as varchar(80)),cast(:old.c_int_us as varchar(80))),
(sysdate,'c_smallint',cast(:old.c_smallint as varchar(80)),cast(:old.c_smallint as varchar(80))),
(sysdate,'c_smallint_s',cast(:old.c_smallint_s as varchar(80)),cast(:old.c_smallint_s as varchar(80))),
(sysdate,'c_smallint_us',cast(:old.c_smallint_us as varchar(80)),cast(:old.c_smallint_us as varchar(80))),
(sysdate,'c_tinyint',cast(:old.c_tinyint as varchar(80)),cast(:old.c_tinyint as varchar(80))),
(sysdate,'c_dp',cast(:old.c_dp as varchar(80)),cast(:old.c_dp as varchar(80))),
(sysdate,'c_float',cast(:old.c_float as varchar(80)),cast(:old.c_float as varchar(80))),
(sysdate,'c_dec',cast(:old.c_dec as varchar(80)),cast(:old.c_dec as varchar(80))),
(sysdate,'c_char',:old.c_char,:old.c_char);

insert into tb_before_update_log
values
(sysdate,'c_bigint',cast(:new.c_bigint as varchar(80)),cast(:new.c_bigint as varchar(80))),
(sysdate,'c_bigint_s',cast(:new.c_bigint_s as varchar(80)),cast(:new.c_bigint_s as varchar(80))),
(sysdate,'c_int',cast(:new.c_int as varchar(80)),cast(:new.c_int as varchar(80))),
(sysdate,'c_int_s',cast(:new.c_int_s as varchar(80)),cast(:new.c_int_s as varchar(80))),
(sysdate,'c_int_us',cast(:new.c_int_us as varchar(80)),cast(:new.c_int_us as varchar(80))),
(sysdate,'c_smallint',cast(:new.c_smallint as varchar(80)),cast(:new.c_smallint as varchar(80))),
(sysdate,'c_smallint_s',cast(:new.c_smallint_s as varchar(80)),cast(:new.c_smallint_s as varchar(80))),
(sysdate,'c_smallint_us',cast(:new.c_smallint_us as varchar(80)),cast(:new.c_smallint_us as varchar(80))),
(sysdate,'c_tinyint',cast(:new.c_tinyint as varchar(80)),cast(:new.c_tinyint as varchar(80))),
(sysdate,'c_dp',cast(:new.c_dp as varchar(80)),cast(:new.c_dp as varchar(80))),
(sysdate,'c_float',cast(:new.c_float as varchar(80)),cast(:new.c_float as varchar(80))),
(sysdate,'c_dec',cast(:new.c_dec as varchar(80)),cast(:new.c_dec as varchar(80))),
(sysdate,'c_char',:new.c_char,:new.c_char);
elsif deleting then
insert into tb_before_update_log
values
(sysdate,'c_bigint',cast(:old.c_bigint as varchar(80)),cast(:old.c_bigint as varchar(80))),
(sysdate,'c_bigint_s',cast(:old.c_bigint_s as varchar(80)),cast(:old.c_bigint_s as varchar(80))),
(sysdate,'c_int',cast(:old.c_int as varchar(80)),cast(:old.c_int as varchar(80))),
(sysdate,'c_int_s',cast(:old.c_int_s as varchar(80)),cast(:old.c_int_s as varchar(80))),
(sysdate,'c_int_us',cast(:old.c_int_us as varchar(80)),cast(:old.c_int_us as varchar(80))),
(sysdate,'c_smallint',cast(:old.c_smallint as varchar(80)),cast(:old.c_smallint as varchar(80))),
(sysdate,'c_smallint_s',cast(:old.c_smallint_s as varchar(80)),cast(:old.c_smallint_s as varchar(80))),
(sysdate,'c_smallint_us',cast(:old.c_smallint_us as varchar(80)),cast(:old.c_smallint_us as varchar(80))),
(sysdate,'c_tinyint',cast(:old.c_tinyint as varchar(80)),cast(:old.c_tinyint as varchar(80))),
(sysdate,'c_dp',cast(:old.c_dp as varchar(80)),cast(:old.c_dp as varchar(80))),
(sysdate,'c_float',cast(:old.c_float as varchar(80)),cast(:old.c_float as varchar(80))),
(sysdate,'c_dec',cast(:old.c_dec as varchar(80)),cast(:old.c_dec as varchar(80))),
(sysdate,'c_char',:old.c_char,:old.c_char);
end if;
end;//;

insert into tb_before_update
values
(
2000,
2000,
1000,
1000,
1000,
100,
100,
100,
10,
1.5,
2.5,
1234,
null);

select c_dec from tb_before_update;
select * from tb_before_update_log where COL_NAME ='c_dec';

update tb_before_update set c_bigint = 3000;
select c_dec from tb_before_update;
select * from tb_before_update_log where COL_NAME ='c_dec';

delete from tb_before_update ;
select c_dec from tb_before_update;
select * from tb_before_update_log where COL_NAME ='c_dec';

delete from tb_before_update_log ;

create or replace trigger test_trig_before_update
after insert or update or delete
on tb_before_update
for each row
as//
begin
if inserting then
insert into tb_before_update_log
values
(sysdate,'c_bigint',cast(:new.c_bigint as varchar(80)),cast(:new.c_bigint as varchar(80))),
(sysdate,'c_bigint_s',cast(:new.c_bigint_s as varchar(80)),cast(:new.c_bigint_s as varchar(80))),
(sysdate,'c_int',cast(:new.c_int as varchar(80)),cast(:new.c_int as varchar(80))),
(sysdate,'c_int_s',cast(:new.c_int_s as varchar(80)),cast(:new.c_int_s as varchar(80))),
(sysdate,'c_int_us',cast(:new.c_int_us as varchar(80)),cast(:new.c_int_us as varchar(80))),
(sysdate,'c_smallint',cast(:new.c_smallint as varchar(80)),cast(:new.c_smallint as varchar(80))),
(sysdate,'c_smallint_s',cast(:new.c_smallint_s as varchar(80)),cast(:new.c_smallint_s as varchar(80))),
(sysdate,'c_smallint_us',cast(:new.c_smallint_us as varchar(80)),cast(:new.c_smallint_us as varchar(80))),
(sysdate,'c_tinyint',cast(:new.c_tinyint as varchar(80)),cast(:new.c_tinyint as varchar(80))),
(sysdate,'c_dp',cast(:new.c_dp as varchar(80)),cast(:new.c_dp as varchar(80))),
(sysdate,'c_float',cast(:new.c_float as varchar(80)),cast(:new.c_float as varchar(80))),
(sysdate,'c_dec',cast(:new.c_dec as varchar(80)),cast(:new.c_dec as varchar(80))),
(sysdate,'c_char',:new.c_char,:new.c_char);
elsif updating then
insert into tb_before_update_log
values
(sysdate,'c_bigint',cast(:old.c_bigint as varchar(80)),cast(:old.c_bigint as varchar(80))),
(sysdate,'c_bigint_s',cast(:old.c_bigint_s as varchar(80)),cast(:old.c_bigint_s as varchar(80))),
(sysdate,'c_int',cast(:old.c_int as varchar(80)),cast(:old.c_int as varchar(80))),
(sysdate,'c_int_s',cast(:old.c_int_s as varchar(80)),cast(:old.c_int_s as varchar(80))),
(sysdate,'c_int_us',cast(:old.c_int_us as varchar(80)),cast(:old.c_int_us as varchar(80))),
(sysdate,'c_smallint',cast(:old.c_smallint as varchar(80)),cast(:old.c_smallint as varchar(80))),
(sysdate,'c_smallint_s',cast(:old.c_smallint_s as varchar(80)),cast(:old.c_smallint_s as varchar(80))),
(sysdate,'c_smallint_us',cast(:old.c_smallint_us as varchar(80)),cast(:old.c_smallint_us as varchar(80))),
(sysdate,'c_tinyint',cast(:old.c_tinyint as varchar(80)),cast(:old.c_tinyint as varchar(80))),
(sysdate,'c_dp',cast(:old.c_dp as varchar(80)),cast(:old.c_dp as varchar(80))),
(sysdate,'c_float',cast(:old.c_float as varchar(80)),cast(:old.c_float as varchar(80))),
(sysdate,'c_dec',cast(:old.c_dec as varchar(80)),cast(:old.c_dec as varchar(80))),
(sysdate,'c_char',:old.c_char,:old.c_char);

insert into tb_before_update_log
values
(sysdate,'c_bigint',cast(:new.c_bigint as varchar(80)),cast(:new.c_bigint as varchar(80))),
(sysdate,'c_bigint_s',cast(:new.c_bigint_s as varchar(80)),cast(:new.c_bigint_s as varchar(80))),
(sysdate,'c_int',cast(:new.c_int as varchar(80)),cast(:new.c_int as varchar(80))),
(sysdate,'c_int_s',cast(:new.c_int_s as varchar(80)),cast(:new.c_int_s as varchar(80))),
(sysdate,'c_int_us',cast(:new.c_int_us as varchar(80)),cast(:new.c_int_us as varchar(80))),
(sysdate,'c_smallint',cast(:new.c_smallint as varchar(80)),cast(:new.c_smallint as varchar(80))),
(sysdate,'c_smallint_s',cast(:new.c_smallint_s as varchar(80)),cast(:new.c_smallint_s as varchar(80))),
(sysdate,'c_smallint_us',cast(:new.c_smallint_us as varchar(80)),cast(:new.c_smallint_us as varchar(80))),
(sysdate,'c_tinyint',cast(:new.c_tinyint as varchar(80)),cast(:new.c_tinyint as varchar(80))),
(sysdate,'c_dp',cast(:new.c_dp as varchar(80)),cast(:new.c_dp as varchar(80))),
(sysdate,'c_float',cast(:new.c_float as varchar(80)),cast(:new.c_float as varchar(80))),
(sysdate,'c_dec',cast(:new.c_dec as varchar(80)),cast(:new.c_dec as varchar(80))),
(sysdate,'c_char',:new.c_char,:new.c_char);
elsif deleting then
insert into tb_before_update_log
values
(sysdate,'c_bigint',cast(:old.c_bigint as varchar(80)),cast(:old.c_bigint as varchar(80))),
(sysdate,'c_bigint_s',cast(:old.c_bigint_s as varchar(80)),cast(:old.c_bigint_s as varchar(80))),
(sysdate,'c_int',cast(:old.c_int as varchar(80)),cast(:old.c_int as varchar(80))),
(sysdate,'c_int_s',cast(:old.c_int_s as varchar(80)),cast(:old.c_int_s as varchar(80))),
(sysdate,'c_int_us',cast(:old.c_int_us as varchar(80)),cast(:old.c_int_us as varchar(80))),
(sysdate,'c_smallint',cast(:old.c_smallint as varchar(80)),cast(:old.c_smallint as varchar(80))),
(sysdate,'c_smallint_s',cast(:old.c_smallint_s as varchar(80)),cast(:old.c_smallint_s as varchar(80))),
(sysdate,'c_smallint_us',cast(:old.c_smallint_us as varchar(80)),cast(:old.c_smallint_us as varchar(80))),
(sysdate,'c_tinyint',cast(:old.c_tinyint as varchar(80)),cast(:old.c_tinyint as varchar(80))),
(sysdate,'c_dp',cast(:old.c_dp as varchar(80)),cast(:old.c_dp as varchar(80))),
(sysdate,'c_float',cast(:old.c_float as varchar(80)),cast(:old.c_float as varchar(80))),
(sysdate,'c_dec',cast(:old.c_dec as varchar(80)),cast(:old.c_dec as varchar(80))),
(sysdate,'c_char',:old.c_char,:old.c_char);
end if;
end;//;
insert into tb_before_update
values
(
2000,
2000,
1000,
1000,
1000,
100,
100,
100,
10,
1.5,
2.5,
1234,
null);

select c_dec from tb_before_update;
select * from tb_before_update_log where COL_NAME ='c_dec';

update tb_before_update set c_bigint = 3000;
select c_dec from tb_before_update;
select * from tb_before_update_log where COL_NAME ='c_dec';
delete from tb_before_update ;
select c_dec from tb_before_update;
select * from tb_before_update_log where COL_NAME ='c_dec';

drop table if exists tb_before_update cascade;
drop table if exists tb_before_update_log cascade;

?section mantis12704
set schema test_trigger;
drop table if exists tb_decimal;
create table if not exists tb_decimal
(
id int,
insert_timestamp timestamp,
c_dec_ps_min decimal(1,1),
c_dec_ps_s_min decimal(1,1) signed,
c_dec_ps_us_min decimal(1,1) unsigned,
c_dec_ps_max decimal(18,18),
c_dec_ps_s_max decimal(18,18) signed,
c_dec_ps_us_max decimal(9,9) unsigned,
c_dec_p_min decimal(1,0),
c_dec_p_s_min decimal(1,0) signed,
c_dec_p_us_min decimal(1,0) unsigned,
c_dec_p_max decimal(18,0),
c_dec_p_s_max decimal(18,0) signed,
c_dec_p_us_max decimal(9,0) unsigned,
c_dec_ps_m decimal(8,5),
c_dec_ps_s_m decimal(8,5) signed,
c_dec_ps_us_m decimal(8,5) unsigned,
c_dec_p_m decimal(8,0),
c_dec_p_s_m decimal(8,0) signed,
c_dec_p_us_m decimal(8,0) unsigned
);
drop table if exists tb_decimal_1;
create table if not exists tb_decimal_1 like tb_decimal;

create or replace trigger trig_decimal_be_insert
before insert or update or delete
on tb_decimal
for each row as //
begin
if inserting or updating then
insert into tb_decimal_1
values
(
:new.id ,
:new.insert_timestamp ,
:new.c_dec_ps_min ,
:new.c_dec_ps_s_min ,
:new.c_dec_ps_us_min ,
:new.c_dec_ps_max ,
:new.c_dec_ps_s_max ,
:new.c_dec_ps_us_max ,
:new.c_dec_p_min ,
:new.c_dec_p_s_min ,
:new.c_dec_p_us_min ,
:new.c_dec_p_max ,
:new.c_dec_p_s_max ,
:new.c_dec_p_us_max ,
:new.c_dec_ps_m ,
:new.c_dec_ps_s_m ,
:new.c_dec_ps_us_m ,
:new.c_dec_p_m ,
:new.c_dec_p_s_m ,
:new.c_dec_p_us_m
);
elsif deleting then
insert into tb_decimal_1
values
(
:old.id ,
:old.insert_timestamp ,
:old.c_dec_ps_min ,
:old.c_dec_ps_s_min ,
:old.c_dec_ps_us_min ,
:old.c_dec_ps_max ,
:old.c_dec_ps_s_max ,
:old.c_dec_ps_us_max ,
:old.c_dec_p_min ,
:old.c_dec_p_s_min ,
:old.c_dec_p_us_min ,
:old.c_dec_p_max ,
:old.c_dec_p_s_max ,
:old.c_dec_p_us_max ,
:old.c_dec_ps_m ,
:old.c_dec_ps_s_m ,
:old.c_dec_ps_us_m ,
:old.c_dec_p_m ,
:old.c_dec_p_s_m ,
:old.c_dec_p_us_m
);
end if;
end;//;

insert into tb_decimal
values
(
1,
current_timestamp,
+0.9,
+0.9,
0.9,
+0.999999999999999999,
+0.999999999999999999,
0.999999999,
+9,
+9,
9,
+999999999999999999,
+999999999999999999,
999999999,
+999.99999,
+999.99999,
999.99999,
+99999999,
+99999999,
99999999
),
(
2,
current_timestamp,
-0.9,
-0.9,
0,
-0.999999999999999999,
-0.999999999999999999,
0,
-9,
-9,
0,
-999999999999999999,
-999999999999999999,
0,
-999.99999,
-999.99999,
0,
-99999999,
-99999999,
0
),
(
3,
current_timestamp,
0.6,
0.6,
0.6,
-0.6,
-0.6,
0.6,
6,
6,
6,
666666,
666666,
6,
666.66666,
66.66666,
6,
666,
66666,
6
);
insert into tb_decimal
values
(
5,
current_timestamp,
0.6,
0.6,
0.6,
-0.6,
-0.6,
0.6,
6,
6,
6,
666666,
666666,
6,
666.66666,
66.66666,
6,
666,
66666,
6
);

select * from tb_decimal order by insert_timestamp;
select * from tb_decimal_1 order by insert_timestamp;
update tb_decimal set c_dec_ps_min = 0.1;
select count(*) from tb_decimal_1;
select count(*) from tb_decimal;
delete from tb_decimal;
select count(*) from tb_decimal_1;
select count(*) from tb_decimal;

drop table if exists tb_decimal;
drop table if exists tb_decimal_1;


?section mantis11659
set schema test_trigger;
drop table if exists tb_blob cascade;
create table if not exists tb_blob (c_blob blob, c1 int);
drop table if exists tb_blob_log cascade;
create table tb_blob_log (alter_time timestamp,alter_desc varchar(40), c1 int);
drop table if exists tb_blob_log1 cascade;
create table tb_blob_log1 (alter_time timestamp,alter_desc varchar(40),old_val blob,new_val blob);

create or replace trigger test_blob_trig
before insert or update or delete
on tb_blob
for each row
as//
begin
  if inserting then
      insert into tb_blob_log values (systimestamp,'insert', :new.c1);
  elsif updating then
      insert into tb_blob_log1 values (systimestamp,'update',:old.c_blob,:new.c_blob);
  elsif deleting then
      insert into tb_blob_log values (systimestamp,'delete',:old.c_blob,null);
  else
      null;
  end if;
end//;
insert into tb_blob values (stringtolob('bbb'), 2);
update tb_blob set c_blob = stringtolob('aaa') where c1=1;
delete from tb_blob where c1=1;
select * from tb_blob order by c1;
drop table if exists tb_blob cascade;
drop table if exists tb_blob_log cascade;
drop table if exists tb_blob_log1 cascade;


?section mantis11431
set schema test_trigger;
drop table if exists tb_decimal cascade;
create table if not exists tb_decimal
(
id int,
insert_timestamp timestamp,
c_dec_ps_min decimal(1,1),
c_dec_ps_s_min decimal(1,1) signed,
c_dec_ps_us_min decimal(1,1) unsigned,
c_dec_ps_max decimal(18,18),
c_dec_ps_s_max decimal(18,18) signed,
c_dec_ps_us_max decimal(9,9) unsigned,
c_dec_p_min decimal(1,0),
c_dec_p_s_min decimal(1,0) signed,
c_dec_p_us_min decimal(1,0) unsigned,
c_dec_p_max decimal(18,0),
c_dec_p_s_max decimal(18,0) signed,
c_dec_p_us_max decimal(9,0) unsigned,
c_dec_ps_m decimal(8,5),
c_dec_ps_s_m decimal(8,5) signed,
c_dec_ps_us_m decimal(8,5) unsigned,
c_dec_p_m decimal(8,0),
c_dec_p_s_m decimal(8,0) signed,
c_dec_p_us_m decimal(8,0) unsigned
);
insert into tb_decimal
values
(
4,
current_timestamp,
-0.8,
-0.8,
0.8,
0.8,
0.8,
0.8,
8,
8,
8,
888888,
888888,
8,
888.88888,
88.88888,
8,
888,
88888,
8
);
drop table if exists tb_decimal_1 cascade;
create table if not exists tb_decimal_1 like tb_decimal;

create trigger trig_decimal_be_insert
before insert
on tb_decimal
for each row as //
begin
  insert into tb_decimal_1
  values
  (
    :new.id ,
    :new.insert_timestamp ,
    :new.c_dec_ps_min ,
    :new.c_dec_ps_s_min ,
    :new.c_dec_ps_us_min ,
    :new.c_dec_ps_max ,
    :new.c_dec_ps_s_max ,
    :new.c_dec_ps_us_max ,
    :new.c_dec_p_min ,
    :new.c_dec_p_s_min ,
    :new.c_dec_p_us_min ,
    :new.c_dec_p_max ,
    :new.c_dec_p_s_max ,
    :new.c_dec_p_us_max ,
    :new.c_dec_ps_m ,
    :new.c_dec_ps_s_m ,
    :new.c_dec_ps_us_m ,
    :new.c_dec_p_m ,
    :new.c_dec_p_s_m ,
    :new.c_dec_p_us_m
  );
end;//;
select * from tb_decimal_1;
insert into tb_decimal
values
(
4,
current_timestamp,
-0.8,
-0.8,
0.8,
0.8,
0.8,
0.8,
8,
8,
8,
888888,
888888,
8,
888.88888,
88.88888,
8,
888,
88888,
8
);
select * from tb_decimal_1;
drop table if exists tb_decimal cascade;
drop table if exists tb_decimal_1 cascade;


?section mantis11688
set schema test_trigger;
drop table if exists tb_real cascade;
create table if not exists tb_real
(
id int,
insert_timestamp timestamp,
c_real real
);
drop table if exists tb_real_1 cascade;
create table tb_real_1 like tb_real ;
select * from tb_real;
select * from tb_real_1;
create or replace trigger trig_real_be_insert
before insert
on tb_real
for each row
as //
begin
  insert into tb_real_1
    values
    (
      :new.id,
      :new.insert_timestamp,
      :new.c_real
    );
end;//;
select * from tb_real;
select * from tb_real_1;
insert into tb_real
values
(
1,
current_timestamp,
3.40282347e+38
),
(
2,
current_timestamp,
-1.17549435e-38
),
(
3,
current_timestamp,
6666.666
);
select * from tb_real order by id;
select * from tb_real_1 order by id;
drop table if exists tb_real cascade;
drop table if exists tb_real_1 cascade;
drop trigger trig_real_be_insert;


?section mantis11690
set terminal_charset iso88591;
set schema test_trigger;
drop table if exists test_tb cascade;
create table test_tb(c1 int unique);
drop table if exists test_tb_log cascade;
create table test_tb_log(c1 int);
create or replace trigger test_tb_trig
after insert or update or delete
on test_tb
for each row
as//
begin
 if inserting then
  insert into test_tb_log values(:new.c1);
 elsif updating then
  insert into test_tb_log values(:old.c1);
  insert into test_tb_log values(:new.c1);
 elsif deleting then
  insert into test_tb_log values(:old.c1);
 else
  null;
 end if;
end;//;
insert into test_tb values (1);
select * from test_tb order by c1;
select * from test_tb_log order by c1;
update test_tb set c1 = c1 *10;
select * from test_tb order by c1;
select * from test_tb_log order by c1;
insert into test_tb values (11);
insert into test_tb values (12);
delete from test_tb;
select * from test_tb order by c1;
select * from test_tb_log order by c1;
drop table if exists test_tb cascade;
drop table if exists test_tb_log cascade;
drop trigger test_tb_trig;


?section mantis12050
set schema test_trigger;
drop table if exists tb_long_query cascade;
drop table if exists tb_long_query_log cascade;

create table if not exists tb_long_query
(
c_varchar_utf8   varchar(9000 chars) character set utf8
);
create TABLE IF NOT EXISTS tb_long_query_log
(
oper_desc  varchar(30),
oper_query varchar(10000 chars) character set ucs2
);

insert into tb_long_query_log values (NULL,NULL);

create or replace trigger tb_long_query_TRIG
after insert or update or delete
on tb_long_query
for each statement
as//
 begin
   if inserting then
     update tb_long_query_log set oper_desc = 'insert', oper_query = ACTION_SQL ;
   elsif updating then
     UPDATE tb_long_query_log SET oper_desc = 'update', oper_query = ACTION_SQL ;
   elsif deleting then
     UPDATE tb_long_query_log SET oper_desc = 'delete', oper_query = ACTION_SQL ;
   else
     NULL;
 END IF;
END;//;

GET TRIGGERS;
SHOWDDL TRIGGER TB_LONG_QUERY_TRIG;
SELECT LEFT(c_varchar_utf8,1) as a FROM tb_long_query order by a;
SELECT * FROM tb_long_query_log;
insert into tb_long_query values ('');

SELECT LEFT(c_varchar_utf8,1) as a FROM tb_long_query order by a;
SELECT * FROM tb_long_query_log;

insert into tb_long_query values ('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'),('ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc');

SELECT LEFT(c_varchar_utf8,1) as a FROM tb_long_query order by a;
SELECT * FROM tb_long_query_log;

UPDATE tb_long_query SET c_varchar_utf8 =  '' WHERE LEFT(c_varchar_utf8,1) = 'a';

SELECT LEFT(c_varchar_utf8,1) as a FROM tb_long_query order by a;
SELECT * FROM tb_long_query_log;

UPDATE tb_long_query SET c_vercher_utf8 =  '' WHERE LEFT(c_vercher_utf8,1) IN ('c','b');

SELECT LEFT(c_varchar_utf8,1) as a FROM tb_long_query order by a;
SELECT * FROM tb_long_query_log;

DELETE FROM tb_long_query WHERE c_varchar_utf8 =  '';

SELECT LEFT(c_varchar_utf8,1) as a FROM tb_long_query order by a;
SELECT * FROM tb_long_query_log;

DELETE FROM tb_long_query WHERE c_varchar_utf8 =  '';

SELECT LEFT(c_varchar_utf8,1) as a FROM tb_long_query order by a;
SELECT * FROM tb_long_query_log;
DROP TABLE tb_long_query CASCADE;
DROP TABLE tb_long_query_log CASCADE;
DROP trigger "tb_long_query_TRIG";


?section mantis11955
set schema test_trigger;
drop table if exists t1 cascade;
drop table if exists t1_log cascade;
create table t1(c1 char(10), c2 int);
create table t1_log (c1 char(512), insert_timestamp timestamp);
create or replace trigger "abc"
after insert or update or delete on t1
for each row
as//
begin
  insert into t1_log values(ACTION_SQL, current_timestamp);
end;//;

showddl trigger "abc";
drop table if exists t1 cascade;
drop table if exists t1_log cascade;
drop trigger "abc";


?section mantis11880
set schema test_trigger;
drop table if exists test_py cascade;
create table test_pk (c1 int primary key,c2 int);
drop table if exists test_log cascade;
create table test_log(c1 timestamp,c2 varchar(30));
drop table if exists test_py_log cascade;
create table test_py_log (c1 int, c2 int);

create or replace trigger test_trig
before insert or update or delete
on test_pk
for each row
as //
begin
if inserting then
  insert into test_log values (systimestamp,'insert');
elsif updating then
  insert into test_log values (systimestamp,'update');
  insert into test_py_log values (new.c1, new.c2);
  insert into test_py_log values (old.c1, old.c2);
elsif deleting then
  insert into test_log values (systimestamp,'delete');
else
  null;
end if;
end;//;
insert into test_pk values (1,2);
select * from test_log order by c2, c1;
update test_pk set c1 =0 where c1 =1;
select * from test_log order by c2, c1;
select * from test_py_log order by c2, c1;
update test_pk set c1 =1 where c1 =0;
select * from test_pk;
select * from test_log order by c2, c1;
select * from test_py_log order by c2, c1;
drop table if exists test_py cascade;
drop table if exists test_log cascade;
drop table if exists test_py_log cascade;
drop trigger test_trig;


?section mantis11937
set schema test_trigger;
drop table if exists tb_varchar cascade;
create table if not exists tb_varchar
(
id int,
insert_timestamp timestamp,
c_varchar_iso_min varchar(1) character set iso88591,
c_varchar_iso_max varchar(16777216) character set iso88591,
c_varchar_utf8_min varchar(1) character set utf8,
c_varchar_utf8_max varchar(16777216 bytes) character set utf8,
c_varchar_ucs2_min varchar(1) character set ucs2,
c_varchar_ucs2_max varchar(8388608) character set ucs2
);
create or replace trigger trig_varchar_be_insert
before insert
on tb_varchar
for each row
as//
begin
 insert into tb_varchar_1
  values
   (
    :new.id,
    :new.insert_timestamp,
    :new.c_varchar_iso_min,
    :new.c_varchar_iso_max,
    :new.c_varchar_utf8_min,
    :new.c_varchar_utf8_max,
    :new.c_varchar_ucs2_min,
    :new.c_varchar_ucs2_max
    );
end;//;
insert into tb_varchar
values
(
8,
current_timestamp,
'a',
repeat('a',16777215)||'a',
'a',
repeat('a',16777215),
'a',
repeat('a',8388606)
);
drop table if exists tb_varchar cascade;
drop trigger trig_varchar_be_insert;


?section mantis12133
set schema test_trigger;
DROP TABLE IF EXISTS TE_INFO_COMBO_COL CASCADE;
CREATE TABLE TE_INFO_COMBO_COL
(
CORPRATE  VARCHAR2(3)   CHARACTER SET UTF8 NOT NULL,
TRANCODE  VARCHAR2(18)  CHARACTER SET UTF8 NOT NULL,
ADENAME   VARCHAR2(64)  CHARACTER SET UTF8 NOT NULL,
CONDID    VARCHAR2(256) CHARACTER SET UTF8 NOT NULL,
ENTRYNAME VARCHAR2(256) CHARACTER SET UTF8 NOT NULL,
CONDDESC  VARCHAR2(512) CHARACTER SET UTF8,
PRIMARY KEY (CORPRATE, TRANCODE, ADENAME, CONDID, ENTRYNAME)
);
DROP TABLE IF EXISTS TE_OPERTABLE_LOG CASCADE;
CREATE TABLE TE_OPERTABLE_LOG
(
OPERUSER          VARCHAR2(10)    CHARACTER SET UTF8,
OPERTIME          VARCHAR2(20)    CHARACTER SET UTF8,
ORACLE_SCN        VARCHAR2(20)    CHARACTER SET UTF8,
ACTION_TYPE       VARCHAR2(128)   CHARACTER SET UTF8,
OBJ_NAME          VARCHAR2(30)    CHARACTER SET UTF8,
BEFORCOUNT        VARCHAR2(100)   CHARACTER SET UTF8,
AFTERCOUNT        VARCHAR2(100)   CHARACTER SET UTF8,
ACTION_SQL        VARCHAR2(4000)  CHARACTER SET UTF8,
ORA_USER          VARCHAR2(100)   CHARACTER SET UTF8,
ORA_AUDSID        VARCHAR2(100)   CHARACTER SET UTF8,
CLIENT_IP         VARCHAR2(100)   CHARACTER SET UTF8,
CLIENT_OS_HOST    VARCHAR2(100)   CHARACTER SET UTF8,
CLIENT_OS_USER    VARCHAR2(100)   CHARACTER SET UTF8,
UPDATE_TIME       VARCHAR2(20)    CHARACTER SET UTF8,
UPDATE_ORACLE_SCN VARCHAR2(20)    CHARACTER SET UTF8,
REMARKS           VARCHAR2(500)   CHARACTER SET UTF8
);
CREATE OR REPLACE TRIGGER TE_INFO_COMBO_COL_BEFORE
BEFORE  INSERT OR UPDATE OR DELETE
ON TE_INFO_COMBO_COL
FOR EACH STATEMENT
AS//
DECLARE
  CLIENT_IP       VARCHAR(100) :=NULL;
  CLIENT_OS_HOST  VARCHAR(100) :=NULL;
  CLIENT_OS_USER  VARCHAR(100) :=NULL;
  ORA_USER        VARCHAR(100) :=NULL;
  ORA_AUDSID      VARCHAR(100) :=NULL;
  ACTION_SQL_TEXT VARCHAR(4000) :=NULL;
  BEFORCOUNT      VARCHAR(100) :=NULL;
  ACTION_TYPE_TEXT VARCHAR(100) :=NULL;
  BEGIN
    SELECT COUNT(*) INTO BEFORCOUNT FROM TE_INFO_COMBO_COL;
    SELECT SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','SESSION_USER'),SYS_CONTEXT('USERENV','SESSIONID'),SYS_CONTEXT('USERENV','HOST'),SYS_CONTEXT('USERENV','OS_USER')  INTO CLIENT_IP,ORA_USER,ORA_AUDSID,CLIENT_OS_HOST,CLIENT_OS_USER FROM DUAL;
    IF CLIENT_IP IS NULL THEN
      CLIENT_IP:='ESGYN_SERVER';
    END IF;
    IF INSERTING THEN
      SET ACTION_TYPE_TEXT = 'INSERT';
    ELSIF UPDATING THEN
      SET ACTION_TYPE_TEXT = 'UPDATE';
    ELSIF DELETING THEN
      SET ACTION_TYPE_TEXT = 'DELETE';
    END IF;
  INSERT INTO TE_OPERTABLE_LOG (OPERUSER, OPERTIME, ORACLE_SCN, ACTION_TYPE, OBJ_NAME, BEFORCOUNT, AFTERCOUNT, ACTION_SQL, ORA_USER, ORA_AUDSID, CLIENT_IP, CLIENT_OS_HOST,
  CLIENT_OS_USER, REMARKS) VALUES ('SYSTEM', LEFT(TO_CHAR(CURRENT_TIMESTAMP,'YYYYMMDDHH24MISSFF'),17), LEFT(TO_CHAR(CURRENT_TIMESTAMP,'YYYYMMDDHH24MISSFF'),17), ACTION_TYPE_TEXT, 'TE_INFO_COMBO_COL', 10,'',ACTION_SQL,ORA_USER, ORA_AUDSID, CLIENT_IP, CLIENT_OS_HOST, CLIENT_OS_USER,'');
END;//;

INSERT INTO TE_INFO_COMBO_COL VALUES ('1','1','1','1','1','1');
select count(*) from TE_OPERTABLE_LOG;
INSERT INTO TE_INFO_COMBO_COL VALUES('2','2','2','2','2','2'), ('3','3','3','3','3','3');
select count(*) from TE_OPERTABLE_LOG;
UPDATE TE_INFO_COMBO_COL SET CONDDESC = '0' WHERE CORPRATE ='1' AND TRANCODE = '1' and ADENAME = '1' AND CONDID = '1' AND ENTRYNAME = '1';
select count(*) from TE_OPERTABLE_LOG;
UPDATE TE_INFO_COMBO_COL SET CONDDESC = '0' WHERE CORPRATE IN ('2','3') AND TRANCODE IN ('2','3') AND ADENAME IN ('2','3') AND CONDID IN ('2','3') AND ENTRYNAME IN ('2','3');
select count(*) from TE_OPERTABLE_LOG;
DELETE FROM TE_INFO_COMBO_COL WHERE CORPRATE = '1' AND TRANCODE = '1' AND ADENAME = '1' AND CONDID = '1' AND ENTRYNAME = '1';
select count(*) from TE_OPERTABLE_LOG;
DELETE FROM TE_INFO_COMBO_COL WHERE CORPRATE IN ('2','3') AND TRANCODE IN ('2','3') AND ADENAME IN ('2','3') AND CONDID IN ('2','3') AND ENTRYNAME IN ('2','3');
select count(*) from TE_OPERTABLE_LOG;

DROP TABLE IF EXISTS TE_OPERTABLE_LOG CASCADE;
DROP TABLE IF EXISTS TE_INFO_COMBO_COL CASCADE;
DROP TRIGGER TE_INFO_COMBO_COL_BEFORE;


?section mantis11962
set schema test_trigger;
drop table if exists t1 cascade;
drop table if exists t1_log cascade;
create table t1(c1 char(10), c2 int);
create table t1_log (c1 char(512), insert_timestamp timestamp);
create or replace trigger t1_trigger
after insert or update or delete on t1
for each row
as//
begin
  insert into t1_log values(ACTION_SQL, current_timestamp);
end;//;
insert into t1 values('hello', 1);
insert into t1 values('world', 2);
select * from t1_log order by c1, insert_timestamp;
insert into t1 values('test1', 3),('test2', 4),('test2', 5);
select * from t1_log order by c1, insert_timestamp;
delete from t1 where c1 = 'test1';
select * from t1_log order by c1, insert_timestamp;
delete from t1 where c1 = 'test2';
select * from t1_log order by c1, insert_timestamp;
update t1 set c1 = 'hh' where c1 = 'hello';
select * from t1_log order by c1, insert_timestamp;
drop table if exists t1 cascade;
drop table if exists t1_log cascade;
drop trigger t1_trigger;

drop table if exists tb_prepared cascade;
drop table if exists tb_prepared_log cascade;
create table if not exists tb_prepared
(
c_int INT,
c_numeric NUMERIC(10,2),
c_decimal DECIMAL(6,2),
c_float FLOAT,
c_date DATE,
c_time TIME,
c_timestamp TIMESTAMP,
c_interval INTERVAL DAY,
c_char_iso CHAR(30) CHARACTER SET ISO88591,
c_varchar_utf8 VARCHAR(30) CHARACTER SET UTF8,
c_varchar2_ucs2 VARCHAR2(30) CHARACTER SET UCS2,
c_char_v_ucs2 CHAR VARYING(30) CHARACTER SET UCS2
);
create table if not exists tb_prepared_log
(
oper_desc VARCHAR(30),
oper_query VARCHAR(512) CHARACTER SET UTF8
);
insert into tb_prepared_log values (NULL,NULL);
create or replace trigger tb_prepared_trig
before insert or update or delete
on tb_prepared
for each statement
as//
begin
  if inserting then
      update tb_prepared_log set oper_desc = 'insert', oper_query = ACTION_SQL ;
  elsif updating then
      update tb_prepared_log set oper_desc = 'update', oper_query = ACTION_SQL ;
  elsif deleting then
      update tb_prepared_log set oper_desc = 'delete', oper_query = ACTION_SQL ;
  else
      null;
  end if;
end;//;
insert into tb_prepared values
(1,6.66,8.88,1.5,
DATE '2019-07-25',
TIME '18:30:00',
TIMESTAMP '2019-07-25 18:00:00.123456',
INTERVAL '1' DAY,
'@','$','&','测试');
select * from tb_prepared_log;
PREPARE up1 FROM UPDATE "TB_PREPARED" SET "C_VARCHAR_UTF8" = ?a, c_varchar2_ucs2 = ?b||c_varchar2_ucs2 WHERE c_int = ?c;
SET PARAM ?a ' ''测试 " " ''';
SET PARAM ?b 'new';
SET PARAM ?c 1;
EXECUTE up1 USING ?a,?b,?c;
SELECT * FROM tb_prepared;
SELECT * FROM tb_prepared_log;
PREPARE de2 FROM DELETE FROM tb_prepared WHERE "C_INT" IN (?,?a);
SET PARAM ?a 3;
EXECUTE de2 USING 2,?a;
SELECT * FROM tb_prepared;
SELECT * FROM tb_prepared_log;
showddl trigger tb_prepared_trig;
drop table if exists tb_prepared cascade;
drop table if exists tb_prepared_log cascade;
drop trigger tb_prepared_trig;
showddl trigger tb_prepared_trig;


?section mantis11962
set schema test_trigger;
drop table if exists test_tb cascade;
drop table if exists test_tb_log cascade;
create table if not exists test_tb
(
c1 int,
c2 char(20),
c3 decimal(10,2),
c4 numeric(10,2)
);
insert into test_tb values (1,'a',1.5,1.5);
insert into test_tb values (2,'a',1.5,1.5),(3,'a',1.5,1.5);--2 row inserted
select * from test_tb order by c1;
create or replace trigger test_tb_trig
after insert or update or delete
on test_tb
for each row
as//
begin
  if inserting then
    insert into test_tb_log values (systimestamp,'inserted one new row');
  elsif updating then
    insert into test_tb_log values (systimestamp,'update one row');
  elsif deleting then
    insert into test_tb_log values (systimestamp,'delete one row');
  else
    null;
end if;
end;//;
update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
select * from test_tb order by c1;
drop table if exists test_tb cascade;
drop table if exists test_tb_log cascade;
drop trigger test_tb_trig;


?section mantis12008
set schema test_trigger;
drop table if exists test_tb cascade;
drop table if exists test_tb_log cascade;

create table if not exists test_tb
(
c1 int,
c2 char(20),
c3 decimal(10,2),
c4 numeric(10,2)
);

insert into test_tb values (1,'a',1.5,1.5);
insert into test_tb values (2,'a',1.5,1.5),(3,'a',1.5,1.5);--2 row inserted
select * from test_tb;

create or replace trigger test_tb_trig
after insert or update or delete
on test_tb
for each row
as//
begin
  if inserting then
    insert into test_tb_log values (systimestamp,'inserted one new row');
  elsif updating then
    insert into test_tb_log values (systimestamp,'update one row');
  elsif deleting then
    insert into test_tb_log values (systimestamp,'delete one row');
  else
    null;
  end if;
end;//;

update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
select * from test_tb;
begin work;
update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
commit;
select * from test_tb;
begin work;
update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
rollback;
select * from test_tb;

create or replace trigger test_tb_trig
before insert or update or delete
on test_tb
for each row
as//
begin
  if inserting then
    insert into test_tb_log values (systimestamp,'inserted one new row');
  elsif updating then
    insert into test_tb_log values (systimestamp,'update one row');
  elsif deleting then
    insert into test_tb_log values (systimestamp,'delete one row');
  else
    null;
  end if;
end;//;
update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
select * from test_tb;
begin work;
  update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
commit;
select * from test_tb;
begin work;
  update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
rollback;
select * from test_tb;

create or replace trigger test_tb_trig
before insert or update or delete
on test_tb
for statement
as//
begin
  if inserting then
    insert into test_tb_log values (systimestamp,'inserted one new row');
  elsif updating then
    insert into test_tb_log values (systimestamp,'update one row');
  elsif deleting then
    insert into test_tb_log values (systimestamp,'delete one row');
  else
    null;
  end if;
end;//;

update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
select * from test_tb;
begin work;
  update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
commit;
select * from test_tb;
begin work;
  update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
rollback;
select * from test_tb;

create or replace trigger test_tb_trig
after insert or update or delete
on test_tb
for statement
as//
begin
  if inserting then
    insert into test_tb_log values (systimestamp,'inserted one new row');
  elsif updating then
    insert into test_tb_log values (systimestamp,'update one row');
  elsif deleting then
    insert into test_tb_log values (systimestamp,'delete one row');
  else
    null;
  end if;
end;//;
update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
select * from test_tb;
begin work;
  update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
commit;
select * from test_tb;
begin work;
  update test_tb set c3 = c3*10 ,c4 = c4*10 where c1 in (2,3);
rollback;
select * from test_tb;

create table if not exists test_tb_log
(
c1 int primary key,
c2 varchar(40)
);
create or replace trigger test_tb_trig
after insert or update or delete
on test_tb
for each row
as//
begin
  if inserting then
    insert into test_tb_log values (new.c1,'inserted one new row');
  elsif updating then
    insert into test_tb_log values (new.c1,'update one row');
  elsif deleting then
    insert into test_tb_log values (old.c1,'delete one row');
  else
    null;
  end if;
end;//;
begin work;
  insert into test_tb values (5,'a',1.5,1.5);
  select * from test_tb;
  insert into test_tb values (5,'a',1.5,1.5);
  select * from test_tb;
commit;

drop table if exists test_tb_log cascade;
drop table test_tb;
drop trigger test_tb_trig;

?section mantis12640
set schema test_trigger;
drop table if exists tb_string_2 cascade;
create table tb_string_2
(
c1 char(60) character set iso88591,
c2 char(60) character set utf8,
c3 char(60) character set ucs2
);

drop table if exists tb_string_2_log cascade;
create table tb_string_2_log
(
del_timestap timestamp(6)
, tab_name varchar(80 chars) character set utf8
, col_val varchar(200) character set utf8
);

create or replace trigger tb_string_2_trig
before insert or update or delete
on tb_string_2
for each row
as//
begin
if inserting then
insert into tb_string_2_log
values
(sysdate,'c1-insert-new',:new.c1),
(sysdate,'c2-insert-new',:new.c2),
(sysdate,'c3-insert-new',:new.c3);
elsif updating then
insert into tb_string_2_log
values
(sysdate,'c1-update-old',:old.c1),
(sysdate,'c2-update-old',:old.c2),
(sysdate,'c3-update-old',:old.c3);
insert into tb_string_2_log
values
(sysdate,'c1-update-new',:new.c1),
(sysdate,'c2-update-new',:new.c2),
(sysdate,'c3-update-new',:new.c3);
elsif deleting then
insert into tb_string_2_log
values
(sysdate,'c1-delete-old',:old.c1),
(sysdate,'c2-delete-old',:old.c2),
(sysdate,'c3-delete-old',:old.c3);
else
null;
end if;
end;//;

insert into tb_string_2 values
(
' ',
' ',
' ');
select * from tb_string_2;
select * from tb_string_2_log;
select tab_name, length(tab_name), length(col_val) from tb_string_2_log order by tab_name;

update tb_string_2 set c1 = ' ',c2 = ' ',c3 =' ';
select * from tb_string_2;
select * from tb_string_2_log;
select tab_name, length(tab_name), length(col_val) from tb_string_2_log order by tab_name;

delete from tb_string_2;
select * from tb_string_2;
select * from tb_string_2_log;
select tab_name, length(tab_name), length(col_val) from tb_string_2_log order by tab_name;

delete from tb_string_2_log;

create or replace trigger tb_string_2_trig
before insert or update or delete
on tb_string_2
for each row
as//
begin
if inserting then
insert into tb_string_2_log
values
(sysdate,'c1-insert-new',:new.c1),
(sysdate,'c2-insert-new',:new.c2),
(sysdate,'c3-insert-new',:new.c3);
elsif updating then
insert into tb_string_2_log
values
(sysdate,'c1-update-old',:old.c1),
(sysdate,'c2-update-old',:old.c2),
(sysdate,'c3-update-old',:old.c3);
insert into tb_string_2_log
values
(sysdate,'c1-update-new',:new.c1),
(sysdate,'c2-update-new',:new.c2),
(sysdate,'c3-update-new',:new.c3);
elsif deleting then
insert into tb_string_2_log
values
(sysdate,'c1-delete-old',:old.c1),
(sysdate,'c2-delete-old',:old.c2),
(sysdate,'c3-delete-old',:old.c3);
else
null;
end if;
end;//;
insert into tb_string_2 values
(
' ',
' ',
' ');
select * from tb_string_2;
select * from tb_string_2_log;
select tab_name, length(tab_name), length(col_val) from tb_string_2_log order by tab_name;

update tb_string_2 set c1 = ' ',c2 = ' ',c3 =' ';
select * from tb_string_2;
select * from tb_string_2_log;
select tab_name, length(tab_name), length(col_val) from tb_string_2_log order by tab_name;

delete from tb_string_2;
select * from tb_string_2;
select * from tb_string_2_log;
select tab_name, length(tab_name), length(col_val) from tb_string_2_log order by tab_name;

drop table if exists tb_string_2 cascade;
drop table if exists tb_string_2_log cascade;


?section mantis13027
set schema test_trigger;
drop table if exists t1;
create table t1(c1 int);
create or replace trigger t1_trig_after
after insert or update or delete
on t1
as//
begin
  null;
end;//;
showddl trigger t1_trig_after;

create or replace trigger t1_trig_after
before insert or update or delete
on t1
as//
begin
  null;
end;//;
showddl trigger t1_trig_after;
drop table if exists t1;
drop trigger t1_trig_after;

?section mantis11754
create schema test_drop;
set schema test_drop;
create table t1(c1 int);
create table t2(c1 int);
create or replace trigger t1_tr
before insert on t1
for each row
as//
begin
insert into t2 values(1);
end;//;
set schema test_trigger;
drop schema test_drop cascade;

?section mantis10788
set schema test_trigger;
drop table if exists tb_interval_expression;
create table if not exists tb_interval_expression
(
c_interval_yeartomonth interval year to month,
c_interval_daytohour interval day to hour,
c_interval_daytominute interval day to minute,
c_interval_daytosecond interval day to second,
c_interval_minutetosecond interval minute to second
);

drop table if exists tb_interval_expression_log;
create table tb_interval_expression_log
(
alter_time timestamp,
alter_desc varchar(40),
old_val varchar(40) ,
new_val varchar(40)
);

create or replace trigger tb_interval_expression_trig
before insert or update or delete
on tb_interval_expression
for each row
as//
begin
if inserting then
insert into tb_interval_expression_log values
(systimestamp,'insert',null,cast(:new.c_interval_yeartomonth as varchar(40)) ),
(systimestamp,'insert',null,cast(:new.c_interval_daytohour as varchar(40)) ),
(systimestamp,'insert',null,cast(:new.c_interval_daytominute as varchar(40)) ),
(systimestamp,'insert',null,cast(:new.c_interval_daytosecond as varchar(40)) ),
(systimestamp,'insert',null,cast(:new.c_interval_minutetosecond as varchar(40)) )
;
elsif updating then
insert into tb_interval_expression_log values
(systimestamp,'update',cast(:old.c_interval_yeartomonth as varchar(40)),cast(:new.c_interval_yeartomonth as varchar(40)) ),
(systimestamp,'update',cast(:old.c_interval_daytohour as varchar(40)) ,cast(:new.c_interval_daytohour as varchar(40)) ),
(systimestamp,'update',cast(:old.c_interval_daytominute as varchar(40)),cast(:new.c_interval_daytominute as varchar(40)) ),
(systimestamp,'update',cast(:old.c_interval_daytosecond as varchar(40)) ,cast(:new.c_interval_daytosecond as varchar(40)) ),
(systimestamp,'update',cast(:old.c_interval_minutetosecond as varchar(40)),cast(:new.c_interval_minutetosecond as varchar(40)) )
;
elsif deleting then
insert into tb_interval_expression_log values
(systimestamp,'delete',cast(:old.c_interval_yeartomonth as varchar(40)),null ),
(systimestamp,'delete',cast(:old.c_interval_daytohour as varchar(40)) ,null ),
(systimestamp,'delete',cast(:old.c_interval_daytominute as varchar(40)),null ),
(systimestamp,'delete',cast(:old.c_interval_daytosecond as varchar(40)) ,null ),
(systimestamp,'delete',cast(:old.c_interval_minutetosecond as varchar(40)),null )
;
else
null;
end if;
end;//;

insert into tb_interval_expression values
(
interval '2-11' year to month,
interval '2 15' day to hour,
interval '2 15:59' day to minute,
interval '2 15:59:59' day to second,
interval '2:59' minute to second
);
insert into tb_interval_expression values
(
interval '2-1' year to month,
interval '2 5' day to hour,
interval '2 5:59' day to minute,
interval '2 5:59:59' day to second,
interval '2:09' minute to second
);
update tb_interval_expression set c_interval_yeartomonth = interval '5-9' year to month where c_interval_yeartomonth = interval '2-11' year to month;
drop table if exists tb_interval_expression;
drop table if exists tb_interval_expression_log;


?section mantis12295
set schema test_trigger;
drop table if exists tb_tinyint cascade;
drop table if exists tb_tinyint_1 cascade;
create table if not exists tb_tinyint
(
id                     int,
insert_timestamp       timestamp,
c_tinyint              tinyint,
c_tinyint_s            tinyint signed,
c_tinyint_us           tinyint unsigned
);
create table if not exists tb_tinyint_1 like tb_tinyint;
create or replace trigger trig_tinyint_be_insert
before insert
on tb_tinyint
for each row
as//
begin
  insert into tb_tinyint_1 values (:new.id, :new.insert_timestamp, :new.c_tinyint,
  :new.c_tinyint_s, :new.c_tinyint_us);
end;//;
select * from tb_tinyint_1;
insert into tb_tinyint
values
(
4,
current_timestamp,
+88,
-88,
88
);
select * from tb_tinyint_1;

insert into tb_tinyint
values
(
5,
current_timestamp,
+127,
+126,
254
);
select * from tb_tinyint_1 where id = 5;

insert into tb_tinyint
values
(
6,
current_timestamp,
+126,
+127,
254
);
select * from tb_tinyint_1 where id = 6;

insert into tb_tinyint
values
(
7,
current_timestamp,
+126,
+126,
255
);
select * from tb_tinyint_1 where id = 7;

insert into tb_tinyint
values
(
8,
current_timestamp,
-128,
-127,
1
);
select * from tb_tinyint_1 where id = 8;

insert into tb_tinyint
values
(
9,
current_timestamp,
-127,
-128,
1
);
select * from tb_tinyint_1 where id = 9;

insert into tb_tinyint
values
(
10,
current_timestamp,
-128,
-128,
0
);
select * from tb_tinyint_1 where id = 10;

drop table if exists tb_before_delete cascade;
create table if not exists tb_before_delete
(
c_tinyint     tinyint ,
c_dec         decimal(10,3),
c_char        char(60) character set iso88591
);
drop table if exists tb_before_delete_log cascade;
create table if not exists tb_before_delete_log
(
del_timestap timestamp,
tab_name     varchar(80) character set utf8,
comm         varchar(200) character set ucs2
);

create or replace trigger test_trig_before_delete
before delete
on tb_before_delete
for each row
as//
begin
  if :old.c_char is not null and length(trim(:old.c_char)) <> 0 then
      insert into tb_before_delete_log
      values (sysdate,'tb_before_deleted','deleted row whose c_char is '||old.c_char);
  else
      dbms_output.put_line('deleted rows whose c_char is null or empty string!');
  end if;
end;//;
insert into tb_before_delete
values
(
10,
1234,
null
);
delete from tb_before_delete;

drop trigger trig_tinyint_be_insert;
drop table if exists tb_tinyint cascade;
drop table if exists tb_tinyint_1 cascade;
drop table if exists tb_before_delete cascade;
drop table if exists tb_before_delete_log cascade;


?section mantis13674
set schema test_trigger;
drop table if exists t1;
create table t1 (a int, b varchar(10), primary key (a));
insert into t1 values (1, 'a');

create or replace trigger tr1
after update or insert or delete on t1 for each row as //
begin
  insert into not_exist_table values (1);
end//;

select * from t1;
update t1 set b='A' where a=1;
select * from t1;
insert into t1 values(2, 'b');
select * from t1;
delete from t1 where a=1;
select * from t1;
drop table if exists t1;

?section mantis13396
set schema test_trigger;
drop table if exists t1 cascade;
drop table if exists t1_log cascade;
create table t1(id int, process int, uname varchar(10));
create table t1_log(id int);
create or replace trigger t1_trig
before insert or update
on t1
for each row
as //
begin
insert into t1_log values(new.id);
end;//;

insert into t1 values(1,3,'ab');
select * from t1_log;

alter table t1 drop uname;
select * from t1_log;
alter table t1 add column passwd;
alter table t1 add column passwd varchar(20);
select * from t1;
select * from t1_log;
alter table t1 drop passwd;
alter table t1 rename to t1_1;
select * from t1_log;
drop table if exists t1 cascade;
drop table if exists t1_log cascade;
create table t1 (a int, b varchar(10));
insert into t1 values (1, 'a'),(2, 'bc');
create table t1_log(id int);
create or replace trigger tr1
after update or insert or delete on t1 for each row as //
begin
  insert into t1_log values (1);
end//;
insert into t1 values (3, 'de');
select count(*) from t1_log;
alter table t1 add primary key (a);
select count(*) from t1_log;
drop table if exists t1 cascade;
drop table if exists t1_log cascade;


?section mantis15865
set schema test_trigger;
drop table tb_u_c_p cascade;
drop table tb_u_c_p_log cascade;
create table tb_u_c_p (c1 int, c2 int , c3 int );
create table tb_u_c_p_log (c1 int primary key , c2 int check (c2 <> 0), c3 int unique );
drop sequence my_seq;
create sequence my_seq;

create or replace trigger trig_u_c_p
after insert or update or delete
on tb_u_c_p
for each statement
as//
begin
if inserting then
 insert into tb_u_c_p_log values (seqnum(my_seq,next),1,1);
elseif updating then
 update tb_u_c_p_log set c3 = 1;
elseif deleting then
 delete from tb_u_c_p_log;
end if;
end;//;
cqd traf_savepoints 'off';
begin work;
insert into tb_u_c_p values (1,1,1);
insert into tb_u_c_p values (2,2,2);--unique 8102
select * from tb_u_c_p;
select * from tb_u_c_p_log;
drop table tb_u_c_p cascade;
drop table tb_u_c_p_log cascade;
drop sequence my_seq;


?section clean
set schema test_trigger;
drop table if exists t1_int cascade;
drop table if exists t2_int cascade;
drop trigger t1_trigger;
drop table if exists t3 cascade;
drop table if exists t4 cascade;
drop trigger t3_trigger;
drop table if exists t5 cascade;
drop table if exists t5_1 cascade;
drop trigger t5_trigger_1;
drop trigger t5_trigger_2;
drop table if exists t6 cascade;
drop table if exists t6_1 cascade;
drop trigger t6_trigger;
drop table if exists t7 cascade;
drop table if exists t7_1 cascade;
drop trigger t7_trigger;
drop table if exists t_dec cascade;
drop table if exists t_dec_1 cascade;
drop trigger t_dec_trigger;
drop table if exists tb_after_insert cascade;
drop table if exists tb_after_insert_log cascade;
drop trigger test_trig_after_insert;
drop table if exists t_arsm_dataprocsql cascade;
drop table if exists tp_cip_cache cascade;
drop trigger t_arsm_dataprocsql_trig;
drop table if exists t1_drop cascade;
drop table if exists t1_drop_log cascade;
drop trigger t1_drop_trigger;

drop trigger test1_drop_trigger;
drop table if exists test1_drop cascade;
drop table if exists test1_drop_log cascade;

drop trigger test1_insert_trigger;
drop table if exists test1_insert cascade;
drop table if exists test1_insert_log cascade;
drop table if exists test1_insert_bak cascade;

drop table if exists test1_statement cascade;
drop table if exists test1_statement_log cascade;
drop trigger test1_statement_trigger;
drop table if exists test2_statement cascade;
drop table if exists test2_statement_log cascade;
drop trigger test2_statement_trigger;
drop table if exists test3_statement cascade;
drop table if exists test3_statement_log cascade;
drop trigger test2_statement_trigger;

drop table if exists test_tb cascade;
drop table if exists test_log cascade;
drop trigger test_trig;

drop table if exists tp_cip_systemadm cascade;
drop table if exists tp_cip_cache cascade;
drop table if exists te_info_cache cascade;
drop trigger tp_cip_systemadm_trig;

drop table if exists tb_interval_2 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_2;
drop table if exists tb_interval_3 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_3;
drop table if exists tb_interval_4 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_4;
drop table if exists tb_interval_5 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_5;
drop table if exists tb_interval_1 cascade;
drop table if exists tb_interval_log cascade;
drop trigger test_interval_trig_1;

drop table if exists tb_int cascade;
drop table if exists tb_int_1 cascade;
drop trigger trig_int_be_insert;

drop table if exists tb_time cascade;
drop table if exists tb_time_log cascade;
drop trigger test_time_trig;
drop table if exists tb_timestamp cascade;
drop table if exists tb_timestamp_log cascade;
drop trigger test_timestamp_trig;
drop table if exists test_tb cascade;
drop table if exists test_tb_log cascade;
drop trigger test_tb_trig;

drop table if exists test_tb3_1 cascade;
drop table if exists test_tb3_1_log cascade;
drop trigger test_tb3_1_trigger;
drop table if exists test_tb3_2 cascade;
drop table if exists test_tb3_2_log cascade;
drop trigger test_tb3_2_trigger;
drop table if exists tb_numeric cascade;
drop table if exists tb_numeric_1 cascade;
drop trigger trig_numeric_be_insert;

drop table if exists test_tb cascade;
drop table if exists test_tb_log cascade;
drop trigger test_tb_trig;

drop table if exists test_py cascade;
drop table if exists test_log cascade;
drop table if exists test_py_log cascade;
drop trigger test_trig;

set schema seabase;
drop schema test_trigger cleanup cascade;
set schema test_ordinary_trigger;
drop table if exists t1;
drop table if exists t2;
drop trigger t1_trigger;
set schema seabase;
drop schema test_ordinary_trigger cleanup cascade;
--drop user sql_user1;
