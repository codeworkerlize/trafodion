-------------------------------------------------------------------------
-- Replica tests. This is replication within the same cluster and not xDC.
-- This test also does not include REGION_REPLICATION HBase option.
-- Simple test case to set up a table with replicas,
-- do simple inserts, updates, deletes, merges.
-------------------------------------------------------------------------
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@

obey TEST077(clean_up);
log LOG077 clear;
obey TEST077(setup);
obey TEST077(tests);
--obey TEST077(clean_up);
log;
exit;

?section clean_up
drop schema replica cascade;

?section setup
create schema replica;
set schema replica;

create table rt1 (a int not null default 5 primary key) replicate 2 ways ;
create table rt2 (a int not null primary key) salt using 2 partitions  replicate 3 ways ; 
create table rt3 (a int not null primary key, b char(3) not null) replicate 2 ways ;
create index ix3_1 on rt3(b) ;
create table rt4 (a int not null primary key, b char(3) not null) salt using 2 partitions replicate 2 ways ;
create index ix4_1 on rt4(b) ;
create index ix4_2 on rt4(b) salt like table ;
create table rt5(store_id integer not null,
                  item_id  integer not null,
                  sale_date date default date '2000-01-01' not null,
                  sale_amt numeric(10,2))
                  store by (store_id,  sale_date)
division by (date_part('YEARMONTH', sale_date))
replicate 3 ways;
create unique index ix5_1 on rt5(item_id) ;

create table updsys(id int not null, name varchar(10) not null, schid int not null) store by (id) replicate 2 ways;
create unique index updsys_idx1 on updsys(schid);



set param ?sch 'REPLICA';
set param ?pat '%RT%';

prepare smdquery from
select cast(substring(objects.object_name, 1,15) as char(15 bytes) character set utf8)  as table_name,
       objects.object_type as typ,
       cast(cols.column_number as smallint) colnum,
       cast(substring(cols.column_name,1,20) as char(20 bytes) character set utf8) as column_name,
       keys.ordering as ord,
       cast(column_size as smallint) colsiz,
       column_class colclass, default_class defclass,
       coalesce(cast(keys.keyseq_number as char(4)),'none') as ckey_col,
       coalesce(substring(text.text,1,60),'none') comp_expression
from "_MD_".OBJECTS objects
     join "_MD_".COLUMNS cols
       on objects.object_uid = cols.object_uid
     left outer join "_MD_".keys keys
       on objects.object_uid = keys.object_uid and
          cols.column_number = keys.column_number
     left outer join "_MD_".TEXT text
       on objects.object_uid = text.text_uid and
          text.text_type = 4 and
          text.sub_id = cols.column_number
where objects.schema_name = ?sch and
      objects.object_name like ?pat and
      objects.object_type in ('BT', 'VI')
order by 1, 2, 3
;

execute smdquery;

set param ?STM 'S';

prepare skeyquery from
select OPERATOR,
       TNAME,
       cast(substring(description from begin_key_pos for begin_key_len) as char(600)) bkey,
       cast(substring(description from end_key_pos for end_key_len) as char(600)) ekey
from
  (select operator,
          tname,
          description,
          begin_key_pos,
          end_key_pos-begin_key_pos-1 as begin_key_len,
          end_key_pos,
          case when end_key_len_or_0 = 0 then char_length(description) + 1 - end_key_pos
                                         else end_key_len_or_0 + 10 end end_key_len
   from
     (select operator,
             tname,
             cast(description as varchar(3000) character set iso88591) as description,
             position(' begin_key: ' IN description) + 1 as begin_key_pos,
             position(' end_key: '   IN description) + 1 as end_key_pos,
             position(': ' IN substring(description from position(' end_key: '   IN description) + 10)) end_key_len_or_0
      from table(explain(null,?STM))
      where TNAME like '%RT%') X) Y;

?section tests

set schema replica;

showddl rt1 ;
showddl rt2 ;
showddl rt3 ;
showddl rt4 ;
showddl rt5 ;

invoke rt3 ;

get region statistics for table rt1 ;
get region statistics for table rt2 ;
get region statistics for table rt3 ;
get region statistics for table rt4 ;
get region statistics for table rt5 ;

get region statistics for index ix3_1 ;
get region statistics for index ix4_1 ;
get region statistics for index ix4_2 ;
get region statistics for index ix5_1 ;

insert into rt1 values (1) ;
upsert using load into rt2 values (100),(101),(102),(103),(104),(105) ;
insert into rt3 values (11,'aaa') ;
upsert into rt4 values (12, 'bbb') ;
upsert into rt5 select a+10, a, date '2001-01-01', 8.2 from rt2 ;

select * from rt1 ;
select "_REPLICA_", "_SALT_", * from rt2 ;
select * from rt3 ;
select * from rt4, rt5 ;

set parserflags 1 ;

select * from table(index_table ix3_1) ;
select * from table(index_table ix4_1) ;
select * from table(index_table ix4_2) ;
select * from table(index_table ix5_1) ;
 

truncate rt1 ;
select * from rt1 ;

delete from rt2 where a < 102;
select * from rt2 ;

update rt5 set sale_amt = sale_amt + 1 ;
select * from rt5 ;

update rt3 set a = 101 where a = 11 ;
select * from rt3 ;
select * from table(index_table ix3_1) ;

insert into updsys values(1, 'abcd', 100);
update updsys set (id, name, schid)=(2,'abc',200);
select * from updsys where syskey = (select syskey from table(index_table updsys_idx1) where "_REPLICA_@" = 0);
select * from updsys where syskey = (select syskey from table(index_table updsys_idx1) where "_REPLICA_@" = 1);

set parserflags 0;
