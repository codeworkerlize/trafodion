-- Test: TEST049 (CompGeneral)
-- Functionality: Running queries in a tenant
--                Simulating tenants in OSIM
--
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@

obey TEST049(clnup);
log LOG049 clear;
-- create a tenant
obey TEST049(create_tenant);
-- log on under the tenant and create a table
log;
sh sqlci -i "TEST049(create_table)" -u sql_user1 -t osim_tenant;
log LOG049;
-- explain and run the query as the tenant
log;
sh sqlci -i "TEST049(run_query)" -u sql_user1 -t osim_tenant;
log LOG049;
-- all nodes -1 (we can use all nodes and AS is off)
-- create an osim, running as the tenant
log;
sh sqlci -i "TEST049(create_osim)" -u sql_user1 -t osim_tenant;

log LOG049;
-- back as the db__root user, prepare the query without a tenant and without osim
-- default, AS is -2 (off)
obey TEST049(run_query);
-- all nodes -1
cqd AS_AFFINITY_VALUE '-4';
obey TEST049(run_query);
-- nodes 0, 1, 0, 1
cqd AS_AFFINITY_VALUE '5';
obey TEST049(run_query);
-- nodes 1, 0, 1, 0
cqd AS_AFFINITY_VALUE reset;

-- still as the db__root user, load the osim and explain the query
log;
sh sqlci -i "TEST049(load_osim)";
sh sqlci -i "TEST049(replay_osim)";
log LOG049;
-- all nodes -1 (we can use all nodes and AS is off)

-- now manipulate the OSIM to fake a bigger cluster and simulate
-- different kinds of tenants
sh cp -f $$scriptsdir$$/compGeneral/TEST049_fake_NAClusterInfo.txt t049_tenant_osim/NAClusterInfo.txt;
-- tenant of size 6 on a 12 node cluster, odd nodes
sh echo 'OSIM_TENANT' >t049_tenant_osim/TENANT.txt;
sh echo 'A|6|12|15' >>t049_tenant_osim/TENANT.txt;
log;
sh sqlci -i "TEST049(replay_osim)";
log LOG049;
-- nodes 1, 3, 5, 8 (node 7 doesn't exist)

-- tenant of size 6 on a 12 node cluster, even nodes
sh echo 'OSIM_TENANT' >t049_tenant_osim/TENANT.txt;
sh echo 'A|6|12|4' >>t049_tenant_osim/TENANT.txt;
log;
sh sqlci -i "TEST049(replay_osim)";
log LOG049;
-- nodes 0, 2, 4, 6

-- tenant of size 4 on 8 nodes of a 12 node cluster, even nodes
sh echo 'OSIM_TENANT' >t049_tenant_osim/TENANT.txt;
sh echo 'A|4|8|6' >>t049_tenant_osim/TENANT.txt;
-- get a real affinity 6, not affinity 0, based on the master executor,
-- as is the default
log;
sh sqlci -i "TEST049(replay_osim_affinity_6)";
log LOG049;
-- expect to run on nodes 6, 0, 2, 4, using only lower 8 nodes

-- tenant of size 4, one unit on node 3 the other three on node 8
sh echo 'OSIM_TENANT' >t049_tenant_osim/TENANT.txt;
sh echo 'L|4|2|3*1|8*3' >>t049_tenant_osim/TENANT.txt;
-- get a real affinity 6, not affinity 0, based on the master executor,
-- as is the default
log;
sh sqlci -i "TEST049(replay_osim)";
log LOG049;
-- -1(4 times), nodes are assigned at runtime

log;
obey TEST049(clnup);
exit;

?section clnup

drop table t049_osim_tenant_sch.t049_osim;
drop schema t049_osim_tenant_sch;
drop tenant osim_tenant;

?section create_tenant

-- run without a tenant
cqd TENANT_OVERSUBSCRIBE_WARN_NODE_RATIO '1e6';
cqd TENANT_OVERSUBSCRIBE_ERR_NODE_RATIO  '1e6';

create tenant osim_tenant admin role t_admin, tenant size 6, cluster size 2, affinity 3;

?section create_table
log LOG049;
-- run under the tenant
create schema t049_osim_tenant_sch;
set schema t049_osim_tenant_sch;
create table t049_osim(a int not null primary key, b int) salt using 4 partitions;
insert into t049_osim values (1,1), (2,2), (3,3);

?section create_osim

log LOG049;
set schema t049_osim_tenant_sch;
sh rm -rf t049_tenant_osim;
control osim capture location 't049_tenant_osim';
prepare s from select distinct b from t049_osim <<+ cardinality 1e9>>;
explain options 'f' s;
control osim capture stop;

?section load_osim

log LOG049;
set schema t049_osim_tenant_sch;
control osim load from './t049_tenant_osim';

?section replay_osim

log LOG049;
control osim simulate continue './t049_tenant_osim';
set schema t049_osim_tenant_sch;
prepare s from select distinct b from t049_osim <<+ cardinality 1e9>>;

select cast(substring(description,
                      position('_node_map: ' in description) - 5,
                      position(' statement: ' in description) -
                      (position('_node_map: ' in description) - 5)) as char(80) character set iso88591)
from table(explain(null,'S'))
where operator = 'ROOT';

?section replay_osim_affinity_6

log LOG049;
cqd AS_AFFINITY_VALUE '6';
log;
obey TEST049(replay_osim);
cqd AS_AFFINITY_VALUE reset;

?section run_query
log LOG049;
set schema t049_osim_tenant_sch;
prepare s from select distinct b from t049_osim <<+ cardinality 1e9>>;
explain options 'f' s;
select cast(substring(description,
                      position('_node_map: ' in description) - 5,
                      position(' statement: ' in description) -
                      (position('_node_map: ' in description) - 5)) as char(80) character set iso88591)
from table(explain(null,'S'))
where operator = 'ROOT';
execute s;
