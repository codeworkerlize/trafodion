-- ============================================================================
-- TEST121 - tests tenant authorization IDs
--
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- Tests the following commands:
--    register/unregister tenant
--    get tenants, showddl tenant
--    create admin role
--    grant role to tenant
-- ============================================================================

cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd TRAF_AUTO_REGISTER_GROUP 'ON';
-- turn oversubscription warnings off, since they
-- depend on the hardware and on other tenants
cqd TENANT_OVERSUBSCRIBE_WARN_NODE_RATIO '1e6';
cqd TENANT_OVERSUBSCRIBE_ERR_NODE_RATIO  '1e6';

obey TEST121(clean_up);
log LOG121 clear;
obey TEST121(set_up);
sh sqlci -i "TEST121(setup_tenants)" -u sql_user10;
obey TEST121(basic_tests);
obey TEST121(schema_tests);
obey TEST121(option_tests);
log;
obey TEST121(clean_up);
exit;

?section clean_up
drop schema tenant2_sch cascade;
revoke role tenant2_admin from sql_user1;
revoke role tenant2_admin from sql_user4;
revoke role tenant2_admin from sql_user5;
drop role tenant2_admin;
unregister tenant tenant2;

drop schema tenant1_sch1 cascade;
drop schema tenant1_sch2 cascade;
revoke role tenant1_role1 from sql_user2;
revoke role tenant1_role2 from sql_user3;
unregister user sentry_user1;
unregister user sentry_user2;

drop role tenant1_role1;
drop role tenant1_role2;
revoke role tenant1_admin from sql_user1;
drop role tenant1_admin;
unregister tenant tenant1;

revoke select on schema trafodion.sch from tenant4_admin;
unregister tenant tenant4;
drop schema tenant4_sch1;
drop schema tenant4_sch2;
drop schema tenant4_sch3;

unregister tenant tenant5;
unregister tenant tenant6;

drop schema tenant_sch;
get users;
get roles;
get tenants;

revoke component privilege manage_tenants, manage_roles, manage_users on sql_operations from sql_user10;
revoke component privilege manage_roles, manage_users on sql_operations from sql_user1;

?section set_up
grant component privilege manage_tenants, manage_roles, manage_users on sql_operations to sql_user10;
grant component privilege manage_roles, manage_users on sql_operations to sql_user1;
prepare tenants from 
  select distinct 
         cast(trim(a.auth_db_name) as char(15) character set iso88591) as tenant_name,
         case
           when (admin_role_id = 0) then '0'
           else (select cast(trim(auth_db_name) as char(15) character set iso88591) from "_MD_".auths where admin_role_id = auth_id)
         end as admin_role,
         case
           when (u.usage_uid is null) then '?'
           else (select cast(trim(schema_name) as char(15) character set iso88591) from "_MD_".objects where object_uid = u.usage_uid)
         end as schema_usage,
         case
           when (default_schema_uid = usage_uid) then '*'
           else ' '
         end as defsch
   from "_TENANT_MD_".tenants t left join "_TENANT_MD_".tenant_usage u on t.tenant_id = u.tenant_id 
        ,"_MD_".auths a
        , "_MD_".objects o
   where a.auth_id = t.tenant_id
     and a.auth_id <> 1500000
   order by 1, 3, 2 
;
get namespaces, match 'TRAF_1500%';

?section setup_tenants
log LOG121;
cqd TENANT_OVERSUBSCRIBE_WARN_NODE_RATIO '1e6';
cqd TENANT_OVERSUBSCRIBE_ERR_NODE_RATIO  '1e6';
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

register tenant tenant1 admin role tenant1_admin;
grant role tenant1_admin to sql_user1;

register tenant tenant2 admin role tenant2_admin;;
grant role tenant2_admin to sql_user4;
grant role tenant2_admin to sql_user5;

-- a user can administrate multiple tenants
grant role tenant2_admin to sql_user1;

-- fails, a tenant cannot be associated with more than on admin role
create admin role tenant1_admin1 for tenant1;

showddl tenant tenant1;
showddl tenant tenant2;
showddl role tenant1_admin;
showddl role tenant2_admin;

?section basic_tests
-- =================================================================
-- sql_user10 is the security adminstrator
-- tenant1:
--   sql_user1 is tenant administrator for tenant1
--   sql_user2 & sentry_user1 are users for tenant1
--   tenant1_sch1 and  tenant1_sch2 are their schemas
--   roles for tenant1 include tenant1_role1, tenant1_role2
-- tenant2:
--   sql_user4 & sql_user4 are tenant administrators for tenant2
--   sql_user6, tenant2_user1, and tenant2_user2 are tenant2 users
--   tenant2_sch1 (private) is the schema for tenant2
--   roles include tenant2_role1, tenant2_role2, and tenant2_role3
-- =================================================================
select substring (a1.auth_db_name,1,20) as role_name, 
       substring (a2.auth_db_name,1,20) as role_creator, 
       a1.flags 
from "_MD_".auths a1, "_MD_".auths a2 
where a1.auth_db_name in ('TENANT1_ADMIN', 'TENANT2_ADMIN')
 and a1.auth_creator = a2.auth_id;

create admin role tenant1_role1 for tenant1;

get roles for user sql_user1;
sh sqlci -i "TEST121(user1)" -u sql_user1 -t tenant1;
sh sqlci -i "TEST121(tenant1)" -u sql_user1 -t tenant1;
get users;
get roles;
get tenants;


-- try to run as tenant1
alter tenant tenant1 add schemas (tenant1_sch1);
sh sqlci -i "TEST121(user2)" -u sql_user2 -t tenant1;

?section user1
log LOG121;
values (current_user);
values (current_tenant);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
create role tenant1_role1;
create role tenant1_role2;
grant role tenant1_role1 to sql_user2;
register user sentry_user1;
grant role tenant1_role1 to sql_user2;
register user sentry_user2;
grant role tenant1_role2 to sql_user3;


?section tenant1
log LOG121;
values(current_tenant);
select current_tenant from dual where current_tenant='TENANT1';

?section user2
log LOG121;
set schema tenant1_sch1;
values (current_user);
-- prepare a statement that uses both ESPs and UDR servers
-- enable this later, right now we get a privilege error
-- prepare s from
-- select [last 0] 1 from udf(event_log_reader());
-- execute s;
values (10);
-- list the tasks associated with this tenant's CPU cgroup
sh cat $$ESGYN_CGP_CPU$$/TENANT1/tasks >t121_cpu_tasks.log;
-- don't list the actual pids of tasks, just whether it's a non-zero number
-- Expect empty output. If this displays "0" that means a test failure!
log;
sh cat t121_cpu_tasks.log | wc -l | grep "^0$" >>LOG121;


?section schema_tests

-- tenant with no associated schema
register tenant tenant4 admin role tenant4_admin;
showddl tenant tenant4;
execute tenants;

-- add schema and make it the default
-- first alter fails because schema tenant4_sch2 has not been created
alter tenant tenant4 default schema tenant4_sch2;
alter tenant tenant4 add schemas (tenant4_sch2);
alter tenant tenant4 default schema tenant4_sch2;
showddl tenant tenant4;
execute tenants;
get namespaces, match 'TRAF_1500%';

-- add multiple schemas and change the default
alter tenant tenant4 add schemas (tenant4_sch1, tenant4_sch3 default);
showddl tenant tenant4;
execute tenants;

-- set the default schema to an existing usage
alter tenant tenant4 default schema tenant4_sch1;
showddl tenant tenant4;
execute tenants;

-- drop a schema usage that is not the default
alter tenant tenant4 drop schemas (tenant4_sch2);
showddl tenant tenant4;
execute tenants;

-- drop a schema that is the default
alter tenant tenant4 drop schemas (tenant4_sch1);
showddl tenant tenant4;
execute tenants;

-- drop all schemas
alter tenant tenant4 drop schemas (tenant4_sch3);
showddl tenant tenant4;
execute tenants;
-- register a tenant with a schema list without default schema

unregister tenant tenant4;
get namespaces, match 'TRAF_1500%';
register tenant tenant4 admin role tenant4_admin, 
                        schema tenant4_sch1,
                               tenant4_sch2,
                               tenant4_sch3;
showddl tenant tenant4;
execute tenants;
get schemas, match 'TENANT%';
get namespaces, match 'TRAF_1500%';

-- register a tenant with a schema list assign default schema
unregister tenant tenant4;
get namespaces, match 'TRAF_1500%';
get schemas, match 'TENANT%';
register tenant tenant4 tenant size 2,
                        admin role tenant4_admin,
                        schema tenant4_sch1, 
                               tenant4_sch2 default,
                               tenant4_sch3;
showddl tenant tenant4;
execute tenants;
get namespaces, match 'TRAF_1500%';

-- drop a single schema
alter tenant tenant4 drop schemas (tenant4_sch3);
showddl tenant tenant4;
execute tenants;

-- errors
-- specify the same schema twice (error 3103)
register tenant tenant5 admin role tenant5_admin, schema tenant5_sch1, tenant5_sch2, tenant5_sch1;
alter tenant tenant4 add schemas (tenant4_sch3, tenant4_sch3);
alter tenant tenant4 drop schemas (tenant4_sch1, tenant4_sch1);
-- number of nodes exceeds that of the cluster (7030)
register tenant tenant5 admin role tenant5_admin, cluster size 4, tenant size 5, affinity 2;
alter tenant tenant4 cluster size 7;

-- drop a non-existent schema (error 1003)
alter tenant tenant4 drop schemas (tenant4_nonexistent1,
                                 tenant4_nonexistent2,
                                 tenant4_sch1);

-- make two schemas the default (error 3103)
register tenant tenant5 admin role tenant5_admin, 
                        schema tenant4_sch1 default, 
                               tenant4_sch2 default;
alter tenant tenant4 add schemas (tenant4_sch1, 
                                tenant4_sch2 default, 
                                tenant4_sch3 default);

-- can't alter admin role (error 3001)
alter tenant tenant4 admin role tenant4_admin;

-- set default schema to an invalid schema
alter tenant tenant4 default schema trafodion.sch;
grant select on schema trafodion.sch to tenant4_admin;
alter tenant tenant4 default schema trafodion.sch;
showddl tenant tenant4;
revoke select on schema trafodion.sch from tenant4_admin;

unregister tenant tenant4;

?section option_tests

-- tenant with all options set
create schema tenant_sch;
register tenant tenant4 admin role tenant4_admin, affinity 10, tenant size 10, cluster size 1, default schema tenant_sch;
showddl tenant tenant4;
execute tenants;

-- alter options
alter tenant tenant4 affinity 10, cluster size 1, tenant size 20;
showddl tenant tenant4;
execute tenants;
drop schema tenant_sch;
alter tenant tenant4 affinity 1234567890;
showddl tenant tenant4;

-- test oversubscription warnings and errors
cqd TENANT_OVERSUBSCRIBE_ERR_NODE_RATIO  '1e6';
cqd TENANT_OVERSUBSCRIBE_WARN_NODE_RATIO '1.1';
-- oversubscribed 10%
-- resource groups DB__RGROUP_DEFAULT includes all of nodes
-- tenant esgynDB has already used 1 node
register tenant tenant5 admin role tenant5_admin, tenant size 100, resource groups(DB__RGROUP_DEFAULT);
-- expect an oversubscription warning
showddl tenant tenant5;
execute tenants;

cqd TENANT_OVERSUBSCRIBE_ERR_NODE_RATIO  '1.0';

register tenant tenant6 admin role tenant6_admin, tenant size 20, resource groups(DB__RGROUP_DEFAULT);
-- expect an oversubscription error
execute tenants;

alter tenant tenant5 tenant size 80;
-- expect an oversubscription error (even though this alter would make
-- the cluster less oversubscribed, sorry)
showddl tenant tenant5;
execute tenants;

cqd TENANT_OVERSUBSCRIBE_WARN_NODE_RATIO '1e6';
cqd TENANT_OVERSUBSCRIBE_ERR_NODE_RATIO  '1e6';

unregister tenant tenant5;
execute tenants;
