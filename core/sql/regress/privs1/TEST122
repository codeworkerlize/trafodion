-- ============================================================================
-- TEST122 - tests schema level privileges for private schemas
--
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- ============================================================================
-- Design:
--    t122role1 - owns private schema t122sch1 and is admin 
--    t122role2 - used to test ddl privileges for role
--    sql_user1 - has been granted t122role1 can perform admin functions
--    sql_user3 - owns private schema t122sch2 and is admin
--    sql_user2, sql_user4, sql_user5, sql_user6, sql_user7 - used to grant
--      and revoke privileges upon
--
-- t122sch1 contains:
--    games     
--    teams    
--
-- t122sch2 contains:
--    players 
--    standings
--    stats   
--
-- TBD - add tests for REFERENCES privilege
-- ============================================================================

obey TEST122(clean_up);
log LOG122 clear;
obey TEST122(tests);
log;
obey TEST122(clean_up);
exit;

?section clean_up
-- =================================================================
-- remove roles and schemas, revoke privileges
-- =================================================================
revoke component privilege manage_statistics on sql_operations from manage_role;
revoke component privilege manage on sql_operations from sql_user7;
revoke role manage_role from sql_user7;
drop role manage_role;

set schema t122sch1;
drop schema t122sch1 cascade;
set schema t122sch2;
drop sequence team_seq;
drop schema t122sch2 cascade;

revoke role t122role1 from sql_user1;
drop role t122role1;
drop role t122role2;

revoke select on "_MD_".objects from public;
revoke select on "_PRIVMGR_MD_".schema_privileges from public;

revoke component privilege "SHOW" on sql_operations from "PUBLIC";
?section create_db
-- =================================================================
-- create roles, schemas, and objects in schemas
-- =================================================================

-- *** create roles and schemas ***
create role t122role1;
create role t122role2;

grant select on "_MD_".objects to public;
grant select on "_PRIVMGR_MD_".schema_privileges to public;

create schema t122sch1 authorization t122role1;
create schema t122sch2 authorization sql_user3;

-- *** create schema t122sch1 objects ***
set schema t122sch1;
create table teams
  (team_number int not null primary key,
   team_name char(20) not null,
   team_contact varchar(50) not null,
   team_contact_number char (10) not null
   )
  ;

alter table teams add constraint valid_team_no check (team_number > 0);
insert into teams values
   (1, 'White Socks', 'Sam','4082282222'),
   (2, 'Giants', 'Joe', '5102839483'),
   (3, 'Cardinals', 'Stella', '9513849384'),
   (4, 'Indians', 'Matt', '5128383748'),
   (5, 'Tigers', 'Ronit', '6198273827');

create table games
   ( home_team_number int not null,
     visitor_team_number int not null,
     game_number int not null primary key,
     game_time timestamp not null,
     game_location varchar(50) not null)
  ;

alter table games add constraint valid_game_number check (game_number > 0);

insert into games values
   (1, 2, 1, timestamp '2009-04-23 19:30:00', 'California'),
   (1, 3, 2, timestamp '2009-04-24 19:30:00', 'California'),
   (1, 4, 3, timestamp '2009-04-25 10:00:00', 'Oklahoma'),
   (2, 3, 4, timestamp '2009-04-25 13:30:00', 'Michigan'),
   (1, 5, 5, timestamp '2009-04-25 15:00:00', 'Oklahoma'),
   (2, 5, 6, timestamp '2009-04-27 17:00:00', 'New York'),
   (3, 4, 7, timestamp '2009-04-28 17:00:00', 'Florida'),
   (4, 2, 8, current_timestamp, 'Missouri');

create view team_games as
  select t.team_number, g.game_number, g.game_time
  from teams t, games g
  where t.team_number = g.home_team_number
  order by t.team_number;

create sequence team_seq;

-- Prepare library file
sh rm -f ./etest141.dll;
sh sh $$scriptsdir$$/tools/dll-compile.ksh etest141.cpp
  2>&1 | tee LOG122-SECONDARY;
set pattern $$DLL$$ etest141.dll;
set pattern $$QUOTE$$ '''';
create library t122_l1 file $$QUOTE$$ $$REGRRUNDIR$$/$$DLL$$ $$QUOTE$$ ;
create function translateBitmap(bitmap largeint) returns (bitmap_string char (20))
language c parameter style sql external name 'translateBitmap'
library t122_l1
deterministic no sql final call allow any parallelism state area size 1024 ;

get tables;
get views;
get sequences, match 'T122SCH1.TEAM_SEQ';
get libraries;
get functions;

-- *** create schema t122sch1 objects ***
set schema t122sch2;
create table players
  (player_number int not null,
   player_name varchar (50) not null,
   player_team_number int not null,
   player_phone_number char (10) not null,
   player_details varchar(50),
   primary key (player_number, player_team_number))
  no partition;

alter table players add constraint valid_player_number check(player_number > 0);

insert into players values
   (1, 'Tom', 1, '4083948394', null),
   (2, 'Bob', 1, '4089483948', null),
   (3, 'Toby',1, '4082938493', 'pitcher'),
   (3, 'Toby',2, '4082938493', null),
   (4, 'Julie', 2, '5108394839', 'catcher'),
   (5, 'Joanne', 2, '5103849384', null),
   (6, 'Pete', 2, '5102839483', null),
   (6, 'Pete', 3, '5102839483', 'third base'),
   (7, 'Jared',4, '9518293849', 'short stop'),
   (8, 'Zachary', 4, '9518293840', null),
   (9, 'Lynne', 5, '9518293892', 'pitcher'),
   (10, 'Omar', 5, '5128394893', null);

create table standings
    (team_number int not null primary key,
     wins int default 0,
     loses int default 0,
     last_updated timestamp default current_timestamp)
;

insert into standings (team_number) values (1), (2), (3), (4), (5);

create table stats
  (team_number int not null primary key,
   num_players int not null)
;
insert into stats values (1,11), (2,12), (3,10), (4,13), (5,12);

get tables;

grant component privilege "SHOW" on sql_operations to "PUBLIC";

-- *** report schema details ***
showddl schema t122sch1;
showddl schema t122sch2;

?section tests
-- =================================================================
--  runs 4 sets of tests
--    manage_tests - granting manage component privilege
--    t122sch1_tests where schema owner is role
--    t122sch2_tests where schema owner is user
--    ddl_tests - tests granting DDL privileges on schema
-- =================================================================

create role manage_role;
grant component privilege "MANAGE_STATISTICS" on sql_operations to manage_role;
grant component privilege manage on sql_operations to sql_user7;
grant role manage_role to sql_user7;
get privileges on component sql_operations for sql_user7 cascade;
sh sqlci -i "TEST122(manage_tests)" -u sql_user7;
revoke component privilege manage_statistics on sql_operations from manage_role;
revoke component privilege manage on sql_operations from sql_user7;
revoke role manage_role from sql_user7;
drop role manage_role;
get privileges on component sql_operations for sql_user7 cascade;

obey TEST122(create_db);
grant role t122role1 to sql_user1;
sh sqlci -i "TEST122(t122sch1_tests)" -u sql_user1;
sh sqlci -i "TEST122(t122sch2_tests)" -u sql_user3;
revoke role t122role1 from sql_user1;

obey TEST122(ddl_tests);

?section manage_tests
-- =================================================================
-- If a user/role is granted MANAGE privilege, they automatically
--  can access metadata. 
-- Verify that when MANAGE is revoked, that query invalidation
-- works
-- ================================================================= 
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd AUTO_QUERY_RETRY_WARNINGS 'ON';
set param ?cmd 'put';

-- selects from "_MD_", "_PRIVMGR_MD_"  and '_TENANT_MD_' work
-- sql_user7 get privileges from both manage_role and direct grants
select cast (auth_db_name as char (20) character set iso88591) 
from "_MD_".auths where auth_db_name like 'DB__%';
select cast(role_name as char(20) character set iso88591) 
from "_PRIVMGR_MD_".role_usage where role_name = 'MANAGE_ROLE';
select tenant_id, admin_role_id from "_TENANT_MD_".tenants where tenant_id = 1500000;

-- operations against "_REPOS_"  and "_LIBMGR_ fail
select count(*) from "_REPOS_".METRIC_QUERY_TABLE;
call "_LIBMGR_".help(?cmd);

sh sqlci -i "TEST122(revoke_role_manage)";
-- selects from "_MD_", "_PRIVMGR_MD_"  and '_TENANT_MD_' still work
-- sql_user7 gets privilege from direct grant
select cast (auth_db_name as char (20) character set iso88591)
from "_MD_".auths where auth_db_name like 'DB__%';
select cast(role_name as char(20) character set iso88591) 
from "_PRIVMGR_MD_".role_usage where role_name = 'MANAGE_ROLE';
select tenant_id, admin_role_id from "_TENANT_MD_".tenants where tenant_id = 1500000;

sh sqlci -i "TEST122(revoke_manage)";
-- selects from "_MD_", "_PRIVMGR_MD_"  and '_TENANT_MD_' fail
select cast (auth_db_name as char (20) character set iso88591)
from "_MD_".auths where auth_db_name like 'DB__%';
select cast(role_name as char(20) character set iso88591) 
from "_PRIVMGR_MD_".role_usage where role_name = 'MANAGE_ROLE';
select tenant_id, admin_role_id from "_TENANT_MD_".tenants where tenant_id = 1500000;

?section revoke_role_manage
-- ===============================================================================
-- revoke the manage_role from sql_user7
-- ===============================================================================
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
revoke role manage_role from sql_user7;
get privileges on component sql_operations for sql_user7 cascade;

?section revoke_manage
-- ===============================================================================
-- revoke the manage component privilege from sql_user7
-- ===============================================================================
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
revoke component privilege manage on sql_operations from sql_user7;
get privileges on component sql_operations for sql_user7 cascade;

?section t122sch1_tests
-- =================================================================
-- This runs all the tests as sql_user1 - user granted role that
-- owns the schema
-- =================================================================
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd AUTO_QUERY_RETRY_WARNINGS 'ON';
set schema t122sch1;

-- sql_user1 can view all objects in schema
obey TEST122(t122sch1_cmds);

-- grant sql_user2 privs
-- fails error 1012 because sql_user1 does not have priv directly
grant select, update, insert, delete on schema t122sch1 to sql_user2;

-- sql_user1 -> grant dml through the role
grant select, update, insert, delete on schema t122sch1 to sql_user2 by t122role1;

-- sql_user2 -> selects work but not execute (function) and usage (sequence)
sh sqlci -i "TEST122(user_tests)" -u sql_user2;

-- sql_user1 -> grant usage privilege
grant usage on schema t122sch1 to sql_user2 by t122role1;

-- sql_user2 -> all work except execute (function)
sh sqlci -i "TEST122(user_tests)" -u sql_user2;

-- sql_user1 -> grant execute privilege
grant execute on schema t122sch1 to sql_user2 by t122role1;

-- sql_user2 -> all work
sh sqlci -i "TEST122(user_tests)" -u sql_user2;

-- sql_user1 -> revoke privs
-- fails, sql_user1 has no priv, need by clause
revoke select, update, insert, delete, usage, execute on schema t122sch1 from sql_user2;

-- sql_user1 -> can revoke through role
revoke select, update, insert, delete, usage, execute on schema t122sch1 from sql_user2
   by t122role1;

-- Test query invalidation, by revoking role t122sch1 from sql_user1 and then
-- granting the role again. Grants and revokes are performed in a different
-- process

-- sql_user1 no longer has privs through role
--    queries and grant statements fail
sh sqlci -i "TEST122(role_revoke)";
obey TEST122(t122sch1_cmds);
grant select on schema t122sch1 to sql_user2 by t122role1;
revoke select on schema t122sch1 from sql_user2 by t122role1;

-- sql_user1 now has privs through role
sh sqlci -i "TEST122(role_grant)";
obey TEST122(t122sch1_cmds);
grant select on schema t122sch1 to sql_user2 by t122role1;
revoke select on schema t122sch1 from sql_user2 by t122role1;

-- test granting and revoking public
grant select, execute, usage on schema t122sch1 to public by t122role1;
sh sqlci -i "TEST122(user_tests)" -u sql_user8;
revoke select, execute, usage on schema t122sch1 from public by t122role1;
sh sqlci -i "TEST122(user_tests)" -u sql_user8;

-- all privileges should be removed
showddl schema t122sch1;

?section t122sch1_cmds
-- *** Perform basic dml against t122sch1
--    select
--    usage (sequence)
--    execute (translateBitmap)
-- ***
values (current_user);
set schema t122sch1;

select count(*) from games;
select count(*) from teams;
select count(*) from team_games;
select team_number, seqnum(team_seq) from teams;
select distinct
   substring (schema_name,1,40) as schema_name,
   substring(grantor_name,1,10) as grantor,
   substring(grantee_name,1,10) as grantee,
   translateBitmap(privileges_bitmap) as granted_privs,
   translateBitmap(grantable_bitmap) as grantable_privs
from "_PRIVMGR_MD_".schema_privileges
where schema_uid in
     (select object_uid
      from "_MD_".objects
      where schema_name like 'T122SCH%')
  order by 1, 2, 3, 4, 5
;

?section role_revoke

-- *** DB__ROOT -> revoke a role from a user
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

revoke role t122role1 from sql_user1;
showddl role t122role1;

?section role_grant

-- *** DB__ROOT -> grant a role to a user
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

grant role t122role1 to sql_user1;
showddl role t122role1;

?section user_tests

-- *** sql_user? -> run DML operations for t122sch1
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

obey TEST122(t122sch1_cmds);
showddl schema t122sch1;

?section t122sch2_tests
-- =================================================================
-- This runs all the tests as sql_user3 - owner of the schema.  
-- =================================================================
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd AUTO_QUERY_RETRY_WARNINGS 'ON';
set schema t122sch2;

-- sql_user3 -> can view all tables;
obey TEST122(t122sch2_cmds);

-- sql_user3 -> grant select priv
grant select on schema t122sch2 to sql_user4 with grant option;

-- sql_user4 -> test schema privs and query invalidation
sh sqlci -i "TEST122(user4_tests)" -u sql_user4;

-- sql_user3 -> cleanup remaining privileges for previous test
revoke all on players from sql_user4;
revoke select(num_players, team_number), update on stats from sql_user4;

-- sql_user7 -> test qi for public privilege
sh sqlci -i "TEST122(user7_tests)" -u sql_user7;

-- sql_user3 -> should have only creator privileges
showddl schema t122sch2;

?section t122sch2_cmds

-- *** Perform basic dml against t122sch2
values (current_user);
set schema t122sch2;

select count(*) from players;
select count(*) from standings;
update stats set num_players = num_players + 1;
select * from stats;

?section user4_tests

-- *** Test schema privilege propagation, WITH GRANT OPTION, query 
-- *** invalidation, and object/column privs with schema privs
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
cqd AUTO_QUERY_RETRY_WARNINGS 'ON';
set schema t122sch2;

-- sql_user4 -> can select from objects
obey TEST122(t122sch2_cmds);

-- sql_user4 -> test privilege propagation
--    propagate select privilege
grant select on schema t122sch2 to sql_user5;
grant select on schema t122sch2 to sql_user6 with grant option;
showddl schema t122sch2;

-- sql_user5 -> can access t122sch2 objects but not grant privs
sh sqlci -i "TEST122(user5_tests)" -u sql_user5;

-- sql_user6 -> can access t122sch2 objects and grant privs
sh sqlci -i "TEST122(user6_tests)" -u sql_user6;

-- sql_user4 -> remove privileges from sql_user5, sql_user5 no long has priv
revoke select on schema t122sch2 from sql_user5;
sh sqlci -i "TEST122(user5_tests)" -u sql_user5;
 
-- sql_user4 -> remove privileges from sql_user6, 
--    fails, sql_user6 granted privileges to sql_user7
--    and user4 cannot revoke it (until we support cascade)
revoke grant option for select on schema t122sch2 from sql_user6;
revoke select on schema t122sch2 from sql_user7 by sql_user6;

-- sql_user6 ->  revoke the privilege
sh sqlci -i "TEST122(user6_revoke)" -u sql_user6;

-- sql_user4 -> can now revoke privileges from sql_user6, first revoke
--    the GOF
revoke grant option for select on schema t122sch2 from sql_user6;
showddl schema t122sch2;

-- sql_user4 -> revoke remaining privileges
revoke select on schema t122sch2 from sql_user6;
showddl schema t122sch2;

-- sql_user3 -> test query invalidation, revoke privs from sql_user4 in 
--    another process
sh sqlci -i "TEST122(revoke_privs)" -u sql_user3;

-- sql_user4 -> no longer has privs through the object
obey TEST122(t122sch2_cmds);

-- sql_user3 -> grant schema, object, and column privileges to sql_user4
sh sqlci -i "TEST122(grant_privs)" -u sql_user3;

-- sql_user4 -> can now access objects
obey TEST122(t122sch2_cmds);

-- sql_user3 -> revoke schema privileges, 
--    no longer able to select from standings or stats
--    can select from players and update stats
sh sqlci -i "TEST122(revoke_privs)" -u sql_user3;
obey TEST122(t122sch2_cmds);

?section user5_tests

-- *** run tests as sql_user5
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

obey TEST122(t122sch2_cmds);
grant select on schema t122sch2 to sql_user7;
showddl schema t122sch2;

?section user6_tests

-- *** run tests as sql_user6
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

obey TEST122(t122sch2_cmds);
grant select on schema t122sch2 to sql_user7;
showddl schema t122sch2;

?section user6_revoke

-- *** revoke schema privileges as sql_user6
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

revoke select on schema t122sch2 from sql_user7;
showddl schema t122sch2;

?section revoke_privs

-- *** revoke privileges object and column privileges for t122sch2 tests
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

revoke select, insert, update, delete on schema t122sch2 from sql_user4;
showddl schema t122sch2;

?section grant_privs

-- *** grant object  and column level privileges for t122sch2 tests
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
set schema t122sch2;

grant select, insert, update, delete on schema t122sch2 to sql_user4;
grant select on players to sql_user4;
grant select(team_number,num_players), update on stats to sql_user4;
showddl schema t122sch2;

?section user7_tests

-- *** test query invalidation for the public authorization ID
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

-- fails - has no privilege
obey TEST122(t122sch2_cmds);

-- grant to public, test should work
sh sqlci -i "TEST122(grant_public)";
obey TEST122(t122sch2_cmds);

-- revoke from public, tests should fail
sh sqlci -i "TEST122(revoke_public)";
obey TEST122(t122sch2_cmds);

?section grant_public

-- *** grant schema privilege to public
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

grant select, insert, update, delete on schema t122sch2 to public;
showddl schema t122sch2;

?section revoke_public

-- *** revoke schema privilege from public
log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
revoke select, insert, update, delete on schema t122sch2 from public;
showddl schema t122sch2;

?section ddl_tests
--  Tests create, alter, and drop privileges at the schema level
set schema t122sch2;
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
showddl schema t122sch2;

drop table if exists teams;
create table if not exists teams
  (team_number int not null primary key,
   team_name char(20) not null,
   team_contact varchar(50) not null,
   team_contact_number char (10) not null
   )
  ;
grant select on teams to sql_user5;
drop table if exists games;
create table if not exists games
   ( home_team_number int not null,
     visitor_team_number int not null,
     game_number int not null primary key,
     game_time timestamp not null,
     game_location varchar(50) not null)
  ;
drop table if exists players;
create table if not exists standings
    (team_number int not null primary key,
     wins int default 0,
     loses int default 0,
     last_updated timestamp default current_timestamp);
grant create, alter, drop on schema t122sch2 to sql_user5;
showddl schema t122sch2;

get privileges on table teams;
get privileges on table games;
get privileges on table players;
get privileges on table standings;
get privileges for user sql_user5, match '%T122SCH2%';

-- sql_user5 can perform all schema_ops
sh sqlci -i "TEST122(schema_ops)" -u sql_user5;
obey TEST122(reset_objs);

-- sql_user5 cannot alter games
revoke alter on schema t122sch2 from sql_user5;
sh sqlci -i "TEST122(schema_ops)" -u sql_user5;
obey TEST122(reset_objs);

-- sql_user5 can drop their tables but cannot drop other tables
revoke drop on schema t122sch2 from sql_user5;
sh sqlci -i "TEST122(schema_ops)" -u sql_user5;
obey TEST122(reset_objs);

-- sql_user5 cannot do anything
revoke create on schema t122sch2 from sql_user5;
sh sqlci -i "TEST122(schema_ops)" -u sql_user5;
obey TEST122(reset_objs);

-- fails, DDL privileges don't support WGO
grant create on schema t122sch2 to sql_user5 with grant option;
?section schema_ops

log LOG122;
values (current_user);
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';
 
set schema t122sch2;
get privileges for user sql_user5, match '%T122SCH2%';

-- schema level CREATE
create view home_teams as
  select team_number from teams;

-- Cannot create view because of no SELECT priv
create view home_teams_games as
  select t.team_number, g.game_number, g.game_time
  from "TEAMS" t,
       "GAMES" g
  where t.team_number = g.home_team_number
  order by 1, game_number, game_time;

-- schema level CREATE
create table players
  (player_number int not null,
   player_name varchar (50) not null,
   player_team_number int not null,
   player_phone_number char (10) not null,
   player_details varchar(50),
   primary key (player_number, player_team_number))
  no partition;

create sequence players_sequence;
get objects for user sql_user5, match '%T122SCH2%';  

-- schema level ALTER
showddl games;
alter table games add constraint valid_game_number check (game_number > 0);
showddl games;
alter table games drop constraint valid_game_number;

-- schema level DROP
drop table standings;
drop view home_teams;
drop table players;
drop sequence players_sequence;
get objects for user sql_user5, match '%T122SCH2%';  

?section reset_objs
drop view if exists home_teams_games;
drop view if exists home_teams;
drop table if exists players;
drop table if exists standings;
create table standings
    (team_number int not null primary key,
     wins int default 0,
     loses int default 0,
     last_updated timestamp default current_timestamp);
drop sequence players_sequence;

