-- Test: TEST132 (Executor)
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- Functionality: Inline LOBs
-- Expected files: EXPECTED132
-- Table created: 
-- Limitations: 
-- 
-- To Do:   
--      
-- Revision history:
--     (10/21/2014) - Created.
-- 

log LOG132 clear;

?section clnup
set schema trafodion.lob132;
drop table if exists t132lob1 cascade;
drop table if exists t132lob2 cascade;
drop table if exists t132srclob cascade;
drop table if exists t132tgtlob cascade;
drop schema if exists trafodion.lob132 cascade;

?section setup
cqd traf_lob_version2 'ON';
cqd traf_lob_inlined_data_maxbytes '40';

create schema if not exists trafodion.lob132;
create table if not exists t132lob1 (c1 int not null, c2 blob, primary key (c1));
create table if not exists t132lob2 ( c2 clob(10));
create table if not exists t132srclob (c1 int not null, c2 blob, c3 blob, primary key (c1));
create table if not exists t132tgtlob (c1 int not null, c2 blob, c3 blob, primary key (c1));

?section inline_insert
--insert 4 rows which fit inline
insert into t132lob1 values (1, stringtolob('inserted inline row1'));
insert into t132lob1 values (2, stringtolob('inserted inline row2'));
insert into t132lob1 values (3, stringtolob('inserted inline row3'));
insert into t132lob1 values (4, stringtolob('inserted inline row4'));
select lobtostring(c2,40)from t132lob1;


--test limit 
insert into t132lob2 values (stringtolob('ffffffffffffffff'));
insert into t132lob2 values (stringtolob('ffff'));
select lobtostring(c2,8) from t132lob2;
update t132lob2 set c2=stringtolob('ggggggggggggggggggggggg');
delete from t132lob2;
insert into t132lob2 values (stringtolob('ffff'));
select lobtostring(c2,8) from t132lob2;
update t132lob2 set c2=stringtolob('ggggggggggggggggggggggg',append);
delete from t132lob2;


?section inline_update
-- update one row inline
update t132lob1 set c2=stringtolob('updating inline row1')where c1 =1;
select lobtostring(c2,40)from t132lob1;

--append one row inline
update t132lob1 set c2=stringtolob('upd row2',append) where c1=2; 
select lobtostring(c2,40)from t132lob1;

?section outline_update
--update row transitioning from inline to outline
update t132lob1 set c2=stringtolob('updating a string that will overflow the inline limit and will be stored in hdfs') where c1=3;
select lobtostring(c2,100)from t132lob1;

--append one row outline
update t132lob1 set c2=stringtolob('updating a string that will overflow the inline limit and will be stored in hdfs',append) where c1=4;
select lobtostring(c2,100)from t132lob1;

--transition back to inline for both rows

update t132lob1 set c2=stringtolob('updating inline row3') where c1=3;
update t132lob1 set c2=stringtolob('updating inline row4') where c1=4;
select lobtostring(c2,100)from t132lob1 where c1=3;
select lobtostring(c2,100)from t132lob1 where c1=4;
select * from t132lob1;

?section empty_update
update t132lob1 set c2=empty_blob();
--empty_blob to inline
update t132lob1 set c2=stringtolob('update empty to inline') where c1=1;
select lobtostring(c2,40)from t132lob1;
select * from t132lob1;
--empty_blob to outline
update t132lob1 set c2=stringtolob('update empty to inline') where c1=2;
update t132lob1 set c2=stringtolob('updating a string that will overflow the inline limit and will be stored in hdfs',append) where c1=2;
select lobtostring(c2,100)from t132lob1;
select * from t132lob1;

--insert-select
--insert 2 rows. 1 inline and 1 outline in each row
insert into t132srclob values (1,stringtolob('c2_inline'), stringtolob('c3_outline_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'));
insert into t132srclob values (2,stringtolob('c2_outline_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'), stringtolob('c3_inline'));
select * from t132srclob;
insert into t132tgtlob select * from t132srclob;
select * from t132tgtlob;
select lobtostring(c2,40), lobtostring(c3,40) from t132tgtlob;

obey TEST132(clnup);

log;

