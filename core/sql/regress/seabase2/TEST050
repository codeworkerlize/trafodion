
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- test for BACKUP and RESTORE, part 1
--

cqd TRAF_BACKUP_SKIP_GET_TAGS_OWNER_LOOKUP 'OFF';
drop all backup snapshots, match 'test050%';
cleanup table sch050.t1;
cleanup table sch050.t2;
cleanup table sch050.t1incr;
cleanup schema sch050a;
cleanup table sch050b.t1;
cleanup schema sch050b;
cleanup schema sch050;

drop backup snapshot, tag 'test050';
drop obsolete backup metadata, tag 'test050';

sh rm -rf /tmp/test050;
cleanup metadata, return details;

sh echo $HDFS_URL;
sh regr_hdfs.ksh dfs -rm -r -skipTrash /user/trafodion/backups/*;
sh regr_hdfs.ksh dfs -rm -r -skipTrash /user/trafodion/PIT/*;
sh regr_hdfs.ksh dfs -rm -r -skipTrash /user/trafodion/backupsys/*;

log LOG050 clear;

-- should not show any entries
cleanup metadata, check, return details;

cqd traf_blob_as_varchar 'OFF';
drop backup snapshot, tag 'test050';

drop schema if exists sch050 cascade;
create schema sch050;
set schema sch050;
cqd traf_restore_parallel '1';

create table t1 (a int not null primary key, 
  b int not null unique,
  c char(10),
  d int not null,
  e largeint not null generated by default as identity,
  f int,
  l blob)
salt using 2 partitions;

alter table t1 add constraint t1c1 unique (d);
alter table t1 add column g int;
alter table t1 alter column f largeint; 
alter table t1 add constraint t1c2 check (c != ' ');
alter table t1 alter hbase_options (ttl = '999999');

create index t1i1 on t1 (c) salt like table;
create unique index t1i2 on t1 (c);

create table t2 (a int not null primary key references t1(d));

create view v1 as select * from t1;

grant select on t1 to sql_user1;
grant select on schema sch050 to sql_user1;

get objects in schema sch050;
showddl schema sch050;
showddl t1;
showddl t2;
showddl v1;

-- insert rows
insert into t1 values (1,2,'a',3,4,5,empty_blob(),6);
update statistics for table t1 on every column;
showstats for table t1 on every column;

-- backup schema sch050
backup trafodion, tag 'test050', schemas (sch050), show objects;
backup trafodion, tag 'test050', schemas (sch050), override;

drop schema sch050 cascade;
showddl schema sch050;
get objects in schema sch050;

-- restore schema sch050
restore trafodion, tag 'test050', schemas (sch050), show objects;
restore trafodion, tag 'test050', show objects;

restore trafodion, tag 'test050', show objects;
restore trafodion, tag 'test050';
get objects in schema sch050;
showddl schema sch050;
showddl t1;
showddl t2;
showddl v1;
showstats for table t1 on every column;
select * from t1;

drop schema sch050 cascade;
cleanup schema sch050;
restore trafodion, tag 'test050', schemas (sch050);
get objects in schema sch050;
showddl schema sch050;
showddl t1;
showddl t2;
showddl v1;
showstats for table t1 on every column;
select * from t1;

-- restores tables
drop view v1;
drop table sch050.t1 cascade;
drop table sch050.t2;
restore trafodion, tag 'test050', table (sch050.t1), show objects;
restore trafodion, tag 'test050', table (sch050.t1);
get objects in schema sch050;
showddl schema sch050;
showddl t1;
showddl t2;
showddl v1;
showstats for table t1 on every column;
select * from t1;

-- restore table fails followed by recovery of original table with 2 rows.
-- backup tag 'test050' contains table sch050.t1 with single row.
set envvar RESTORE_ERR_INJECT_3;
restore trafodion, tag 'test050', table (sch050.t1), show objects;
restore trafodion, tag 'test050', table (sch050.t1); 
select * from t1;
restore trafodion, tag 'test050', table (sch050.t1);
cleanup backup, tag 'test050';
select * from t1;
reset envvar RESTORE_ERR_INJECT_3;

-- delete backups
get all backup snapshots, match 'test050%';
get all backup metadata, match 'test050%';
get backup snapshot, tag 'test050';
drop backup snapshot, tag 'test050', force;
get all backup snapshots, match 'test050%';
get all backup metadata, match 'test050%';
get backup snapshot, tag 'test050';

-- backup and alter of tables
invoke sch050.t1;
backup trafodion, tag 'test050', table (sch050.t1), override;
alter table sch050.t1 add column z int;
invoke sch050.t1;
restore trafodion, tag 'test050';
invoke sch050.t1;
drop backup snapshot, tag 'test050', force, cascade;

-- backup restore with a dot in tag.
invoke sch050.t1;
backup trafodion, tag 'test.050', table (sch050.t1), override;
restore trafodion, tag 'test.050';
invoke sch050.t1;
drop backup tag, tag 'test.050', force, cascade;

-- backup with quoted schema name table.
create schema "sch050a";
set schema "sch050a";
create table t1(i int) attribute incremental backup;
backup trafodion, tag 'test050', tables(t1), override;
drop schema "sch050a" cascade;
drop backup snapshot, tag 'test050', force, cascade;
set schema sch050;

-- should not be any orphans in metadata at this point
cleanup metadata, check, return details;

-- backup with error injection
create schema if not exists "sch050a";
set schema "sch050a";
create table if not exists t1(i int) attribute incremental backup;
set envvar BACKUP_ERR_INJECT_3;
backup trafodion, tag 'test050_22', tables(t1), override;
drop schema if exists "sch050a" cascade;
drop backup snapshot, tag 'test050_22', force, cascade;
drop obsolete backup metadata, tag 'test050_22';
reset envvar BACKUP_ERR_INJECT_3;
set schema sch050;

-- should not be any orphans in metadata at this point
cleanup metadata, check, return details;

-- precreate system tags
prepare s from backup trafodion, create 1 system tags;

-- error cases
backup trafodion;
backup trafodion, schemas (sch050);
backup trafodion, tag 't12345678901234567890123456789012345';
backup trafodion, tag 'tt', to timestamp 'tt';
backup trafodion, tag 'abc', schemas (noschema);
backup trafodion, tag 'abc', table (notable);
backup trafodion, tag 'a&c', table (t1);
restore trafodion;
restore trafodion, schemas (sch050);
restore trafodion, tag 'abc', to timestamp '';
restore trafodion, to timestamp '';
restore trafodion, to timestamp '1000-10-45 10:10:10';
backup trafodion, schema (sch050, sch051);
drop backup snapshot, tag 'test050', table (sch050.t1);
import backup from location 'temp';
export backup to location 'temp';

-- there should not be any locks.
get all locked objects;

-- should not be any orphans in metadata at this point
cleanup metadata, check, return details;

get all backup snapshots, match 'test050%';
get all backup tags, show details, match 'test050%';
drop all backup snapshots, match 'test050%';
get all backup tags, show details, match 'test050%';
get all backup metadata, match 'test050%';

log;

-- clean up
--revoke select on t1 from sql_user1;
revoke select on schema sch050 from sql_user1;
drop table sch050.t1 cascade;
cleanup schema sch050;

