-- =============================================================================
-- TEST054 - Test authID mismatches for restore
--
--  1 - The target system does not have the required users/roles
--  2 - The target system have the same users/roles as the source system
--      but their authIDs mismatch
--
--  For example:
--   On the source system, henry is assigned authID 33344 
--   On the target system, mary does not exist and henry is assigned authID 33345
-- =============================================================================

cqd CAT_ANSI_PRIVS_FOR_TENANT 'ON';
cqd SHOWDDL_DISPLAY_PRIVILEGE_GRANTS 'ON';

obey TEST054(clean_up);
log LOG054 clear;
obey TEST054(create_auths1);
obey TEST054(create_db);
obey TEST054(display_db);

-- backup schemas
get all locked objects;
backup trafodion, tag 'test054-all-sch', schemas (test054sch1, test054sch2), override;
get all backup snapshots, match 'test054%';

obey TEST054(clean_up);

-- fails because roles/users do not exist
restore trafodion, tag 'test054-all-sch', schemas (TEST054SCH1);

-- create roles and users in a different order
obey TEST054(create_auths2);

-- works
restore trafodion, tag 'test054-all-sch';

-- should not show any inconsistencies
cleanup metadata, check, return details;

obey TEST054(display_db);

log;
obey TEST054(clean_up);
exit;

?section clean_up
-- ============================================================================
drop schema test054sch1 cascade;
drop schema test054sch2 cascade;
revoke role test054_role1 from joe;
revoke role test054_role2 from henry;
drop role test054_role1;
drop role test054_role2;
unregister user henry;
unregister user mary;
unregister user joe;
cleanup metadata, return details;

?section create_auths1
-- ============================================================================
register user henry;
register user joe;
register user mary;
create role test054_role1;
create role test054_role2;

?section create_auths2
-- ============================================================================
register user henry;
register user joe;
register user mary;
create role test054_role1;
create role test054_role2;
grant role test054_role1 to joe;
grant role test054_role2 to henry;

?section create_db
-- ============================================================================
-- Create 2 schemas - shared and public
-- ============================================================================

-- schema test054sch1
--   henry owns shared schema 
--   henry owns a tables
--   mary owns some tables 
--   mary has been granted privileges on table
--   test054_role1 has schema privileges
--   joe has privileges through role test054_role1
create shared schema test054sch1 authorization henry;
set schema test054sch1;
create table t1 (a int not null primary key, b int) attribute by henry;
create table t2 (a int, b int not null primary key) attribute by mary;
insert into t1 values (1,1), (2,2), (3,3), (4,4), (5,5),(6,6);
insert into t2 values (2,1), (2,2), (2,3), (2,4), (2,5),(2,6);
grant select, insert on t1 to mary;
grant select, insert on schema test054sch1 to test054_role1 by henry;
grant role test054_role1 to joe;

-- schema test054sch2
--   test054_role2 owns private schema 
--   henry has all privileges through role test054_role2
--   mary and test054_role1 (and joe) have column privileges
--   mary has sequence privileges
--   joe has privileges on procedures and views
create schema test054sch2 authorization test054_role2;
set schema test054sch2;
create table t1 (a int, b int);
create table t2 (a int, b int);
create view t1_v1 as select b from t1;
insert into t1 values (3,1), (3,2), (3,3), (3,4), (3,5),(3,6);
insert into t2 values (4,1), (4,2), (4,3), (4,4), (4,5),(4,6);
create procedure p1(in a varchar(100), out b varchar(100)) as //
begin
  set b = 'Hello ' || b || '!';
end//;
create sequence test054_seq1;
grant role test054_role2 to henry;
grant select(a) on t1 to mary;
grant select(b) on t2 to test054_role1;
grant execute on procedure p1 to joe;
grant select on t1_v1 to joe;
grant usage on sequence test054_seq1 to mary;

?section display_db
get privileges for user henry, match '%TEST054SCH%';
get privileges for user mary, match '%TEST054SCH%';
get privileges for user joe, match '%TEST054SCH%';
get privileges for role test054_role1, match '%TEST054SCH%';
get privileges for role test054_role2, match '%TEST054SCH%';
showddl schema test054sch1;
showddl schema test054sch2;

select distinct grantee_id as sourceID, auth_id as targetID, auth_db_name, 'grantee_id', 'OBJECT_PRIVILEGES'
from TRAFODION."_MD_".AUTHS a, TRAFODION."_PRIVMGR_MD_".OBJECT_PRIVILEGES o
where grantee_name =  auth_db_name and grantee_id <> auth_id union
(select distinct grantor_id as sourceID, auth_id as targetID, auth_db_name, 'grantor_id', 'OBJECT_PRIVILEGES'
from TRAFODION."_MD_".AUTHS a, TRAFODION."_PRIVMGR_MD_".OBJECT_PRIVILEGES o
where grantor_name =  auth_db_name and grantor_id <> auth_id ) union
(select distinct grantee_id as sourceID, auth_id as targetID, auth_db_name, 'grantee_id', 'COLUMN_PRIVILEGES'
from TRAFODION."_MD_".AUTHS a, TRAFODION."_PRIVMGR_MD_".COLUMN_PRIVILEGES o
where grantee_name =  auth_db_name and grantee_id <> auth_id ) union
(select distinct grantor_id as sourceID, auth_id as targetID, auth_db_name, 'grantor_id', 'COLUMN_PRIVILEGES'
from TRAFODION."_MD_".AUTHS a, TRAFODION."_PRIVMGR_MD_".COLUMN_PRIVILEGES o
where grantor_name =  auth_db_name and grantor_id <> auth_id ) union
(select distinct grantee_id as sourceID, auth_id as targetID, auth_db_name, 'grantee_id', 'SCHEMA_PRIVILEGES'
from TRAFODION."_MD_".AUTHS a, TRAFODION."_PRIVMGR_MD_".SCHEMA_PRIVILEGES o
where grantee_name =  auth_db_name and grantee_id <> auth_id ) union
(select distinct grantor_id as sourceID, auth_id as targetID, auth_db_name, 'grantor_id', 'SCHEMA_PRIVILEGES'
from TRAFODION."_MD_".AUTHS a, TRAFODION."_PRIVMGR_MD_".SCHEMA_PRIVILEGES o
where grantor_name =  auth_db_name and grantor_id <> auth_id )
order by 1;

