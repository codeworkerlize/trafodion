-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- test for composite datatypes
--

obey TEST061(clean_up);

log LOG061 clear;

cqd traf_composite_datatype_support 'OFF';
cqd hive_composite_datatype_support 'ON';
obey TEST061(tests_hive);

obey TEST061(tests_unnest);

obey TEST061(tests_jpmc);

log;

exit;

?section tests_hive
cqd hive_max_string_length_in_bytes '10';
cqd hive_max_composite_string_length_in_bytes '10';

cqd hive_timestamp_precision_in_usec 'ON';

create database if not exists hive.test061;
set schema hive.test061;

drop table if exists t061dummy;
create table if not exists t061dummy (a int);
insert into t061dummy values (1);

drop table if exists t061arr1;
create table t061arr1 (a array < string >) stored as parquet;
invoke t061arr1;
sh echo "insert into test061.t061arr1 select (array('abc', 'de')) from test061.t061dummy;" > TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
select * from t061arr1;

drop external table if exists t061row1 for t061row1;
drop table if exists t061row1;
create table t061row1 (a struct<a1:string, a2:int>) stored as parquet;
invoke t061row1;
sh echo "insert into test061.t061row1 select (named_struct('a1','abcd', 'a2', 10)) from test061.t061dummy;" > TEST061_junk;
sh echo "insert into test061.t061row1 select named_struct('a1',cast(null as string),'a2',cast(null as int)) from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
select * from t061row1;

create external table t061row1(a row(a1 char(10 bytes) character set utf8, 
                               a2 smallint)) for hive.test061.t061row1;
create external table t061row1 for hive.test061.t061row1;
invoke t061row1;
showddl t061row1;
prepare s from select * from hive.test061.t061row1;
execute s;
select * from t061row1;
select a.a1 from t061row1;

drop external table if exists thps3 for thps3;
drop table if exists thps3;
create table thps3 (a array < struct <b:int,c:string > >) stored as parquet; 
invoke thps3;
showddl thps3;
sh echo "insert into test061.thps3 select (array (named_struct ('b',10,'c','abc'))) from test061.t061dummy;" > TEST061_junk;
sh echo "insert into test061.thps3 select (array (named_struct ('b',-1,'c','') , named_struct ('b', 20, 'c', 'xy'))) from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
get parquet read schema for table thps3;
get parquet write schema for table thps3;
select * from thps3;
select a[1] from thps3;
select a.b from thps3;
select a[1].b from thps3;
select a[2] from thps3;
select a[2].c from thps3;
select cast(a as array[1]) from thps3;
select cast(a as array[4]) from thps3;

cqd hive_composite_datatype_support 'ALL';
select array_length(a || a) from thps3 order by 1;
select cast(a || a as char(40)) from thps3 order by 1;
cqd hive_composite_datatype_support 'ON';

-- cast to hive composite datatype not yet supported.
-- if cast is enabled thru internal cqd, then 
-- these stmts crash. Need to be fixed. Commenting them out for now.
?ignore
cqd hive_composite_datatype_support 'ALL';
select cast(a as row(b int, c varchar(10) character set utf8) array[2]) 
       from thps3;

-- should return one element
select cast(a as row(b int, c varchar(10) character set utf8) array[1]) 
       from thps3;

-- return error
create external table thps3 (a row(b smallint, c char(5) character set utf8) array[2]) for thps3;
showddl thps3;

select * from thps3;
cqd hive_composite_datatype_support 'ON';
?ignore

-- struct of struct
drop table if exists thps6;
create table thps6(a struct<a1:struct<a2:int>>) stored as parquet;
sh echo "insert into test061.thps6 select named_struct('a1',named_struct('a2',10))  from test061.t061dummy;" > TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
select * from thps6;

drop table if exists thps7;
create table thps7(a struct< a1:struct<a2:int>, b1:struct<b2:int> > ) 
   stored as parquet;
sh echo "insert into test061.thps7 select named_struct('a1',named_struct('a2',10), 'b1',named_struct('b2',10)) from test061.t061dummy;" > TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
select * from thps7;

-- array of struct
drop view if exists vhps9;
drop table if exists thps9;
create table thps9(a int, aa string, 
                   b array<struct<b1:string, b2:string>>) stored as parquet;
sh echo "insert into test061.thps9 select 10, 'abcd1', (array(named_struct('b1','xyz11', 'b2', 'uv11'), named_struct('b1','xyz12', 'b2', 'uv12'))) from test061.t061dummy;" > TEST061_junk;
sh echo "insert into test061.thps9 select 20, 'abcd2', (array(named_struct('b1','xyz2', 'b2', 'uv2'))) from test061.t061dummy;" >> TEST061_junk;
sh echo "insert into test061.thps9 select 20, 'abcd2', (array(named_struct('b1',cast(null as string), 'b2', 'uv2'))) from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

showddl thps9;
select * from thps9;
select a,aa,b[1].b1,b[2].b2 from thps9;
select array_length(b) from thps9;
select * from thps9 where b[1].b1 is null;
select * from thps9 where b[1].b1 is not null;

create view vhps9 as select * from thps9;
showddl vhps9;
select * from vhps9;
select b[1].b2 from vhps9;
select b[1].b2 from thps9;

-- struct of array
drop view if exists vhps10;
drop table if exists thps10;
create table thps10(z int, a struct<a1:array<int>>) stored as parquet;
invoke thps10;
showddl thps10;
sh echo "insert into test061.thps10 select 10, named_struct('a1',array(10)) from test061.t061dummy;" > TEST061_junk;
sh echo "insert into test061.thps10 select 20, named_struct('a1',array(2,3)) from test061.t061dummy;" >> TEST061_junk;
sh echo "insert into test061.thps10 select null, named_struct('a1',array(2,cast(null as int))) from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
select * from thps10;

create view vhps10 as select * from thps10;
showddl vhps10;
select * from vhps10;
select a.a1[1] from vhps10 order by 1;
select a.a1[1] from thps10 order by 1;
select a.a1[2] from vhps10 order by 1;
select a.a1[2] from thps10 order by 1;

-- varchar/char columns
drop table if exists thps11;
create table thps11(a int,
                   b array<struct<b1:varchar(20), b2:char(20)>>) stored as parquet;
sh echo "insert into test061.thps11 select 10, (array(named_struct('b1',cast('xyz11' as varchar(20)), 'b2', cast('uv11' as char(20))))) from test061.t061dummy;" > TEST061_junk;

sh echo "insert into test061.thps11 select 20, (array(named_struct('b1',cast('xyz11' as varchar(20)), 'b2', cast('uv11' as char(20))), named_struct('b1',cast('xyz12' as varchar(20)), 'b2', cast('uv12' as char(20))))) from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
showddl thps11;
select * from thps11;
select a,b[1].b1,b[2].b2 from thps11;

-- multiple array, struct, array/struct fields
drop table if exists thps12;
create table thps12 (
                  a array<int>,
                  a1 array<char(10)>,
                  a2 array<varchar(10)>,
                  b struct<b1:int,b2:int>,
                  c array<struct<c1:int,c2:int>>
) 
 stored as parquet;
invoke thps12;
showddl thps12;
sh echo "insert into test061.thps12 select array(10,20), array(cast('abc' as char(10))), array(cast('xy' as varchar(10))), named_struct('b1',10,'b2',20), array(named_struct('c1',10,'c2',20), named_struct('c1',100,'c2',200)) from test061.t061dummy;" > TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

select a[1], b.b2, c[2].c1 from thps12;
select a,b,c from  thps12 where c[2].c2 = 200;

-- decimal, timestamp columns
drop table if exists thps13;
create table thps13 (
                  a array<decimal(5,2)>,
                  b struct<b1:decimal(3,0),b2:timestamp>,
                  c array<struct<c1:decimal(4,1),c2:timestamp>>
) 
 stored as parquet;
invoke thps13;
showddl thps13;
sh echo "insert into test061.thps13 select array(cast(10.23 as decimal(5,2)),cast(20 as decimal(5,2))), named_struct('b1',cast(100 as decimal(3,0)),'b2',cast('2018-01-01 10:10:10' as timestamp)), array(named_struct('c1',cast(123.4 as decimal(4,1)),'c2',cast('2019-01-01 10:20:30' as timestamp)), named_struct('c1',cast(100 as decimal(4,1)),'c2',cast('2020-01-01 10:10:10' as timestamp))) from test061.t061dummy;" > TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

select * from thps13;

-- all datatypes
drop table if exists thps14;
create table thps14(aa array<struct<a:char(2), b:varchar(3), c:string, d:decimal(5,2), e:decimal(19,0), f:decimal, g:boolean, h:tinyint, i:float, j:double, k:timestamp , l:int, m:bigint>>) stored as parquet;
invoke thps14;
showddl thps14;
sh echo "insert into test061.thps14 select array(named_struct('a',cast('ab' as char(2)), 'b',cast('x' as varchar(3)), 'c','abc',  'd',cast(10.12 as decimal(5,2)), 'e',cast(20 as decimal(19,0)), 'f',cast(1234 as decimal),  'g', true,  'h',cast(3 as tinyint),  'i',cast(12.56e10 as float),  'j', -1234.566e4, 'k',cast('2019-01-01 10:20:30' as timestamp), 'l',123, 'm', cast(-546 as bigint)), named_struct('a',cast('ab' as char(2)), 'b',cast('x' as varchar(3)), 'c','abc',  'd',cast(10.12 as decimal(5,2)), 'e',cast(20 as decimal(19,0)), 'f',cast(1234 as decimal),  'g', true,  'h',cast(3 as tinyint),  'i',cast(12.56e10 as float),  'j', -1234.566e4, 'k',cast('2020-01-01 10:20:30' as timestamp), 'l',123, 'm', cast(-546 as bigint))) from test061.t061dummy ;" > TEST061_junk;

sh echo "insert into test061.thps14 select array(named_struct('a',cast('ab' as char(2)), 'b',cast('x' as varchar(3)), 'c','abc',  'd',cast(10.12 as decimal(5,2)), 'e',cast(20 as decimal(19,0)), 'f',cast(1234 as decimal),  'g', true,  'h',cast(3 as tinyint),  'i',cast(12.56e10 as float),  'j', -1234.566e4, 'k',cast('2021-01-01 10:20:30' as timestamp), 'l',123, 'm',cast(-546 as bigint) ), named_struct('a',cast('ab' as char(2)), 'b',cast('x' as varchar(3)), 'c','abc',  'd',cast(10.12 as decimal(5,2)), 'e',cast(20 as decimal(19,0)), 'f',cast(1234 as decimal),  'g', true,  'h',cast(3 as tinyint),  'i',cast(12.56e10 as float),  'j', -1234.566e4, 'k',cast('2022-01-01 10:20:30' as timestamp) , 'l',123, 'm',cast(-546 as bigint))) from test061.t061dummy ;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

select cast(aa as varchar(300)) from thps14;
select * from unnest(thps14, thps14.aa) x;
select x.* from thps14 lateral view unnest(aa) x;
select cast(thps14.aa as char(300)), x.* from thps14 lateral view unnest(aa) x;
select cast(thps14.aa as char(300)), x.* from thps14 lateral view unnest(aa) x where thps14.aa[1].a = x.a;
select cast(thps14.aa as char(300)), x.* from thps14 lateral view unnest(aa) x where thps14.aa[1].a != x.a;

drop table if exists thps15;
create table thps15 (a struct<a1:struct<a1:int>, a2:array<int>>) stored as parquet;
sh echo "insert into test061.thps15 select named_struct('a1', named_struct('a1',10), 'a2', array(10)) from test061.t061dummy;" > TEST061_junk;
sh echo "insert into test061.thps15 select named_struct('a1', named_struct('a1',100), 'a2', array(100,200)) from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
select * from thps15;
select a, a.a1, a.a2, a.a2[1] from thps15;
select a, a.a1, a.a2, a.a2[2] from thps15;
select * from unnest(thps15, thps15.a.a2) x;
select * from unnest(thps15, a.a2) x;
select * from unnest(thps15, {thps15.a}.a2) x;
select * from thps15 lateral view unnest(a.a2) x;
select x.* from thps15 lateral view unnest(a.a2) x;
select x.* from thps15 lateral view unnest(a.a2) x where x.a2 = 100;

drop table if exists thps16;
create table thps16 (col struct<c1:array<int>, c2:array<int>>) stored as parquet;
select * from thps16 T1, thps16 T2 where (T1.col.c1, T1.col.c2)=(T2.col.c1, T2.col.c2);

-- array of array not supported
create table thps3err0 (a array < array <int> >) stored as parquet;
invoke thps3err0;

-- error: only parquet read supported with composite cols
create table thps3err1 (a array < struct <b:int,c:string > >) stored as orc; 
create table thps3err2 (a array < struct <b:int,c:string > >) stored as textfile;
prepare s from select * from thps3err1;
prepare s from select * from thps3err2;

-- error: write into parq with composite cols not supported
insert into test061.thps3 values (row(10, 'ab'));
insert into test061.thps3 default values;

-- cannot create traf view on a hive table with composite cols
create view trafodion.sch.tverr as select * from thps3;

-- for now, cannot concat hive array columns
select a || a from thps3;

-- for now, cannot cast composite columns
select cast(a[1] as row(b int, c varchar(10))) from thps3;

?section tests_unnest
cqd hive_max_string_length_in_bytes '20';
cqd hive_max_composite_string_length_in_bytes '20';

set schema hive.test061;
drop table if exists t061tun1;
create table t061tun1 (a bigint, b array<string>,
                       c array<struct<c1:int, c2:string>>) stored as parquet;
sh echo "insert into test061.t061tun1 select 1, array('ab','cd','efg'), array(named_struct('c1',10,'c2','xyz'), named_struct('c1',200,'c2','')) from test061.t061dummy;" > TEST061_junk;
sh echo "insert into test061.t061tun1 select 2, array('aaa','b'), array(named_struct('c1',20,'c2','xyz'), named_struct('c1',30,'c2','zz')) from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

--insert into t061tun1 values (3, null,  null);

select * from t061tun1;
select * from unnest(t061tun1, t061tun1.b) x;
select * from unnest(t061tun1, c) x;
select z.a, x.* from t061tun1 as z lateral view unnest(b) x;
select z.a, x.* from t061tun1 as z lateral view unnest(c) x;
select z.a, x.*,y.* from t061tun1 as z lateral view unnest(b) x lateral view unnest(c) y;
select z.a, x.*,y.* from t061tun1 as z lateral view unnest(c) x lateral view unnest(c) y order by 1;

drop table if exists pageads;
create table pageAds (pageid string, adid_list array<int>) stored as parquet;
sh echo "insert into test061.pageads select 'front_page', array(1,2,3) from test061.t061dummy;" > TEST061_junk;
sh echo "insert into test061.pageads select 'contact_page', array(3,4,5) from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

SELECT adid, adtable.adid FROM unnest(pageads, pageads.adid_list) adTable (adid) order by 1;
SELECT adid, adtable.adid FROM unnest(pageads, adid_list) adTable (adid) order by 1;

SELECT pageid, adid
FROM pageAds as pa LATERAL VIEW unnest(adid_list) adTable (adid)
order by pageid, 2;

SELECT adid, count(1)
FROM pageAds LATERAL VIEW unnest(adid_list) adTable (adid)
GROUP BY adid order by adid;

select b from unnest(pageads, pageads.adid_list) a(b) order by b;

select adid_list[1], adTable.adid from pageads lateral view unnest(adid_list) adTable(adid);
select pageads.adid_list[1], adTable.adid from pageads lateral view unnest(adid_list) adTable(adid);
select test061.pageads.adid_list[1], adTable.adid from pageads lateral view unnest(adid_list) adTable(adid);
select hive.test061.pageads.adid_list[1], adTable.adid from pageads lateral view unnest(adid_list) adTable(adid);

-- use of {} around composite cols to remove any ambiguity
select {pageads.adid_list}[1], adTable.adid from pageads lateral view unnest(adid_list) adTable(adid);

select adid_list[1], x.adid_list[1], adTable.adid from pageads as x lateral view unnest(adid_list) adTable(adid);

select {x.adid_list}[1], adTable.adid from pageads as x lateral view unnest(adid_list) adTable(adid);

select {x.adid_list}[1], adid from pageads as x lateral view unnest(adid_list) adTable(adid);

select hive.test061.pageads.adid_list[1] from hive.test061.pageads;
select {hive.test061.pageads.adid_list}[1] from hive.test061.pageads;

drop table if exists basetable;
create table basetable (col1 array<int>, col2 array<string>) stored as parquet;
sh echo "insert into test061.basetable select array(1,2), array('a','b','c') from test061.t061dummy;" > TEST061_junk;
sh echo "insert into test061.basetable select array(3,4), array('d','e','f') from test061.t061dummy;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;
select mycol1, col2 from basetable lateral view unnest(col1) mytable1 (mycol1)
 order by 1;

select col2[1], mycol1 from basetable lateral view unnest(col1) mytable1 (mycol1) 
where mycol1 = 10 order by 1;

select col2[1], mycol1 from basetable lateral view outer unnest(col1) mytable1 (mycol1) 
where mycol1 = 10 order by 1;

SELECT myCol1, myCol2 FROM baseTable
LATERAL VIEW unnest(col1) myTable1 (myCol1)
LATERAL VIEW unnest(col2) myTable2 (myCol2)
order by 1,2;

?section tests_jpmc
drop table if exists hive.test061.`party`;
cqd hive_max_string_length_in_bytes '1000';
cqd hive_max_composite_string_length_in_bytes '10';

CREATE EXTERNAL TABLE hive.test061.`party`(                     
   `schema` string,                                 
   `gwmidentifier` string,                          
   `updatetimestamp` string,                        
   `updateuseridentifier` string,                   
   `clientonlineenrollmentindicator` boolean,       
   `insiderindicator` boolean,                      
   `jpmcaffiliateindicator` boolean,                
   `badaddressindicator` boolean,                   
   `pepindicator` boolean,                          
   `gwmactiveaccountindicator` boolean,             
   `clientsegmentcode` string,                      
   `clienttickercode` string,                       
   `overalldonottradecode` string,                  
   `employeestandardidentifier` string,             
   `householdclientclassificationcode` string,      
   `insidercode` string,                            
   `enterprisecustomersubtypecode` string,          
   `enterpriseclientsensitiveindicator` string,     
   `amlcustomertypecode` string,                    
   `leirecertificationdate` string,                 
   `leiidentifier` string,                          
   `jpmclegalentitycode` string,                    
   `jpmcfiduciaryagentcode` string,                 
   `trustcreatorname` string,                       
   `jpmcaccountcontrollerroleid` bigint,            
   `jpmcclientcontrollerroleid` bigint,             
   `pbpartyindicator` boolean,                      
   `pcspartyindicator` boolean,                     
   `highlysensitiveindicator` boolean,              
   `clientemployeeindicator` boolean,               
   `partyactiveindicator` boolean,                  
   `confidentialnameindicator` boolean,             
   `ultrahighlysensitiveindicator` boolean,         
   `jsipartyindicator` boolean,                     
   `pcdpartyindicator` boolean,                     
   `cpcpartyindicator` boolean,                     
   `deletedindicator` boolean,                      
   `accountvisibilityoverrideindicator` boolean,    
   `enterprisepartyindicator` boolean,              
   `partyfirstname` string,                         
   `partylastname` string,                          
   `partyfullname` string,                          
   `legaladdresscityname` string,                   
   `legaladdressstatecode` string,                  
   `legaladdresscountryisocode` string,             
   `partymiddlename` string,                        
   `clientvisibilitygroupcode` string,              
   `eciidentifier` string,                          
   `dmeciidentifier` string,                        
   `gcrcode` string,                                
   `casidentifier` string,                          
   `partytypecode` string,                          
   `primarylobcode` string,                         
   `ucnidentifier` string,                          
   `preferredlanguagecode` string,                  
   `partyclassificationcode` string,                
   `partystatuscode` string,                        
   `enterpriseclientacquisitioncode` string,        
   `sourceapplicationcode` string,                  
   `partyidentifier` bigint,                        
   `partydescriptionidentifier` bigint,             
   `spnidentifier` string,                          
   `clientopendate` string,                         
   `partyalternateidentifier` string,               
   `partyalternateidentifiertypecode` string,       
   `marketingoptoutindicator` boolean,              
   `deleteindicator` boolean,                       
   `customerlifecycleroleidentifier` bigint,        
   `professionaladvisorindicator` boolean,          
   `partycategorycode` string,                      
   `empldesctext` string,                           
   `deceasedindicator` boolean,                     
   `birthdateapproximateindicator` boolean,         
   `gendercode` string,                             
   `maritalstatuscode` string,                      
   `employername` string,                           
   `mothermaidenname` string,                       
   `maidenname` string,                             
   `prefixname` string,                             
   `suffixname` string,                             
   `generationname` string,                         
   `cityofbirthname` string,                        
   `countryofbirthisocode` string,                  
   `cityofbirthcode` string,                        
   `provincestatecode` string,                      
   `birthdateformatcode` string,                    
   `uspermanentresidentindicator` boolean,          
   `employmenttypecode` string,                     
   `occupationtypecode` string,                     
   `occupationdescriptiontext` string,              
   `deceaseddate` string,                           
   `birthdate` string,                              
   `forprofitindicator` boolean,                    
   `passwordtext` string,                           
   `nonprofitcharitabletrusttypecode` string,       
   `nonprofitcharitabletrustsubtypecode` string,    
   `nonprofitcharitableentitytypecode` string,      
   `estatetrusttypecode` string,                    
   `incorporationcountrycode` string,               
   `incorporationstatecode` string,                 
   `incorporationdate` string,                      
   `primarykey` bigint,                             
   `valid_from` string,                             
   `valid_till` string,                             
   `clientcountryrelationships` array<struct<countryISO2Code:string,countryPurposeCode:string,primaryCountryIndicator:boolean,fromDate:string,toDate:string,cityName:string,postalCode:string,provinceStateCode:string,schema:string>>,  
   `clientcredithierarchies` array<struct<partyAlternateIdentifier:string,partyAlternateIdentifierTypeCode:string,parentPartyAlternateIdentifier:string,parentPartyAlternateIdentifierTypeCode:string,ultimateParentPartyAlternateIdentifier:string,ultimateParentPartyAlternateIdentifierTypeCode:string,schema:string>>,  
   `clientcountryspecialprocesstypes` array<struct<creditSpecialProcessTypeCode:string,schema:string>>,  
   `clientkycriskratings` array<struct<clientKYCRiskRatingCode:string,clientKYCCompletionDate:string,schema:string>>,  
   `muniadvisorycompliance` array<struct<muniAdvisoryEntityTypeCode:string,attestationCertificationDate:string,attestationExpirationDate:string,muniProceedsIndicator:boolean,schema:string>>,  
   `clientaliases` array<struct<languageCode:string,partyAliasName:string,partyAliasNameDescription:string,sourceApplicationCode:string,partyAliasNameSequence:bigint,schema:string>>,  
   `clientcreditratings` array<struct<creditRatingCode:string,ratingAgencyPartyIdentifier:bigint,schema:string>>,  
   `clientdonottradereasons` array<struct<doNotTradeReasonCode:string,doNotTradeEffectiveDate:string,schema:string>>,  
   `governmentidentifications` array<struct<governmentIssuedIdentification:string,issuerCountryCode:string,governmentIssuedIdDescription:string,governmentIssuedIdType:string,issuedLocationName:string,partyVerificationIdNumber:bigint,schema:string>>,  
   `industryclassifications` array<struct<primaryIndustryIndicator:boolean,industryClassificationTypeCode:string,industryClassificationSchemeIdentifier:int,industryClassicationCategoryIdentifier:bigint,schema:string>>,  
   `clientmarketingbranches` array<struct<marketingBranchIdentifier:bigint,schema:string>>,  
   `clientalternatenames` array<struct<businessSystemCode:string,namePurposeTypeCode:string,nameTypeCode:string,partyName:string,confidentialNameIndicator:boolean,sourceApplicationCode:string,nameDescriptionText:string,schema:string>>) 
 PARTITIONED BY (                                   
   `data_group` string,                             
   `branchidentifier` bigint)                       
stored as parquet;

set schema hive.test061;
invoke party;
showddl party;
select * from party;
select clientcountryrelationships[10].countryPurposeCode from party;

drop table if exists hive.test061.party2;
CREATE EXTERNAL TABLE hive.test061.`party2`(                     
   `schema` string,                                 
   `gwmidentifier` string,                          
   `insiderindicator` boolean,                      
   `incorporationstatecode` string,                 
   `incorporationdate` string,                      
   `primarykey` bigint,                             
   `clientcountryrelationships` array<struct<countryISO2Code:string,countryPurposeCode:string,primaryCountryIndicator:boolean,fromDate:string,toDate:string,cityName:string,postalCode:string,provinceStateCode:string,schema:string>> 
--   `governmentidentifications` array<struct<governmentIssuedIdentification:string,issuerCountryCode:string,governmentIssuedIdDescription:string,governmentIssuedIdType:string,issuedLocationName:string,partyVerificationIdNumber:bigint,schema:string>>,  
--   `industryclassifications` array<struct<primaryIndustryIndicator:boolean,industryClassificationTypeCode:string,industryClassificationSchemeIdentifier:int,industryClassicationCategoryIdentifier:bigint,schema:string>>
)
stored as parquet;

truncate table party2;
sh echo "insert into test061.party2 select 'abc','de',true,'xyzz','today', 100, array(named_struct('countryISO2Code','ind','countrypurposecode','ab', 'primarycountryindicator', true, 'fromdate','2001-01-01', 'toDate', '2018-01-01', 'cityName', 'milpitas', 'postalcode', '94111', 'provincestatecode', 'CA', 'schema', 'sch')) from test061.t061dummy;" > TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

invoke party2;
showddl party2;
select * from party2;
select clientcountryrelationships[1].countryPurposeCode from party2;

drop table if exists hive.test061.party3;
CREATE TABLE hive.test061.`party3`(                     
   `schema` string,                                 
   `gwmidentifier` string,                          
   `insiderindicator` boolean,                      
   `incorporationstatecode` string,                 
   `incorporationdate` string,                      
   `primarykey` bigint,                             
   `clientcountryrelationships` array<struct<countryISO2Code:string,countryPurposeCode:string,primaryCountryIndicator:boolean,fromDate:string,toDate:string,cityName:string,postalCode:string,provinceStateCode:string,schema:string>> 
)
 PARTITIONED BY (                                   
   `branchidentifier` bigint)                       
stored as parquet;
truncate table party3;

sh echo "insert into test061.party3 partition (branchidentifier = 100) select 'abc','de',true,'xyzz','today', 100, array(named_struct('countryISO2Code','ind','countrypurposecode','ab', 'primarycountryindicator', true, 'fromdate','2001-01-01', 'toDate', '2018-01-01', 'cityName', 'milpitas', 'postalcode', '94111', 'provincestatecode', 'CA', 'schema', 'sch')) from test061.t061dummy;" > TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

invoke party3;
showddl party3;
select * from party3;
select clientcountryrelationships[1].countryPurposeCode from party3;

-- table PARTYADDRESS
create database if not exists hive.db_gwm_morph_mcd;
set schema hive.db_gwm_morph_mcd;
drop table if exists partyaddress;
sh regrhadoop.ksh fs -rm -r /user/hive/warehouse/db_gwm_morph_mcd.db/partyaddress;
CREATE EXTERNAL TABLE `partyaddress`(              
   `schema` string,                                 
   `gwmidentifier` string,                          
   `primarykey` bigint,                             
   `updatetimestamp` string,                        
   `record_update_dt` string,                        
   `updateuseridentifier` string,                   
   `valid_from` string,                             
   `valid_till` string,                             
   `clientaddresses` array<struct<callbackIndicator:boolean,confidentialAddressIndicator:boolean,mailingAddressIndicator:boolean,preferredAddressIndicator:boolean,addressCommentsText:string,addressIdentifier:bigint,addressPurposeTypeIdentifier:bigint,addressEffectiveDate:string,addressEndDate:string,taxJurisdictionCode:string,enterpriseAddressIndicator:boolean,enterprisePrimaryAddressIndicator:boolean,sourceApplicationCode:string,partyIdentifier:bigint,addressTypeIdentifier:bigint,websiteAddress:string,countryISO2Code:string,phoneExtensionAddress:string,nonNANPIndicator:boolean,internationalDialingCode:string,formattedPhoneNumberAddress:string,unconvertedPhoneNumberAddress:string,unformattedPhoneNumberAddress:string,internationalIndicator:boolean,formattedAddressIndicator:boolean,cityName:string,countryName:string,stateName:string,stateCode:string,line1Address:string,line2Address:string,line3Address:string,line4Address:string,line5Address:string,line6Address:string,postalCode:string,mailingCompanyName:string,addressLastName:string,mailingTitleName:string,mailingSalutationText:string,provinceStateCode:string,addressFirstName:string,mailingLabelText:string,emailAddress:string,addressTypeName:string,addressPurposeName:string,schema:string>>) 
 PARTITIONED BY (                                   
   `data_group` string,                             
   `branchidentifier` bigint)    
stored as parquet;
truncate table partyaddress;
select * from partyaddress;

-- Query 1
select gwmidentifier,branchidentifier,valid_from,record_update_dt,addr.emailaddress,data_group from partyaddress as p lateral view outer unnest(clientaddresses) addr 
 where  addr.emailaddress like '%@%' order by gwmidentifier,branchidentifier;

select gwmidentifier,branchidentifier,valid_from,record_update_dt,
       clientaddresses[1].emailaddress,data_group 
 from partyaddress
 where clientaddresses[1].emailaddress like '%@%' 
  order by gwmidentifier,branchidentifier;

-- Query 2
select data_group, addr.emailaddress,gwmidentifier,branchidentifier, valid_from, record_update_Dt from partyaddress as p lateral view outer unnest(clientaddresses) addr 
where gwmidentifier in ('test3456','test1234' ) and branchidentifier =10 order by gwmidentifier;

select data_group, clientaddresses[1].emailaddress,
  gwmidentifier,branchidentifier, valid_from, record_update_dt
  from partyaddress 
  where gwmidentifier in ('test3456','test1234' ) and branchidentifier =10 
  order by gwmidentifier;

-- Query 3
select distinct a.gwmidentifier,a.branchidentifier,a.valid_from,a.valid_till,a.record_update_dt, a.emailaddress, a.data_group,a.updatetimestamp,b.updatetimestamp,b.record_update_dt 
from  
 (select c.gwmidentifier,c.branchidentifier,c.valid_from,c.valid_till,c.record_update_dt, c.data_group,c.updatetimestamp, addr.* from db_gwm_morph_mcd.partyaddress as c lateral view outer unnest(clientaddresses) addr where data_group='history') a 
inner join  
 (select distinct gwmidentifier,branchidentifier,record_update_dt,updatetimestamp from db_gwm_morph_mcd.partyaddress as p lateral view outer unnest(clientaddresses) addr where data_group='latest' and addr.emailaddress like '%@%') b 
on
 a.gwmidentifier=b.gwmidentifier and a.branchidentifier = b.branchidentifier and b.updatetimestamp > a.updatetimestamp and b.record_update_dt < a.record_update_dt order by a.gwmidentifier, a.branchidentifier ; 

drop external table if exists partyaddress2 for hive.db_gwm_morph_mcd.partyaddress2;
drop table if exists partyaddress2;

sh regrhadoop.ksh fs -rm -r /user/hive/warehouse/db_gwm_morph_mcd.db/partyaddress2;
CREATE EXTERNAL TABLE `partyaddress2`(              
   `schema` string,                                 
   `gwmidentifier` string,                          
   `primarykey` bigint,                             
   `updatetimestamp` string,                        
   `record_update_dt` string,                        
   `updateuseridentifier` string,                   
   `valid_from` string,                             
   `valid_till` string,                             
   `clientaddresses` array<struct<callbackIndicator:boolean,emailAddress:string,addressTypeName:string,schema:string>>) 
 PARTITIONED BY (                                   
   `data_group` string,                             
   `branchidentifier` bigint)    
stored as parquet;
truncate table partyaddress2;

sh echo "insert into db_gwm_morph_mcd.partyaddress2 partition(data_group = 'abc', branchidentifier = 100) select 'abc', 'id12', 100, '2018-01-01 10:10:10', '2018-01-01', 'uid34', 'x', 'y', array(named_struct('callbackIndicator', true, 'emailAddress', 'someone@somewhere.com', 'addressTypeName', 'residential', 'schema', 'sch')) from test061.t061dummy ;" > TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

select * from partyaddress2;

select distinct a.gwmidentifier,a.branchidentifier,a.valid_from,a.valid_till,a.record_update_dt, a.clientaddresses[1].emailaddress, a.data_group,a.updatetimestamp,b.updatetimestamp,b.record_update_dt 
from  
 (select c.gwmidentifier,c.branchidentifier,c.valid_from,c.valid_till,c.record_update_dt, c.data_group,c.updatetimestamp, 
   clientaddresses
   from db_gwm_morph_mcd.partyaddress2 c where data_group='history') a 
inner join  
 (select distinct gwmidentifier,branchidentifier,record_update_dt,updatetimestamp from db_gwm_morph_mcd.partyaddress2  
  where data_group='latest' and clientaddresses[1].emailaddress like '%@%') b 
on
 a.gwmidentifier=b.gwmidentifier and a.branchidentifier = b.branchidentifier and b.updatetimestamp > a.updatetimestamp and b.record_update_dt < a.record_update_dt order by a.gwmidentifier, a.branchidentifier ; 

-- should return error
create external table partyaddress2(clientaddresses row(a int) array[10]) for hive.db_gwm_morph_mcd.partyaddress2;

create external table partyaddress2("SCHEMA" char(10)) for hive.db_gwm_morph_mcd.partyaddress2;
showddl partyaddress2;
select * from partyaddress2;


-- test for lateral outer 
drop external table if exists partyaddress3 for hive.db_gwm_morph_mcd.partyaddress3;
drop table if exists partyaddress3;

CREATE TABLE `partyaddress3`(
  `schema` string,
  `gwmidentifier` string,
  `primarykey` bigint,
  `updatetimestamp` string,
  `record_update_dt` string,
  `updateuseridentifier` string,
  `valid_from` string,
  `valid_till` string,
  `clientaddresses` array<struct<callbackindicator:boolean,confidentialaddressindicator:boolean,mailingaddressindicator:boolean,preferredaddressindicator:boolean,addresscommentstext:string,addressidentifier:int,addresspurposetypeidentifier:int,addresseffectivedate:string,addressenddate:string,taxjurisdictioncode:string,enterpriseaddressindicator:boolean,enterpriseprimaryaddressindicator:boolean,sourceapplicationcode:string,partyidentifier:int,addresstypeidentifier:int,websiteaddress:string,countryiso2code:string,phoneextensionaddress:string,nonnanpindicator:boolean,internationaldialingcode:string,formattedphonenumberaddress:string,unconvertedphonenumberaddress:string,unformattedphonenumberaddress:string,internationalindicator:boolean,formattedaddressindicator:boolean,cityname:string,countryname:string,statename:string,statecode:string,line1address:string,line2address:string,line3address:string,line4address:string,line5address:string,line6address:string,postalcode:string,mailingcompanyname:string,addresslastname:string,mailingtitlename:string,mailingsalutationtext:string,provincestatecode:string,addressfirstname:string,mailinglabeltext:string,emailaddress:string,addresstypename:string,addresspurposename:string,schema:string>>)
PARTITIONED BY (
  `data_group` string,
  `branchidentifier` bigint)
  stored as parquet ;


sh echo "insert into db_gwm_morph_mcd.partyaddress3 partition(data_group = 'abc', branchidentifier = 100) select 'abc', 'id12', 100, '2018-01-01 10:10:10', '2018-01-01', 'uid34', 'x', 'y', array(named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello')) from test061.t061dummy ;" > TEST061_junk;

sh echo "insert into db_gwm_morph_mcd.partyaddress3 partition(data_group = 'abc', branchidentifier = 10) select 'abc', 'test1234', 100, '2018-01-01 10:10:10', '2018-01-01', 'uid34', 'x', 'y', array(named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello')) from test061.t061dummy ;" >> TEST061_junk;

sh echo "insert into db_gwm_morph_mcd.partyaddress3 partition(data_group = 'abcd', branchidentifier = 10) select 'abc', 'test3456', 100, '2018-01-01 10:10:10', '2018-01-01', 'uid34', 'x', 'y', array(named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello'),named_struct('callbackindicator', true, 'confidentialaddressindicator',  true , 'mailingaddressindicator', true, 'preferredaddressindicator', true, 'addresscommentstext', 'none' , 'addressidentifier', 1 , 'addresspurposetypeidentifier', 1 , 'addresseffectivedate', '01-01-2018', 'addressenddate', '01-01-2019', 'taxjurisdictioncode',  'TX' ,'enterpriseaddressindicator', true, 'enterpriseprimaryaddressindicator', true,'sourceapplicationcode', 'hello' ,'partyidentifier', 1,'addresstypeidentifier', 1,'websiteaddress', 'http://www.yahoo.com','countryiso2Code', 'hello','phoneextensionaddress', 'hello','nonnanpindicator',true,'internationaldialingcode', 'hello','formattedphonenumberaddress', 'hello','unconvertedphonenumberaddress', 'hello','unformattedphonenumberaddress', 'hello','internationalindicator',true,'formattedaddressindicator',true,'cityname', 'hello','countryname', 'hello','statename', 'hello','statecode', 'hello','line1address', 'hello','line2address', 'hello','line3address', 'hello','line4address', 'hello','line5address', 'hello','line6address', 'hello','postalcode', 'hello','mailingcompanyname', 'hello','addresslastname', 'hello','mailingtitlename', 'hello','mailingsalutationtext', 'hello','provincestatecode', 'hello','addressfirstname', 'hello','mailinglabeltext', 'hello','emailaddress', 'someone@yahoo.com','addresstypename', 'hello','addresspurposename', 'hello','schema', 'hello')) from test061.t061dummy ;" >> TEST061_junk;
sh regrhive.ksh -f TEST061_junk;

select gwmidentifier,branchidentifier,valid_from,record_update_dt,addr.emailaddress,data_group from partyaddress3 lateral view outer unnest(clientaddresses) addr 
 where  addr.emailaddress like '%@%' order by gwmidentifier,branchidentifier;

select data_group, addr.emailaddress,gwmidentifier,branchidentifier, valid_from, record_update_Dt from partyaddress3 lateral view outer unnest(clientaddresses) addr 
where gwmidentifier in ('test3456','test1234' ) and branchidentifier =10 order by gwmidentifier;
  
?section clean_up
cleanup table hive.test061.thps3err0;
cleanup table hive.test061.thps3err1;
cleanup table hive.test061.thps3err2;

?section crashes


