-- Test: TEST201 (Core)
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@

obey TEST201(clean);
log LOG201 clear;
obey TEST201(setup);
obey TEST201(test);
log;
obey TEST201(clean);
exit;

?section setup
drop table if exists t201t1;
create table t201t1(a int, b int);

?section test
-- test drop and add column
begin work;
drop table t201t1;
sh sqlci -i TEST201\(altert201t1\) >> LOG201;
commit;

-- test alter and drop
obey TEST201(setup);
begin work;
alter table t201t1 add column c int;
sh sqlci -i TEST201\(dropt201t1\) >> LOG201;
commit;

--test drop and create
obey TEST201(setup);
begin work;
drop table t201t1;
sh sqlci -i TEST201\(createt201t1\) >> LOG201;
commit;

--test create and drop
begin work;
create table t201t1(a int);
sh sqlci -i TEST201\(dropt201t1\) >> LOG201;
commit;

--test alter and create 
obey TEST201(setup);
begin work;
alter table t201t1 add column c int;
sh sqlci -i TEST201\(createt201t1\) >> LOG201;
commit;

--test create and alter
drop table t201t1;
begin work;
create table t201t1(a int);
sh sqlci -i TEST201\(altert201t1\) >> LOG201;
commit;

-- test create and create 
drop table if exists t201t1;
begin work;
create table t201t1(a int);
sh sqlci -i TEST201\(createt201t1\) >> LOG201;
commit;

-- test drop and drop
create table if not exists t201t1(a int);
begin work;
drop table t201t1;
sh sqlci -i TEST201\(dropt201t1\) >> LOG201;
commit;

--teset alter and alter
create table if not exists t201t1(a int);
begin work;
alter table t201t1 add column c int;
sh sqlci -i TEST201\(altert201t1\) >> LOG201;
commit;

-- test drop and select
obey TEST201(setup);
begin work;
drop table t201t1;
sh sqlci -i TEST201\(selectt201t1\) >> LOG201;
sh sqlci -i TEST201\(insertt201t1\) >> LOG201;
commit;

-- test select and drop
obey TEST201(setup);
begin work;
select * from t201t1;
sh sqlci -i TEST201\(dropt201t1\) >> LOG201;
commit;

-- test alter and select
obey TEST201(setup);
begin work;
alter table t201t1 add column c int;
sh sqlci -i TEST201\(selectt201t1\) >> LOG201;
sh sqlci -i TEST201\(insertt201t1\) >> LOG201;
commit;

-- test select and alter
obey TEST201(setup);
begin work;
select * from t201t1;
sh sqlci -i TEST201\(altert201t1\) >> LOG201;
commit;

-- test select and drop column
obey TEST201(setup);
begin work;
select * from t201t1;
sh sqlci -i TEST201\(alter2t201t1\) >> LOG201;
commit;

-- test 1) drop table 2) rollback 3) drop table
obey TEST201(setup);
begin work;
drop table t201t1;
-- release X table lock
rollback;
begin work;
drop table t201t1;
commit;

-- test AddUniqueConstraint
obey TEST201(setup);
begin work;
alter table t201t1 add constraint alter3 unique(a);
sh sqlci -i TEST201\(alter3t201t1\) >> LOG201;
commit;

-- test AlterColumnDatatype
obey TEST201(setup);
alter table t201t1 add column c varchar(5);
begin work;
alter table t201t1 alter column c varchar(10);
sh sqlci -i TEST201\(alter4t201t1\) >> LOG201;
commit;

-- test AlterColumnRename
obey TEST201(setup);
begin work;
alter table t201t1 alter column a rename to c;
sh sqlci -i TEST201\(alter5t201t1\) >> LOG201;
commit;

-- test add table check constraint
obey TEST201(setup);
begin work;
alter table t201t1 add constraint alter6 check (a>0);
sh sqlci -i TEST201\(alter6t201t1\) >> LOG201;
commit;

-- test drop table constraint
obey TEST201(setup);
alter table t201t1 add constraint alter7 check (a>0);
begin work;
alter table t201t1 drop constraint alter7;
sh sqlci -i TEST201\(alter7t201t1\) >> LOG201;
commit;

-- test truncate table
obey TEST201(setup);
begin work;
select * from t201t1;
sh sqlci -i TEST201\(truncatet201t1\) >> LOG201;
commit;

-- test purgedata
obey TEST201(setup);
begin work;
select * from t201t1;
sh sqlci -i TEST201\(purgedatat201t1\) >> LOG201;
commit;

-- test drop index and select
obey TEST201(setup);
create index t201t1_index on t201t1(a);
set parserflags 1;
bt;
select * from table(index_table t201t1_index) for update;
sh sqlci -i TEST201\(dropindext201t1\) >> LOG201;
commit;

-- test drop view and drop view
obey TEST201(setup);
create view t201t1_view as select * from t201t1;
bt;
drop view t201t1_view;
sh sqlci -i TEST201\(dropviewt201t1\) >> LOG201;
commit;

-- test read uncommitted
obey TEST201(setup);
insert into t201t1 values(1,1);
begin work;
alter table t201t1 add column c varchar(10);
sh sqlci -i TEST201\(readUncommitted1\) >> LOG201;
rollback;

-- alter table t201t1 add column c varchar(10);
-- sh sqlci -i TEST201\(readUncommitted2\) >> LOG201;
-- rollback;

-- test repeatable read
drop table if exists t201t1;
create table t201t1(a int primary key, b int);
insert into t201t1 values(1,1);
set transaction isolation level repeatable read;
begin work;
select * from t201t1 where a = 1;
sh sqlci -i TEST201\(repeatableread_1\) >> LOG201;
sh sqlci -i TEST201\(repeatableread_2\) >> LOG201;
commit;
set transaction isolation level read committed;

-- test stmt level isolation level
-- read uncommitted access
drop table if exists t201t1;
create table t201t1(a int primary key, b int);
insert into t201t1 values(1,1);
begin work;
select * from t201t1 where a = 1 for read uncommitted access;
sh sqlci -i TEST201\(truncatet201t1\) >> LOG201;
rollback;

-- read committed access
insert into t201t1 values(1,1);
begin work;
select * from t201t1 where a = 1 for read committed access;
sh sqlci -i TEST201\(truncatet201t1\) >> LOG201;
rollback;

-- repeatable read access
begin work;
select * from t201t1 where a = 1 for repeatable read access;
sh sqlci -i TEST201\(updatet201t1\) >> LOG201;
rollback;

-- serializable access
select * from t201t1 for serializable access;

-- skip conflict read access
select * from t201t1 for skip conflict access;

-- test unique constraint
drop table if exists t201t1;
create table t201t1(a int not null unique, b int);
bt;
insert into t201t1 values(1,1);
sh sqlci -i TEST201\(insertt201t1\) >> LOG201;
commit;

bt;
insert into t201t1 values(2,2);
sh sqlci -i TEST201\(updatet201t1\) >> LOG201;
commit;

--test upsert
drop table t201t1;
create table t201t1(a int not null primary key, b int);
bt;
upsert into t201t1 values(1,1);
sh sqlci -i TEST201\(upsertt201t1\) >> LOG201;
commit;

--test update using upsert
drop table t201t1;
create table t201t1(a int not null primary key, b int);
insert into t201t1 values(1,1);
bt;
update using upsert t201t1 set b = 2 where a = 1;
sh sqlci -i TEST201\(updateUsingUpsertt201t1\) >> LOG201;
commit;

--test purgedata partition table
create table t201t2 (c1 int, "X.Y" int unique);
insert into t201t2 values (1,1),(2,2),(3,3),(105,105);
create table if not exists t201t3 (row_id int not null, C1 int not null default 1, C2 int not null unique no default, "YEAR" int not null, "A-b" int not null not droppable constraint "AVG" check ("A-b" > 0), "C.d" int not null not droppable, "E.F" int not null references t201t2 ("X.Y"), constraint "C-o-N-s-T" unique(C1, C2, "YEAR", "A-b", "C.d", "E.F"), constraint "c.O.n.S.t" primary key (row_id, C1, C2, "YEAR", "A-b" asc, "C.d" desc, "E.F"), constraint const4 check ("E.F" > 0), foreign key ("C.d") references t201t2 ("X.Y"))
store by (row_id, C1, C2, "YEAR", "A-b", "C.d", "E.F")
attributes synchronous replication
salt using 10 partitions in 5 regions on (row_id, C1, C2, "YEAR", "A-b", "C.d", "E.F");
create table t201t4 like t201t3 with constraints with partitions;
purgedata t201t4;
delete from t201t4;
select * from t201t4 order by 1;
drop table t201t4 cascade;
drop table t201t3 cascade;
drop table t201t2 cascade;

?section truncatet201t1
truncate table t201t1;

?section purgedatat201t1
purgedata t201t1;

?section dropt201t1
drop table t201t1;

?section altert201t1
alter table t201t1 add column c int;

?section alter2t201t1
alter table t201t1 drop column b;

?section alter3t201t1
alter table t201t1 add constraint alter3 unique(a);

?section alter4t201t1
alter table t201t1 alter column c varchar(10);

?section alter5t201t1
alter table t201t1 alter column a rename to c;

?section alter6t201t1
alter table t201t1 add constraint alter6 check (a>0);

?section alter7t201t1
alter table t201t1 drop constraint alter7;

?section createt201t1
create table t201t1(a int, b int);

?section selectt201t1
select * from t201t1;

?section readUncommitted1
set transaction isolation level read uncommitted;
begin work;
select * from t201t1;
commit;

-- ?section readUncommitted2
-- for read uncommitted access is useHbaseXn
-- select * from t201t1 for read uncommitted access;

?section dropindext201t1
drop index t201t1_index;

?section dropviewt201t1
drop view t201t1_view;

?section insertt201t1
insert into t201t1 values(1,1);

?section updatet201t1
update t201t1 set a = 2, b = 2 where a = 1;

?section upsertt201t1
upsert into t201t1 values(1,1);

?section updateUsingUpsertt201t1
update using upsert t201t1 set b = 2 where a = 1;

?section repeatableread_1
set transaction isolation level repeatable read;
begin work;
select * from t201t1 where a = 1 for update;
commit;

?section repeatableread_2
set transaction isolation level repeatable read;
begin work;
delete from t201t1 where a = 1;
commit;


?section clean
drop table if exists t201t1;
