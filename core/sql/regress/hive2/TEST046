-- Tests for PARQUET datatypes
--
-- @@@ START COPYRIGHT @@@
--
-- Licensed to the Apache Software Foundation (ASF) under one
-- or more contributor license agreements.  See the NOTICE file
-- distributed with this work for additional information
-- regarding copyright ownership.  The ASF licenses this file
-- to you under the Apache License, Version 2.0 (the
-- "License"); you may not use this file except in compliance
-- with the License.  You may obtain a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- @@@ END COPYRIGHT @@@

--cqd parquet_columns_pushdown 'OFF';

log LOG046 clear;

set schema hive.hive;
set terminal_charset utf8;

cqd parquet_legacy_timestamp_format 'ON';

cqd AUTO_QUERY_RETRY_WARNINGS 'ON';
cqd HIVE_MAX_STRING_LENGTH_IN_BYTES '32' ;
cqd hist_missing_stats_warning_level '0';
cqd HIST_ROWCOUNT_REQUIRING_STATS '50000';

-- tests for parquet timestamp mismatch check
cqd auto_query_retry_warnings 'ON';

process hive statement 'drop table tparquet';
process hive statement 'create table tparquet(a int) stored as parquet';

select a from hive.hive.tparquet;

sh echo "insert into tparquet values (1);" > TEST046_junk;
sh regrhive.ksh -f TEST046_junk;

select a from hive.hive.tparquet;
insert into hive.hive.tparquet values (2);
select a from hive.hive.tparquet;

process hive statement 'drop table tparquet';
process hive statement 'create table tparquet(a int, b smallint) stored as parquet';

sh echo "insert into tparquet values (1,2);" > TEST046_junk;
sh regrhive.ksh -f TEST046_junk;

--sh echo "select * from tparquet;" > TEST046_junk;
--sh regrhive.ksh -f TEST046_junk | tee -a LOG046;

select a from hive.hive.tparquet;
select b from hive.hive.tparquet;

select * from hive.hive.tparquet order by a,b;

insert into hive.hive.tparquet values (3,4);
--sh echo "select * from tparquet;" > TEST046_junk;
--sh regrhive.ksh -f TEST046_junk | tee -a LOG046;
select * from hive.hive.tparquet order by a,b;

-- tests for various parquet datatypes
cqd auto_query_retry_warnings 'ON';
cqd hive_max_string_length_in_bytes '5';

-- run against PARQUET table
drop external table if exists tparquet10 for hive.hive.tparquet10;
process hive statement 'drop table tparquet10';
process hive statement 'create table tparquet10(a char(2), b varchar(3), c char(5), d varchar(6), e string, f string, g char(2), h varchar(3), i char(3), j varchar(3), k decimal(5,2), l decimal(19,0), m decimal, n boolean, o tinyint, p float, q double, r timestamp) stored as parquet';

invoke hive.hive.tparquet10;
showddl hive.hive.tparquet10;

insert into hive.hive.tparquet10 values 
   ('ab', 'cde', 'ab', 'cde', 'ab', 'cde', 'ab', 'cde', '11', '222',
   123.24, 1234567890123456789, 123456, true, 1, 2.34, 3.45, 
   timestamp '2017-01-01 10:10:10');

sh echo  "insert into tparquet10 values ('ab', 'cde', 'ab', 'cde', 'ab', 'cde', 'ab', 'cde', '11', '222', 123.24, 1234567890123456789, 123456, true, 1, 2.34, 3.45, '2017-01-01 10:10:10');" > TEST046_junk;
sh regrhive.ksh -f TEST046_junk;
                                   
select * from hive.hive.tparquet10 order by 1;

-- test predicate pushdown
cqd attempt_esp_parallelism 'OFF';
cqd query_cache '0';
prepare s from 
select * from hive.hive.tparquet10 where
 a = 'ab' and b = 'cde' and c = 'ab' and d = 'cde' and e = 'ab' and f = 'cde  '
and n = true and o = 1 and p = 2.34 and q = 3.45;
select left(tokenstr('parquet_search_arguments', description, 'executor_predicates'), 1000)
  from table(explain(null, 'S')) where operator = 'PARQUET_SCAN';
execute s;

-- pushdown on decimal cols not yet supported
prepare s from 
select * from hive.hive.tparquet10 where
k = 123.24 and l = 1234567890123456789 and m = 123456;
select left(tokenstr('parquet_search_arguments:', description, 'parquet_pred_pushdown:'), 1000)
  from table(explain(null, 'S')) where operator = 'PARQUET_SCAN';

-- should not pushdown min/max aggr on character, decimal or timestamp columns
explain options 'f' select min(a) from hive.hive.tparquet10;
explain options 'f' select min(b) from hive.hive.tparquet10;
explain options 'f' select min(e) from hive.hive.tparquet10;
explain options 'f' select min(k) from hive.hive.tparquet10;
explain options 'f' select min(r) from hive.hive.tparquet10;

drop external table if exists tparquet10 for hive.hive.tparquet10;
create external table tparquet10 
        (a char(2), b varchar(3),
         c char(5), d varchar(6), 
         e char(2), f varchar(3),
         g char(2) character set utf8, h varchar(3) character set utf8,
         i tinyint, j int)
     for hive.hive.tparquet10;

showddl hive.hive.tparquet10;
select * from hive.hive.tparquet10 order by 1;

insert into hive.hive.tparquet10 values
  ('x', 'yz', 'x', 'yz', 'x', 'yz', 'x', 'yz', 33, 444,
   123.24, 1234567890123456789, 123456, false, 1,
   2.34, 3.45, timestamp '2017-01-01 10:10:10'  );
insert into hive.hive.tparquet10 values
  ('y', 'yz', 'x', 'yz', 'x', 'yz', 'x', 'yz', 33, 444,
   123.24, NULL, 123456, false, 1,
   2.34, 3.45, timestamp '1017-01-01 10:10:10' );

select * from hive.hive.tparquet10 order by 1;

-- pushdown on timestamp col
-- next prepare should pushdown
prepare s from 
select * from hive.hive.tparquet10 where
 r = timestamp '2017-01-01 10:10:10';
select left(tokenstr('parquet_search_arguments:', description, 'executor_predicates:'), 1000)
  from table(explain(null, 'S')) where operator = 'PARQUET_SCAN';
execute s;

-- should not pushdown as timestamp val cannot be converted to 'r date'
drop external table if exists tparquet10 for hive.hive.tparquet10;
create external table tparquet10 (r date) for hive.hive.tparquet10;
prepare s from 
select * from hive.hive.tparquet10 where
 r = timestamp '2017-01-01 10:10:10';
select left(tokenstr('parquet_search_arguments:', description, 'executor_predicates:'), 1000)
  from table(explain(null, 'S')) where operator = 'PARQUET_SCAN';

-- should pushdown, return no rows
prepare s from 
select * from hive.hive.tparquet10 where
 r = date '2017-01-01';
select left(tokenstr('parquet_search_arguments:', description, 'executor_predicates:'), 1000)
  from table(explain(null, 'S')) where operator = 'PARQUET_SCAN';
execute s;

-- should pushdown, return rows
prepare s from 
select * from hive.hive.tparquet10 where
 r > date '2017-01-01';
select left(tokenstr('parquet_search_arguments:', description, 'executor_predicates:'), 1000)
  from table(explain(null, 'S')) where operator = 'PARQUET_SCAN';
execute s;

cqd attempt_esp_parallelism reset;

drop external table if exists tparquet10 for hive.hive.tparquet10;
create external table tparquet10 
        (a char(2), b varchar(3),
         c char(5), d varchar(6), 
         e char(2), f varchar(3),
         g char(2) character set utf8, h varchar(3) character set utf8,
         i tinyint, j int)
     for hive.hive.tparquet10;

-- read parquet schema
get parquet read schema for table hive.hive.tparquet10;
get parquet write schema for table hive.hive.tparquet10;
get parquet schema for table hive.hive.tparquet10;

-- error cases

-- overflow error during insert. Not currently detected.
insert into hive.hive.tparquet10 values
  ('de', 'yz', 'x', 'yz', 'x', 'yz', 'x', 'yz', 333, 444, 1, NULL, 1, true, 1,
   2.34, 3.45, timestamp '2017-01-01 10:10:10');

-- incommpatible datatype against external table
cqd allow_incompatible_assignment 'OFF';
insert into hive.hive.tparquet10 values 
   ('ab', 'cde', 'ab', 'cde', 'ab', 'cde', 'ab', 'cde', '11', '222', 1, 1, 1, 
    true, 1, 2.34, 3.45, timestamp '2017-01-01 10:10:10');
cqd allow_incompatible_assignment reset;

-- number of values less than number of columns
insert into hive.hive.tparquet10 values 
   ('ab', 'cde', 'ab', 'cde', 'ab', 'cde', 'ab', 'cde');

-- overflow error detected during select
truncate table hive.hive.tparquet10;
sh echo "insert into tparquet10 values ('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '555', '666', 1, 1, 1, false, 1, 2.34, 3.45, '2017-01-01 10:10:10');" > TEST046_junk;
sh regrhive.ksh -f TEST046_junk;
select * from hive.hive.tparquet10 order by 1;

-- incompatible values in hive table validated and detected during select
truncate table hive.hive.tparquet10;
sh echo "insert into tparquet10 values ('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 1, 1, 1, false, 1, 2.34, 3.45, '2017-01-01 10:10:10');" > TEST046_junk;
sh regrhive.ksh -f TEST046_junk;
select * from hive.hive.tparquet10 order by 1;

-- get stats
process hive statement 'drop table tparquet';
process hive statement 'create table tparquet(a int, b smallint) stored as parquet';
insert into tparquet values (1,2);
invoke table(parquet stats());
select left(trim(schema_name) || '.' || trim(object_name), 14),
  file_num, 'TotalSize: ' || cast(total_size as varchar(10)), row_count
from table(parquet stats(hive.hive.tparquet));
get parquet stats for table hive.hive.tparquet;

-- test decimal(28,12) read
process hive statement 'drop table tparquet_decimal_28_12';
process hive statement 'create table tparquet_decimal_28_12(a decimal(28,12)) stored as parquet';
sh echo "insert into tparquet_decimal_28_12 values (12045.123456789012),(100.1),(1.000032),(0.1),(0),(-0.1),(0.0011),(-0.0011),(-0.00012);" > TEST046_junk;
sh regrhive.ksh -f TEST046_junk;
select * from hive.hive.tparquet_decimal_28_12 order by a;
select * from hive.hive.tparquet_decimal_28_12 where a < -0.00012 order by a;
select sum(a) from hive.hive.tparquet_decimal_28_12;
select min(a) from hive.hive.tparquet_decimal_28_12;
select max(a) from hive.hive.tparquet_decimal_28_12;

-- test decimal(28,12) writes by sqlci
process hive statement 'drop table tparquet_decimal_28_12';
process hive statement 'create table tparquet_decimal_28_12(a decimal(28,12)) stored as parquet';
insert into hive.hive.tparquet_decimal_28_12 values (12045.123456789012),(100.1),(1.000032),(0.1),(0),(-0.1),(0.0011),(-0.0011),(-0.00012);
select * from hive.hive.tparquet_decimal_28_12 order by a;
select * from hive.hive.tparquet_decimal_28_12 where a < -0.00012 order by a;
select sum(a) from hive.hive.tparquet_decimal_28_12;
select min(a) from hive.hive.tparquet_decimal_28_12;
select max(a) from hive.hive.tparquet_decimal_28_12;

-- drop tables
drop external table if exists tparquet10 for hive.hive.tparquet10;
process hive statement 'drop table tparquet10';
process hive statement 'drop table tparquet';
cleanup table hive.hive.tparquet10;
process hive statement 'drop table tparquet_decimal_28_12';

log;

